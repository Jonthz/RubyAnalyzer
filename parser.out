Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BEGIN
    BITWISE_AND
    BREAK
    CASE
    CLASS
    CLASS_VAR
    COMMENT
    CONSTANT
    DIVIDE_ASSIGN
    DO
    DOT
    ENSURE
    FALSE
    FLOOR_DIVIDE
    LAMBDA
    MINUS_ASSIGN
    MOD
    MODULE
    MOD_ASSIGN
    NEW
    NEXT
    NIL
    NOT
    OR
    PIPE
    PLUS_ASSIGN
    POWER_ASSIGN
    PROC
    QUESTION_MARK
    RAISE
    RANGE
    REDO
    REQUIRE
    RESCUE
    RETRY
    RETURN
    SELF
    SEMICOLON
    SPACESHIP
    SUPER
    TIMES_ASSIGN
    TRUE
    UNTIL
    WHEN
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> statements END
Rule 2     program -> statements
Rule 3     params -> IDENTIFIER
Rule 4     params -> params COMMA IDENTIFIER
Rule 5     statements -> statement
Rule 6     statements -> statements statement
Rule 7     statement -> local_var
Rule 8     statement -> expression
Rule 9     local_var -> IDENTIFIER EQUALS INTEGER
Rule 10    local_var -> IDENTIFIER EQUALS FLOAT
Rule 11    statement -> GLOBAL_VAR ASSIGN STRING
Rule 12    statement -> GLOBAL_VAR ASSIGN expression
Rule 13    factor -> factor POWER factor
Rule 14    factor -> STRING
Rule 15    expression -> LBRACE key_value_pairs RBRACE
Rule 16    expression -> LBRACE RBRACE
Rule 17    key_value_pairs -> key_value
Rule 18    key_value_pairs -> key_value_pairs COMMA key_value
Rule 19    key_value -> expression HASH_ROCKET expression
Rule 20    expression -> IDENTIFIER
Rule 21    expression -> GLOBAL_VAR
Rule 22    expression -> INSTANCE_VAR
Rule 23    statement -> statement statement
Rule 24    statement -> IF expression statement END
Rule 25    statement -> IF expression statement ELSE statement END
Rule 26    statement -> IF expression statement ELSIF expression statement END
Rule 27    statement -> IF expression statement ELSIF expression statement ELSE statement END
Rule 28    expression -> expression GREATER expression
Rule 29    expression -> expression LESS expression
Rule 30    expression -> expression GREATER_EQUAL expression
Rule 31    expression -> expression LESS_EQUAL expression
Rule 32    expression -> expression EQUALS expression
Rule 33    expression -> expression NOT_EQUALS expression
Rule 34    statement -> DEF IDENTIFIER statement END
Rule 35    statement -> IDENTIFIER
Rule 36    statement -> INSTANCE_VAR EQUALS INTEGER
Rule 37    statement -> INSTANCE_VAR EQUALS FLOAT
Rule 38    expression -> SETNEW LPAREN elements RPAREN
Rule 39    statement -> WHILE expression statement END
Rule 40    statement -> IDENTIFIER EQUALS GETS
Rule 41    expression -> term
Rule 42    term -> term DIVIDE factor
Rule 43    term -> term TIMES factor
Rule 44    expression -> expression PLUS term
Rule 45    expression -> expression MINUS term
Rule 46    term -> factor
Rule 47    factor -> INTEGER
Rule 48    factor -> FLOAT
Rule 49    factor -> LPAREN expression RPAREN
Rule 50    expression -> LBRACKET elements RBRACKET
Rule 51    elements -> expression
Rule 52    elements -> elements COMMA expression
Rule 53    statement -> DEF IDENTIFIER LPAREN params RPAREN statement END
Rule 54    statement -> IDENTIFIER LPAREN params RPAREN
Rule 55    statement -> FOR IDENTIFIER IN range statement
Rule 56    range -> INTEGER DOUBLE_DOT INTEGER
Rule 57    range -> FLOAT DOUBLE_DOT FLOAT
Rule 58    statement -> PUTS expression

Terminals, with rules where they appear

AND                  : 
ASSIGN               : 11 12
BEGIN                : 
BITWISE_AND          : 
BREAK                : 
CASE                 : 
CLASS                : 
CLASS_VAR            : 
COMMA                : 4 18 52
COMMENT              : 
CONSTANT             : 
DEF                  : 34 53
DIVIDE               : 42
DIVIDE_ASSIGN        : 
DO                   : 
DOT                  : 
DOUBLE_DOT           : 56 57
ELSE                 : 25 27
ELSIF                : 26 27
END                  : 1 24 25 26 27 34 39 53
ENSURE               : 
EQUALS               : 9 10 32 36 37 40
FALSE                : 
FLOAT                : 10 37 48 57 57
FLOOR_DIVIDE         : 
FOR                  : 55
GETS                 : 40
GLOBAL_VAR           : 11 12 21
GREATER              : 28
GREATER_EQUAL        : 30
HASH_ROCKET          : 19
IDENTIFIER           : 3 4 9 10 20 34 35 40 53 54 55
IF                   : 24 25 26 27
IN                   : 55
INSTANCE_VAR         : 22 36 37
INTEGER              : 9 36 47 56 56
LAMBDA               : 
LBRACE               : 15 16
LBRACKET             : 50
LESS                 : 29
LESS_EQUAL           : 31
LPAREN               : 38 49 53 54
MINUS                : 45
MINUS_ASSIGN         : 
MOD                  : 
MODULE               : 
MOD_ASSIGN           : 
NEW                  : 
NEXT                 : 
NIL                  : 
NOT                  : 
NOT_EQUALS           : 33
OR                   : 
PIPE                 : 
PLUS                 : 44
PLUS_ASSIGN          : 
POWER                : 13
POWER_ASSIGN         : 
PROC                 : 
PUTS                 : 58
QUESTION_MARK        : 
RAISE                : 
RANGE                : 
RBRACE               : 15 16
RBRACKET             : 50
REDO                 : 
REQUIRE              : 
RESCUE               : 
RETRY                : 
RETURN               : 
RPAREN               : 38 49 53 54
SELF                 : 
SEMICOLON            : 
SETNEW               : 38
SPACESHIP            : 
STRING               : 11 14
SUPER                : 
TIMES                : 43
TIMES_ASSIGN         : 
TRUE                 : 
UNTIL                : 
WHEN                 : 
WHILE                : 39
YIELD                : 
error                : 

Nonterminals, with rules where they appear

elements             : 38 50 52
expression           : 8 12 19 19 24 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 39 44 45 49 51 52 58
factor               : 13 13 42 43 46
key_value            : 17 18
key_value_pairs      : 15 18
local_var            : 7
params               : 4 53 54
program              : 0
range                : 55
statement            : 5 6 23 23 24 25 25 26 26 27 27 27 34 39 53 55
statements           : 1 2 6
term                 : 41 42 43 44 45

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements END
    (2) program -> . statements
    (5) statements -> . statement
    (6) statements -> . statements statement
    (7) statement -> . local_var
    (8) statement -> . expression
    (11) statement -> . GLOBAL_VAR ASSIGN STRING
    (12) statement -> . GLOBAL_VAR ASSIGN expression
    (23) statement -> . statement statement
    (24) statement -> . IF expression statement END
    (25) statement -> . IF expression statement ELSE statement END
    (26) statement -> . IF expression statement ELSIF expression statement END
    (27) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (34) statement -> . DEF IDENTIFIER statement END
    (35) statement -> . IDENTIFIER
    (36) statement -> . INSTANCE_VAR EQUALS INTEGER
    (37) statement -> . INSTANCE_VAR EQUALS FLOAT
    (39) statement -> . WHILE expression statement END
    (40) statement -> . IDENTIFIER EQUALS GETS
    (53) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (54) statement -> . IDENTIFIER LPAREN params RPAREN
    (55) statement -> . FOR IDENTIFIER IN range statement
    (58) statement -> . PUTS expression
    (9) local_var -> . IDENTIFIER EQUALS INTEGER
    (10) local_var -> . IDENTIFIER EQUALS FLOAT
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    GLOBAL_VAR      shift and go to state 6
    IF              shift and go to state 8
    DEF             shift and go to state 9
    IDENTIFIER      shift and go to state 10
    INSTANCE_VAR    shift and go to state 11
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    local_var                      shift and go to state 4
    expression                     shift and go to state 5
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 1

    (0) S' -> program .



state 2

    (1) program -> statements . END
    (2) program -> statements .
    (6) statements -> statements . statement
    (7) statement -> . local_var
    (8) statement -> . expression
    (11) statement -> . GLOBAL_VAR ASSIGN STRING
    (12) statement -> . GLOBAL_VAR ASSIGN expression
    (23) statement -> . statement statement
    (24) statement -> . IF expression statement END
    (25) statement -> . IF expression statement ELSE statement END
    (26) statement -> . IF expression statement ELSIF expression statement END
    (27) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (34) statement -> . DEF IDENTIFIER statement END
    (35) statement -> . IDENTIFIER
    (36) statement -> . INSTANCE_VAR EQUALS INTEGER
    (37) statement -> . INSTANCE_VAR EQUALS FLOAT
    (39) statement -> . WHILE expression statement END
    (40) statement -> . IDENTIFIER EQUALS GETS
    (53) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (54) statement -> . IDENTIFIER LPAREN params RPAREN
    (55) statement -> . FOR IDENTIFIER IN range statement
    (58) statement -> . PUTS expression
    (9) local_var -> . IDENTIFIER EQUALS INTEGER
    (10) local_var -> . IDENTIFIER EQUALS FLOAT
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    END             shift and go to state 23
    $end            reduce using rule 2 (program -> statements .)
    GLOBAL_VAR      shift and go to state 6
    IF              shift and go to state 8
    DEF             shift and go to state 9
    IDENTIFIER      shift and go to state 10
    INSTANCE_VAR    shift and go to state 11
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    statement                      shift and go to state 24
    local_var                      shift and go to state 4
    expression                     shift and go to state 5
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 3

    (5) statements -> statement .
    (23) statement -> statement . statement
    (7) statement -> . local_var
    (8) statement -> . expression
    (11) statement -> . GLOBAL_VAR ASSIGN STRING
    (12) statement -> . GLOBAL_VAR ASSIGN expression
    (23) statement -> . statement statement
    (24) statement -> . IF expression statement END
    (25) statement -> . IF expression statement ELSE statement END
    (26) statement -> . IF expression statement ELSIF expression statement END
    (27) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (34) statement -> . DEF IDENTIFIER statement END
    (35) statement -> . IDENTIFIER
    (36) statement -> . INSTANCE_VAR EQUALS INTEGER
    (37) statement -> . INSTANCE_VAR EQUALS FLOAT
    (39) statement -> . WHILE expression statement END
    (40) statement -> . IDENTIFIER EQUALS GETS
    (53) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (54) statement -> . IDENTIFIER LPAREN params RPAREN
    (55) statement -> . FOR IDENTIFIER IN range statement
    (58) statement -> . PUTS expression
    (9) local_var -> . IDENTIFIER EQUALS INTEGER
    (10) local_var -> . IDENTIFIER EQUALS FLOAT
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for SETNEW resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    END             reduce using rule 5 (statements -> statement .)
    $end            reduce using rule 5 (statements -> statement .)
    GLOBAL_VAR      shift and go to state 6
    IF              shift and go to state 8
    DEF             shift and go to state 9
    IDENTIFIER      shift and go to state 10
    INSTANCE_VAR    shift and go to state 11
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

  ! GLOBAL_VAR      [ reduce using rule 5 (statements -> statement .) ]
  ! IF              [ reduce using rule 5 (statements -> statement .) ]
  ! DEF             [ reduce using rule 5 (statements -> statement .) ]
  ! IDENTIFIER      [ reduce using rule 5 (statements -> statement .) ]
  ! INSTANCE_VAR    [ reduce using rule 5 (statements -> statement .) ]
  ! WHILE           [ reduce using rule 5 (statements -> statement .) ]
  ! FOR             [ reduce using rule 5 (statements -> statement .) ]
  ! PUTS            [ reduce using rule 5 (statements -> statement .) ]
  ! LBRACE          [ reduce using rule 5 (statements -> statement .) ]
  ! SETNEW          [ reduce using rule 5 (statements -> statement .) ]
  ! LBRACKET        [ reduce using rule 5 (statements -> statement .) ]
  ! STRING          [ reduce using rule 5 (statements -> statement .) ]
  ! INTEGER         [ reduce using rule 5 (statements -> statement .) ]
  ! FLOAT           [ reduce using rule 5 (statements -> statement .) ]
  ! LPAREN          [ reduce using rule 5 (statements -> statement .) ]

    statement                      shift and go to state 25
    local_var                      shift and go to state 4
    expression                     shift and go to state 5
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 4

    (7) statement -> local_var .

    GLOBAL_VAR      reduce using rule 7 (statement -> local_var .)
    IF              reduce using rule 7 (statement -> local_var .)
    DEF             reduce using rule 7 (statement -> local_var .)
    IDENTIFIER      reduce using rule 7 (statement -> local_var .)
    INSTANCE_VAR    reduce using rule 7 (statement -> local_var .)
    WHILE           reduce using rule 7 (statement -> local_var .)
    FOR             reduce using rule 7 (statement -> local_var .)
    PUTS            reduce using rule 7 (statement -> local_var .)
    LBRACE          reduce using rule 7 (statement -> local_var .)
    SETNEW          reduce using rule 7 (statement -> local_var .)
    LBRACKET        reduce using rule 7 (statement -> local_var .)
    STRING          reduce using rule 7 (statement -> local_var .)
    INTEGER         reduce using rule 7 (statement -> local_var .)
    FLOAT           reduce using rule 7 (statement -> local_var .)
    LPAREN          reduce using rule 7 (statement -> local_var .)
    END             reduce using rule 7 (statement -> local_var .)
    $end            reduce using rule 7 (statement -> local_var .)
    ELSE            reduce using rule 7 (statement -> local_var .)
    ELSIF           reduce using rule 7 (statement -> local_var .)


state 5

    (8) statement -> expression .
    (28) expression -> expression . GREATER expression
    (29) expression -> expression . LESS expression
    (30) expression -> expression . GREATER_EQUAL expression
    (31) expression -> expression . LESS_EQUAL expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term

    GLOBAL_VAR      reduce using rule 8 (statement -> expression .)
    IF              reduce using rule 8 (statement -> expression .)
    DEF             reduce using rule 8 (statement -> expression .)
    IDENTIFIER      reduce using rule 8 (statement -> expression .)
    INSTANCE_VAR    reduce using rule 8 (statement -> expression .)
    WHILE           reduce using rule 8 (statement -> expression .)
    FOR             reduce using rule 8 (statement -> expression .)
    PUTS            reduce using rule 8 (statement -> expression .)
    LBRACE          reduce using rule 8 (statement -> expression .)
    SETNEW          reduce using rule 8 (statement -> expression .)
    LBRACKET        reduce using rule 8 (statement -> expression .)
    STRING          reduce using rule 8 (statement -> expression .)
    INTEGER         reduce using rule 8 (statement -> expression .)
    FLOAT           reduce using rule 8 (statement -> expression .)
    LPAREN          reduce using rule 8 (statement -> expression .)
    END             reduce using rule 8 (statement -> expression .)
    $end            reduce using rule 8 (statement -> expression .)
    ELSE            reduce using rule 8 (statement -> expression .)
    ELSIF           reduce using rule 8 (statement -> expression .)
    GREATER         shift and go to state 26
    LESS            shift and go to state 27
    GREATER_EQUAL   shift and go to state 28
    LESS_EQUAL      shift and go to state 29
    EQUALS          shift and go to state 30
    NOT_EQUALS      shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 6

    (11) statement -> GLOBAL_VAR . ASSIGN STRING
    (12) statement -> GLOBAL_VAR . ASSIGN expression
    (21) expression -> GLOBAL_VAR .

    ASSIGN          shift and go to state 34
    GREATER         reduce using rule 21 (expression -> GLOBAL_VAR .)
    LESS            reduce using rule 21 (expression -> GLOBAL_VAR .)
    GREATER_EQUAL   reduce using rule 21 (expression -> GLOBAL_VAR .)
    LESS_EQUAL      reduce using rule 21 (expression -> GLOBAL_VAR .)
    EQUALS          reduce using rule 21 (expression -> GLOBAL_VAR .)
    NOT_EQUALS      reduce using rule 21 (expression -> GLOBAL_VAR .)
    PLUS            reduce using rule 21 (expression -> GLOBAL_VAR .)
    MINUS           reduce using rule 21 (expression -> GLOBAL_VAR .)
    GLOBAL_VAR      reduce using rule 21 (expression -> GLOBAL_VAR .)
    IF              reduce using rule 21 (expression -> GLOBAL_VAR .)
    DEF             reduce using rule 21 (expression -> GLOBAL_VAR .)
    IDENTIFIER      reduce using rule 21 (expression -> GLOBAL_VAR .)
    INSTANCE_VAR    reduce using rule 21 (expression -> GLOBAL_VAR .)
    WHILE           reduce using rule 21 (expression -> GLOBAL_VAR .)
    FOR             reduce using rule 21 (expression -> GLOBAL_VAR .)
    PUTS            reduce using rule 21 (expression -> GLOBAL_VAR .)
    LBRACE          reduce using rule 21 (expression -> GLOBAL_VAR .)
    SETNEW          reduce using rule 21 (expression -> GLOBAL_VAR .)
    LBRACKET        reduce using rule 21 (expression -> GLOBAL_VAR .)
    STRING          reduce using rule 21 (expression -> GLOBAL_VAR .)
    INTEGER         reduce using rule 21 (expression -> GLOBAL_VAR .)
    FLOAT           reduce using rule 21 (expression -> GLOBAL_VAR .)
    LPAREN          reduce using rule 21 (expression -> GLOBAL_VAR .)
    END             reduce using rule 21 (expression -> GLOBAL_VAR .)
    $end            reduce using rule 21 (expression -> GLOBAL_VAR .)
    ELSE            reduce using rule 21 (expression -> GLOBAL_VAR .)
    ELSIF           reduce using rule 21 (expression -> GLOBAL_VAR .)


state 7

    (14) factor -> STRING .

    POWER           reduce using rule 14 (factor -> STRING .)
    DIVIDE          reduce using rule 14 (factor -> STRING .)
    TIMES           reduce using rule 14 (factor -> STRING .)
    GREATER         reduce using rule 14 (factor -> STRING .)
    LESS            reduce using rule 14 (factor -> STRING .)
    GREATER_EQUAL   reduce using rule 14 (factor -> STRING .)
    LESS_EQUAL      reduce using rule 14 (factor -> STRING .)
    EQUALS          reduce using rule 14 (factor -> STRING .)
    NOT_EQUALS      reduce using rule 14 (factor -> STRING .)
    PLUS            reduce using rule 14 (factor -> STRING .)
    MINUS           reduce using rule 14 (factor -> STRING .)
    GLOBAL_VAR      reduce using rule 14 (factor -> STRING .)
    IF              reduce using rule 14 (factor -> STRING .)
    DEF             reduce using rule 14 (factor -> STRING .)
    IDENTIFIER      reduce using rule 14 (factor -> STRING .)
    INSTANCE_VAR    reduce using rule 14 (factor -> STRING .)
    WHILE           reduce using rule 14 (factor -> STRING .)
    FOR             reduce using rule 14 (factor -> STRING .)
    PUTS            reduce using rule 14 (factor -> STRING .)
    LBRACE          reduce using rule 14 (factor -> STRING .)
    SETNEW          reduce using rule 14 (factor -> STRING .)
    LBRACKET        reduce using rule 14 (factor -> STRING .)
    STRING          reduce using rule 14 (factor -> STRING .)
    INTEGER         reduce using rule 14 (factor -> STRING .)
    FLOAT           reduce using rule 14 (factor -> STRING .)
    LPAREN          reduce using rule 14 (factor -> STRING .)
    END             reduce using rule 14 (factor -> STRING .)
    $end            reduce using rule 14 (factor -> STRING .)
    RPAREN          reduce using rule 14 (factor -> STRING .)
    ELSE            reduce using rule 14 (factor -> STRING .)
    ELSIF           reduce using rule 14 (factor -> STRING .)
    HASH_ROCKET     reduce using rule 14 (factor -> STRING .)
    RBRACKET        reduce using rule 14 (factor -> STRING .)
    COMMA           reduce using rule 14 (factor -> STRING .)
    RBRACE          reduce using rule 14 (factor -> STRING .)


state 8

    (24) statement -> IF . expression statement END
    (25) statement -> IF . expression statement ELSE statement END
    (26) statement -> IF . expression statement ELSIF expression statement END
    (27) statement -> IF . expression statement ELSIF expression statement ELSE statement END
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 36
    GLOBAL_VAR      shift and go to state 37
    INSTANCE_VAR    shift and go to state 38
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 35
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 9

    (34) statement -> DEF . IDENTIFIER statement END
    (53) statement -> DEF . IDENTIFIER LPAREN params RPAREN statement END

    IDENTIFIER      shift and go to state 39


state 10

    (35) statement -> IDENTIFIER .
    (40) statement -> IDENTIFIER . EQUALS GETS
    (54) statement -> IDENTIFIER . LPAREN params RPAREN
    (9) local_var -> IDENTIFIER . EQUALS INTEGER
    (10) local_var -> IDENTIFIER . EQUALS FLOAT
    (20) expression -> IDENTIFIER .

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! reduce/reduce conflict for GLOBAL_VAR resolved using rule 20 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for IF resolved using rule 20 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for DEF resolved using rule 20 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 20 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for INSTANCE_VAR resolved using rule 20 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for WHILE resolved using rule 20 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for FOR resolved using rule 20 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for PUTS resolved using rule 20 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LBRACE resolved using rule 20 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for SETNEW resolved using rule 20 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 20 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for STRING resolved using rule 20 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for INTEGER resolved using rule 20 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 20 (expression -> IDENTIFIER .)
  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for END resolved using rule 20 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 20 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for ELSE resolved using rule 20 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for ELSIF resolved using rule 20 (expression -> IDENTIFIER .)
    EQUALS          shift and go to state 40
    LPAREN          shift and go to state 41
    GREATER         reduce using rule 20 (expression -> IDENTIFIER .)
    LESS            reduce using rule 20 (expression -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 20 (expression -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 20 (expression -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 20 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 20 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 20 (expression -> IDENTIFIER .)
    GLOBAL_VAR      reduce using rule 20 (expression -> IDENTIFIER .)
    IF              reduce using rule 20 (expression -> IDENTIFIER .)
    DEF             reduce using rule 20 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 20 (expression -> IDENTIFIER .)
    INSTANCE_VAR    reduce using rule 20 (expression -> IDENTIFIER .)
    WHILE           reduce using rule 20 (expression -> IDENTIFIER .)
    FOR             reduce using rule 20 (expression -> IDENTIFIER .)
    PUTS            reduce using rule 20 (expression -> IDENTIFIER .)
    LBRACE          reduce using rule 20 (expression -> IDENTIFIER .)
    SETNEW          reduce using rule 20 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 20 (expression -> IDENTIFIER .)
    STRING          reduce using rule 20 (expression -> IDENTIFIER .)
    INTEGER         reduce using rule 20 (expression -> IDENTIFIER .)
    FLOAT           reduce using rule 20 (expression -> IDENTIFIER .)
    END             reduce using rule 20 (expression -> IDENTIFIER .)
    $end            reduce using rule 20 (expression -> IDENTIFIER .)
    ELSE            reduce using rule 20 (expression -> IDENTIFIER .)
    ELSIF           reduce using rule 20 (expression -> IDENTIFIER .)

  ! GLOBAL_VAR      [ reduce using rule 35 (statement -> IDENTIFIER .) ]
  ! IF              [ reduce using rule 35 (statement -> IDENTIFIER .) ]
  ! DEF             [ reduce using rule 35 (statement -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 35 (statement -> IDENTIFIER .) ]
  ! INSTANCE_VAR    [ reduce using rule 35 (statement -> IDENTIFIER .) ]
  ! WHILE           [ reduce using rule 35 (statement -> IDENTIFIER .) ]
  ! FOR             [ reduce using rule 35 (statement -> IDENTIFIER .) ]
  ! PUTS            [ reduce using rule 35 (statement -> IDENTIFIER .) ]
  ! LBRACE          [ reduce using rule 35 (statement -> IDENTIFIER .) ]
  ! SETNEW          [ reduce using rule 35 (statement -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 35 (statement -> IDENTIFIER .) ]
  ! STRING          [ reduce using rule 35 (statement -> IDENTIFIER .) ]
  ! INTEGER         [ reduce using rule 35 (statement -> IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 35 (statement -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 35 (statement -> IDENTIFIER .) ]
  ! END             [ reduce using rule 35 (statement -> IDENTIFIER .) ]
  ! $end            [ reduce using rule 35 (statement -> IDENTIFIER .) ]
  ! ELSE            [ reduce using rule 35 (statement -> IDENTIFIER .) ]
  ! ELSIF           [ reduce using rule 35 (statement -> IDENTIFIER .) ]
  ! EQUALS          [ reduce using rule 20 (expression -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 20 (expression -> IDENTIFIER .) ]


state 11

    (36) statement -> INSTANCE_VAR . EQUALS INTEGER
    (37) statement -> INSTANCE_VAR . EQUALS FLOAT
    (22) expression -> INSTANCE_VAR .

  ! shift/reduce conflict for EQUALS resolved as shift
    EQUALS          shift and go to state 42
    GREATER         reduce using rule 22 (expression -> INSTANCE_VAR .)
    LESS            reduce using rule 22 (expression -> INSTANCE_VAR .)
    GREATER_EQUAL   reduce using rule 22 (expression -> INSTANCE_VAR .)
    LESS_EQUAL      reduce using rule 22 (expression -> INSTANCE_VAR .)
    NOT_EQUALS      reduce using rule 22 (expression -> INSTANCE_VAR .)
    PLUS            reduce using rule 22 (expression -> INSTANCE_VAR .)
    MINUS           reduce using rule 22 (expression -> INSTANCE_VAR .)
    GLOBAL_VAR      reduce using rule 22 (expression -> INSTANCE_VAR .)
    IF              reduce using rule 22 (expression -> INSTANCE_VAR .)
    DEF             reduce using rule 22 (expression -> INSTANCE_VAR .)
    IDENTIFIER      reduce using rule 22 (expression -> INSTANCE_VAR .)
    INSTANCE_VAR    reduce using rule 22 (expression -> INSTANCE_VAR .)
    WHILE           reduce using rule 22 (expression -> INSTANCE_VAR .)
    FOR             reduce using rule 22 (expression -> INSTANCE_VAR .)
    PUTS            reduce using rule 22 (expression -> INSTANCE_VAR .)
    LBRACE          reduce using rule 22 (expression -> INSTANCE_VAR .)
    SETNEW          reduce using rule 22 (expression -> INSTANCE_VAR .)
    LBRACKET        reduce using rule 22 (expression -> INSTANCE_VAR .)
    STRING          reduce using rule 22 (expression -> INSTANCE_VAR .)
    INTEGER         reduce using rule 22 (expression -> INSTANCE_VAR .)
    FLOAT           reduce using rule 22 (expression -> INSTANCE_VAR .)
    LPAREN          reduce using rule 22 (expression -> INSTANCE_VAR .)
    END             reduce using rule 22 (expression -> INSTANCE_VAR .)
    $end            reduce using rule 22 (expression -> INSTANCE_VAR .)
    ELSE            reduce using rule 22 (expression -> INSTANCE_VAR .)
    ELSIF           reduce using rule 22 (expression -> INSTANCE_VAR .)

  ! EQUALS          [ reduce using rule 22 (expression -> INSTANCE_VAR .) ]


state 12

    (47) factor -> INTEGER .

    POWER           reduce using rule 47 (factor -> INTEGER .)
    DIVIDE          reduce using rule 47 (factor -> INTEGER .)
    TIMES           reduce using rule 47 (factor -> INTEGER .)
    GREATER         reduce using rule 47 (factor -> INTEGER .)
    LESS            reduce using rule 47 (factor -> INTEGER .)
    GREATER_EQUAL   reduce using rule 47 (factor -> INTEGER .)
    LESS_EQUAL      reduce using rule 47 (factor -> INTEGER .)
    EQUALS          reduce using rule 47 (factor -> INTEGER .)
    NOT_EQUALS      reduce using rule 47 (factor -> INTEGER .)
    PLUS            reduce using rule 47 (factor -> INTEGER .)
    MINUS           reduce using rule 47 (factor -> INTEGER .)
    GLOBAL_VAR      reduce using rule 47 (factor -> INTEGER .)
    IF              reduce using rule 47 (factor -> INTEGER .)
    DEF             reduce using rule 47 (factor -> INTEGER .)
    IDENTIFIER      reduce using rule 47 (factor -> INTEGER .)
    INSTANCE_VAR    reduce using rule 47 (factor -> INTEGER .)
    WHILE           reduce using rule 47 (factor -> INTEGER .)
    FOR             reduce using rule 47 (factor -> INTEGER .)
    PUTS            reduce using rule 47 (factor -> INTEGER .)
    LBRACE          reduce using rule 47 (factor -> INTEGER .)
    SETNEW          reduce using rule 47 (factor -> INTEGER .)
    LBRACKET        reduce using rule 47 (factor -> INTEGER .)
    STRING          reduce using rule 47 (factor -> INTEGER .)
    INTEGER         reduce using rule 47 (factor -> INTEGER .)
    FLOAT           reduce using rule 47 (factor -> INTEGER .)
    LPAREN          reduce using rule 47 (factor -> INTEGER .)
    END             reduce using rule 47 (factor -> INTEGER .)
    $end            reduce using rule 47 (factor -> INTEGER .)
    RPAREN          reduce using rule 47 (factor -> INTEGER .)
    ELSE            reduce using rule 47 (factor -> INTEGER .)
    ELSIF           reduce using rule 47 (factor -> INTEGER .)
    HASH_ROCKET     reduce using rule 47 (factor -> INTEGER .)
    RBRACKET        reduce using rule 47 (factor -> INTEGER .)
    COMMA           reduce using rule 47 (factor -> INTEGER .)
    RBRACE          reduce using rule 47 (factor -> INTEGER .)


state 13

    (48) factor -> FLOAT .

    POWER           reduce using rule 48 (factor -> FLOAT .)
    DIVIDE          reduce using rule 48 (factor -> FLOAT .)
    TIMES           reduce using rule 48 (factor -> FLOAT .)
    GREATER         reduce using rule 48 (factor -> FLOAT .)
    LESS            reduce using rule 48 (factor -> FLOAT .)
    GREATER_EQUAL   reduce using rule 48 (factor -> FLOAT .)
    LESS_EQUAL      reduce using rule 48 (factor -> FLOAT .)
    EQUALS          reduce using rule 48 (factor -> FLOAT .)
    NOT_EQUALS      reduce using rule 48 (factor -> FLOAT .)
    PLUS            reduce using rule 48 (factor -> FLOAT .)
    MINUS           reduce using rule 48 (factor -> FLOAT .)
    GLOBAL_VAR      reduce using rule 48 (factor -> FLOAT .)
    IF              reduce using rule 48 (factor -> FLOAT .)
    DEF             reduce using rule 48 (factor -> FLOAT .)
    IDENTIFIER      reduce using rule 48 (factor -> FLOAT .)
    INSTANCE_VAR    reduce using rule 48 (factor -> FLOAT .)
    WHILE           reduce using rule 48 (factor -> FLOAT .)
    FOR             reduce using rule 48 (factor -> FLOAT .)
    PUTS            reduce using rule 48 (factor -> FLOAT .)
    LBRACE          reduce using rule 48 (factor -> FLOAT .)
    SETNEW          reduce using rule 48 (factor -> FLOAT .)
    LBRACKET        reduce using rule 48 (factor -> FLOAT .)
    STRING          reduce using rule 48 (factor -> FLOAT .)
    INTEGER         reduce using rule 48 (factor -> FLOAT .)
    FLOAT           reduce using rule 48 (factor -> FLOAT .)
    LPAREN          reduce using rule 48 (factor -> FLOAT .)
    END             reduce using rule 48 (factor -> FLOAT .)
    $end            reduce using rule 48 (factor -> FLOAT .)
    RPAREN          reduce using rule 48 (factor -> FLOAT .)
    ELSE            reduce using rule 48 (factor -> FLOAT .)
    ELSIF           reduce using rule 48 (factor -> FLOAT .)
    HASH_ROCKET     reduce using rule 48 (factor -> FLOAT .)
    RBRACKET        reduce using rule 48 (factor -> FLOAT .)
    COMMA           reduce using rule 48 (factor -> FLOAT .)
    RBRACE          reduce using rule 48 (factor -> FLOAT .)


state 14

    (39) statement -> WHILE . expression statement END
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 36
    GLOBAL_VAR      shift and go to state 37
    INSTANCE_VAR    shift and go to state 38
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 43
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 15

    (49) factor -> LPAREN . expression RPAREN
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 36
    GLOBAL_VAR      shift and go to state 37
    INSTANCE_VAR    shift and go to state 38
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 44
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 16

    (55) statement -> FOR . IDENTIFIER IN range statement

    IDENTIFIER      shift and go to state 45


state 17

    (58) statement -> PUTS . expression
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 36
    GLOBAL_VAR      shift and go to state 37
    INSTANCE_VAR    shift and go to state 38
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 46
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 18

    (15) expression -> LBRACE . key_value_pairs RBRACE
    (16) expression -> LBRACE . RBRACE
    (17) key_value_pairs -> . key_value
    (18) key_value_pairs -> . key_value_pairs COMMA key_value
    (19) key_value -> . expression HASH_ROCKET expression
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 48
    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 36
    GLOBAL_VAR      shift and go to state 37
    INSTANCE_VAR    shift and go to state 38
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    key_value_pairs                shift and go to state 47
    key_value                      shift and go to state 49
    expression                     shift and go to state 50
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 19

    (38) expression -> SETNEW . LPAREN elements RPAREN

    LPAREN          shift and go to state 51


state 20

    (41) expression -> term .
    (42) term -> term . DIVIDE factor
    (43) term -> term . TIMES factor

    GREATER         reduce using rule 41 (expression -> term .)
    LESS            reduce using rule 41 (expression -> term .)
    GREATER_EQUAL   reduce using rule 41 (expression -> term .)
    LESS_EQUAL      reduce using rule 41 (expression -> term .)
    EQUALS          reduce using rule 41 (expression -> term .)
    NOT_EQUALS      reduce using rule 41 (expression -> term .)
    PLUS            reduce using rule 41 (expression -> term .)
    MINUS           reduce using rule 41 (expression -> term .)
    GLOBAL_VAR      reduce using rule 41 (expression -> term .)
    IF              reduce using rule 41 (expression -> term .)
    DEF             reduce using rule 41 (expression -> term .)
    IDENTIFIER      reduce using rule 41 (expression -> term .)
    INSTANCE_VAR    reduce using rule 41 (expression -> term .)
    WHILE           reduce using rule 41 (expression -> term .)
    FOR             reduce using rule 41 (expression -> term .)
    PUTS            reduce using rule 41 (expression -> term .)
    LBRACE          reduce using rule 41 (expression -> term .)
    SETNEW          reduce using rule 41 (expression -> term .)
    LBRACKET        reduce using rule 41 (expression -> term .)
    STRING          reduce using rule 41 (expression -> term .)
    INTEGER         reduce using rule 41 (expression -> term .)
    FLOAT           reduce using rule 41 (expression -> term .)
    LPAREN          reduce using rule 41 (expression -> term .)
    END             reduce using rule 41 (expression -> term .)
    $end            reduce using rule 41 (expression -> term .)
    RPAREN          reduce using rule 41 (expression -> term .)
    ELSE            reduce using rule 41 (expression -> term .)
    ELSIF           reduce using rule 41 (expression -> term .)
    HASH_ROCKET     reduce using rule 41 (expression -> term .)
    RBRACKET        reduce using rule 41 (expression -> term .)
    COMMA           reduce using rule 41 (expression -> term .)
    RBRACE          reduce using rule 41 (expression -> term .)
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53


state 21

    (50) expression -> LBRACKET . elements RBRACKET
    (51) elements -> . expression
    (52) elements -> . elements COMMA expression
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 36
    GLOBAL_VAR      shift and go to state 37
    INSTANCE_VAR    shift and go to state 38
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    elements                       shift and go to state 54
    expression                     shift and go to state 55
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 22

    (46) term -> factor .
    (13) factor -> factor . POWER factor

    DIVIDE          reduce using rule 46 (term -> factor .)
    TIMES           reduce using rule 46 (term -> factor .)
    GREATER         reduce using rule 46 (term -> factor .)
    LESS            reduce using rule 46 (term -> factor .)
    GREATER_EQUAL   reduce using rule 46 (term -> factor .)
    LESS_EQUAL      reduce using rule 46 (term -> factor .)
    EQUALS          reduce using rule 46 (term -> factor .)
    NOT_EQUALS      reduce using rule 46 (term -> factor .)
    PLUS            reduce using rule 46 (term -> factor .)
    MINUS           reduce using rule 46 (term -> factor .)
    GLOBAL_VAR      reduce using rule 46 (term -> factor .)
    IF              reduce using rule 46 (term -> factor .)
    DEF             reduce using rule 46 (term -> factor .)
    IDENTIFIER      reduce using rule 46 (term -> factor .)
    INSTANCE_VAR    reduce using rule 46 (term -> factor .)
    WHILE           reduce using rule 46 (term -> factor .)
    FOR             reduce using rule 46 (term -> factor .)
    PUTS            reduce using rule 46 (term -> factor .)
    LBRACE          reduce using rule 46 (term -> factor .)
    SETNEW          reduce using rule 46 (term -> factor .)
    LBRACKET        reduce using rule 46 (term -> factor .)
    STRING          reduce using rule 46 (term -> factor .)
    INTEGER         reduce using rule 46 (term -> factor .)
    FLOAT           reduce using rule 46 (term -> factor .)
    LPAREN          reduce using rule 46 (term -> factor .)
    END             reduce using rule 46 (term -> factor .)
    $end            reduce using rule 46 (term -> factor .)
    RPAREN          reduce using rule 46 (term -> factor .)
    ELSE            reduce using rule 46 (term -> factor .)
    ELSIF           reduce using rule 46 (term -> factor .)
    HASH_ROCKET     reduce using rule 46 (term -> factor .)
    RBRACKET        reduce using rule 46 (term -> factor .)
    COMMA           reduce using rule 46 (term -> factor .)
    RBRACE          reduce using rule 46 (term -> factor .)
    POWER           shift and go to state 56


state 23

    (1) program -> statements END .

    $end            reduce using rule 1 (program -> statements END .)


state 24

    (6) statements -> statements statement .
    (23) statement -> statement . statement
    (7) statement -> . local_var
    (8) statement -> . expression
    (11) statement -> . GLOBAL_VAR ASSIGN STRING
    (12) statement -> . GLOBAL_VAR ASSIGN expression
    (23) statement -> . statement statement
    (24) statement -> . IF expression statement END
    (25) statement -> . IF expression statement ELSE statement END
    (26) statement -> . IF expression statement ELSIF expression statement END
    (27) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (34) statement -> . DEF IDENTIFIER statement END
    (35) statement -> . IDENTIFIER
    (36) statement -> . INSTANCE_VAR EQUALS INTEGER
    (37) statement -> . INSTANCE_VAR EQUALS FLOAT
    (39) statement -> . WHILE expression statement END
    (40) statement -> . IDENTIFIER EQUALS GETS
    (53) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (54) statement -> . IDENTIFIER LPAREN params RPAREN
    (55) statement -> . FOR IDENTIFIER IN range statement
    (58) statement -> . PUTS expression
    (9) local_var -> . IDENTIFIER EQUALS INTEGER
    (10) local_var -> . IDENTIFIER EQUALS FLOAT
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for SETNEW resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    END             reduce using rule 6 (statements -> statements statement .)
    $end            reduce using rule 6 (statements -> statements statement .)
    GLOBAL_VAR      shift and go to state 6
    IF              shift and go to state 8
    DEF             shift and go to state 9
    IDENTIFIER      shift and go to state 10
    INSTANCE_VAR    shift and go to state 11
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

  ! GLOBAL_VAR      [ reduce using rule 6 (statements -> statements statement .) ]
  ! IF              [ reduce using rule 6 (statements -> statements statement .) ]
  ! DEF             [ reduce using rule 6 (statements -> statements statement .) ]
  ! IDENTIFIER      [ reduce using rule 6 (statements -> statements statement .) ]
  ! INSTANCE_VAR    [ reduce using rule 6 (statements -> statements statement .) ]
  ! WHILE           [ reduce using rule 6 (statements -> statements statement .) ]
  ! FOR             [ reduce using rule 6 (statements -> statements statement .) ]
  ! PUTS            [ reduce using rule 6 (statements -> statements statement .) ]
  ! LBRACE          [ reduce using rule 6 (statements -> statements statement .) ]
  ! SETNEW          [ reduce using rule 6 (statements -> statements statement .) ]
  ! LBRACKET        [ reduce using rule 6 (statements -> statements statement .) ]
  ! STRING          [ reduce using rule 6 (statements -> statements statement .) ]
  ! INTEGER         [ reduce using rule 6 (statements -> statements statement .) ]
  ! FLOAT           [ reduce using rule 6 (statements -> statements statement .) ]
  ! LPAREN          [ reduce using rule 6 (statements -> statements statement .) ]

    statement                      shift and go to state 25
    local_var                      shift and go to state 4
    expression                     shift and go to state 5
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 25

    (23) statement -> statement statement .
    (23) statement -> statement . statement
    (7) statement -> . local_var
    (8) statement -> . expression
    (11) statement -> . GLOBAL_VAR ASSIGN STRING
    (12) statement -> . GLOBAL_VAR ASSIGN expression
    (23) statement -> . statement statement
    (24) statement -> . IF expression statement END
    (25) statement -> . IF expression statement ELSE statement END
    (26) statement -> . IF expression statement ELSIF expression statement END
    (27) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (34) statement -> . DEF IDENTIFIER statement END
    (35) statement -> . IDENTIFIER
    (36) statement -> . INSTANCE_VAR EQUALS INTEGER
    (37) statement -> . INSTANCE_VAR EQUALS FLOAT
    (39) statement -> . WHILE expression statement END
    (40) statement -> . IDENTIFIER EQUALS GETS
    (53) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (54) statement -> . IDENTIFIER LPAREN params RPAREN
    (55) statement -> . FOR IDENTIFIER IN range statement
    (58) statement -> . PUTS expression
    (9) local_var -> . IDENTIFIER EQUALS INTEGER
    (10) local_var -> . IDENTIFIER EQUALS FLOAT
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for SETNEW resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    END             reduce using rule 23 (statement -> statement statement .)
    $end            reduce using rule 23 (statement -> statement statement .)
    ELSE            reduce using rule 23 (statement -> statement statement .)
    ELSIF           reduce using rule 23 (statement -> statement statement .)
    GLOBAL_VAR      shift and go to state 6
    IF              shift and go to state 8
    DEF             shift and go to state 9
    IDENTIFIER      shift and go to state 10
    INSTANCE_VAR    shift and go to state 11
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

  ! GLOBAL_VAR      [ reduce using rule 23 (statement -> statement statement .) ]
  ! IF              [ reduce using rule 23 (statement -> statement statement .) ]
  ! DEF             [ reduce using rule 23 (statement -> statement statement .) ]
  ! IDENTIFIER      [ reduce using rule 23 (statement -> statement statement .) ]
  ! INSTANCE_VAR    [ reduce using rule 23 (statement -> statement statement .) ]
  ! WHILE           [ reduce using rule 23 (statement -> statement statement .) ]
  ! FOR             [ reduce using rule 23 (statement -> statement statement .) ]
  ! PUTS            [ reduce using rule 23 (statement -> statement statement .) ]
  ! LBRACE          [ reduce using rule 23 (statement -> statement statement .) ]
  ! SETNEW          [ reduce using rule 23 (statement -> statement statement .) ]
  ! LBRACKET        [ reduce using rule 23 (statement -> statement statement .) ]
  ! STRING          [ reduce using rule 23 (statement -> statement statement .) ]
  ! INTEGER         [ reduce using rule 23 (statement -> statement statement .) ]
  ! FLOAT           [ reduce using rule 23 (statement -> statement statement .) ]
  ! LPAREN          [ reduce using rule 23 (statement -> statement statement .) ]

    statement                      shift and go to state 25
    local_var                      shift and go to state 4
    expression                     shift and go to state 5
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 26

    (28) expression -> expression GREATER . expression
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 36
    GLOBAL_VAR      shift and go to state 37
    INSTANCE_VAR    shift and go to state 38
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 57
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 27

    (29) expression -> expression LESS . expression
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 36
    GLOBAL_VAR      shift and go to state 37
    INSTANCE_VAR    shift and go to state 38
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 58
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 28

    (30) expression -> expression GREATER_EQUAL . expression
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 36
    GLOBAL_VAR      shift and go to state 37
    INSTANCE_VAR    shift and go to state 38
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 59
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 29

    (31) expression -> expression LESS_EQUAL . expression
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 36
    GLOBAL_VAR      shift and go to state 37
    INSTANCE_VAR    shift and go to state 38
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 60
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 30

    (32) expression -> expression EQUALS . expression
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 36
    GLOBAL_VAR      shift and go to state 37
    INSTANCE_VAR    shift and go to state 38
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 61
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 31

    (33) expression -> expression NOT_EQUALS . expression
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 36
    GLOBAL_VAR      shift and go to state 37
    INSTANCE_VAR    shift and go to state 38
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 62
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 32

    (44) expression -> expression PLUS . term
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    term                           shift and go to state 63
    factor                         shift and go to state 22

state 33

    (45) expression -> expression MINUS . term
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    term                           shift and go to state 64
    factor                         shift and go to state 22

state 34

    (11) statement -> GLOBAL_VAR ASSIGN . STRING
    (12) statement -> GLOBAL_VAR ASSIGN . expression
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 65
    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 36
    GLOBAL_VAR      shift and go to state 37
    INSTANCE_VAR    shift and go to state 38
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 66
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 35

    (24) statement -> IF expression . statement END
    (25) statement -> IF expression . statement ELSE statement END
    (26) statement -> IF expression . statement ELSIF expression statement END
    (27) statement -> IF expression . statement ELSIF expression statement ELSE statement END
    (28) expression -> expression . GREATER expression
    (29) expression -> expression . LESS expression
    (30) expression -> expression . GREATER_EQUAL expression
    (31) expression -> expression . LESS_EQUAL expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term
    (7) statement -> . local_var
    (8) statement -> . expression
    (11) statement -> . GLOBAL_VAR ASSIGN STRING
    (12) statement -> . GLOBAL_VAR ASSIGN expression
    (23) statement -> . statement statement
    (24) statement -> . IF expression statement END
    (25) statement -> . IF expression statement ELSE statement END
    (26) statement -> . IF expression statement ELSIF expression statement END
    (27) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (34) statement -> . DEF IDENTIFIER statement END
    (35) statement -> . IDENTIFIER
    (36) statement -> . INSTANCE_VAR EQUALS INTEGER
    (37) statement -> . INSTANCE_VAR EQUALS FLOAT
    (39) statement -> . WHILE expression statement END
    (40) statement -> . IDENTIFIER EQUALS GETS
    (53) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (54) statement -> . IDENTIFIER LPAREN params RPAREN
    (55) statement -> . FOR IDENTIFIER IN range statement
    (58) statement -> . PUTS expression
    (9) local_var -> . IDENTIFIER EQUALS INTEGER
    (10) local_var -> . IDENTIFIER EQUALS FLOAT
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    GREATER         shift and go to state 26
    LESS            shift and go to state 27
    GREATER_EQUAL   shift and go to state 28
    LESS_EQUAL      shift and go to state 29
    EQUALS          shift and go to state 30
    NOT_EQUALS      shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    GLOBAL_VAR      shift and go to state 6
    IF              shift and go to state 8
    DEF             shift and go to state 9
    IDENTIFIER      shift and go to state 10
    INSTANCE_VAR    shift and go to state 11
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 5
    statement                      shift and go to state 67
    term                           shift and go to state 20
    local_var                      shift and go to state 4
    factor                         shift and go to state 22

state 36

    (20) expression -> IDENTIFIER .

    GREATER         reduce using rule 20 (expression -> IDENTIFIER .)
    LESS            reduce using rule 20 (expression -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 20 (expression -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 20 (expression -> IDENTIFIER .)
    EQUALS          reduce using rule 20 (expression -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 20 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 20 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 20 (expression -> IDENTIFIER .)
    GLOBAL_VAR      reduce using rule 20 (expression -> IDENTIFIER .)
    IF              reduce using rule 20 (expression -> IDENTIFIER .)
    DEF             reduce using rule 20 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 20 (expression -> IDENTIFIER .)
    INSTANCE_VAR    reduce using rule 20 (expression -> IDENTIFIER .)
    WHILE           reduce using rule 20 (expression -> IDENTIFIER .)
    FOR             reduce using rule 20 (expression -> IDENTIFIER .)
    PUTS            reduce using rule 20 (expression -> IDENTIFIER .)
    LBRACE          reduce using rule 20 (expression -> IDENTIFIER .)
    SETNEW          reduce using rule 20 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 20 (expression -> IDENTIFIER .)
    STRING          reduce using rule 20 (expression -> IDENTIFIER .)
    INTEGER         reduce using rule 20 (expression -> IDENTIFIER .)
    FLOAT           reduce using rule 20 (expression -> IDENTIFIER .)
    LPAREN          reduce using rule 20 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 20 (expression -> IDENTIFIER .)
    END             reduce using rule 20 (expression -> IDENTIFIER .)
    $end            reduce using rule 20 (expression -> IDENTIFIER .)
    ELSE            reduce using rule 20 (expression -> IDENTIFIER .)
    ELSIF           reduce using rule 20 (expression -> IDENTIFIER .)
    HASH_ROCKET     reduce using rule 20 (expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 20 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 20 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 20 (expression -> IDENTIFIER .)


state 37

    (21) expression -> GLOBAL_VAR .

    GREATER         reduce using rule 21 (expression -> GLOBAL_VAR .)
    LESS            reduce using rule 21 (expression -> GLOBAL_VAR .)
    GREATER_EQUAL   reduce using rule 21 (expression -> GLOBAL_VAR .)
    LESS_EQUAL      reduce using rule 21 (expression -> GLOBAL_VAR .)
    EQUALS          reduce using rule 21 (expression -> GLOBAL_VAR .)
    NOT_EQUALS      reduce using rule 21 (expression -> GLOBAL_VAR .)
    PLUS            reduce using rule 21 (expression -> GLOBAL_VAR .)
    MINUS           reduce using rule 21 (expression -> GLOBAL_VAR .)
    GLOBAL_VAR      reduce using rule 21 (expression -> GLOBAL_VAR .)
    IF              reduce using rule 21 (expression -> GLOBAL_VAR .)
    DEF             reduce using rule 21 (expression -> GLOBAL_VAR .)
    IDENTIFIER      reduce using rule 21 (expression -> GLOBAL_VAR .)
    INSTANCE_VAR    reduce using rule 21 (expression -> GLOBAL_VAR .)
    WHILE           reduce using rule 21 (expression -> GLOBAL_VAR .)
    FOR             reduce using rule 21 (expression -> GLOBAL_VAR .)
    PUTS            reduce using rule 21 (expression -> GLOBAL_VAR .)
    LBRACE          reduce using rule 21 (expression -> GLOBAL_VAR .)
    SETNEW          reduce using rule 21 (expression -> GLOBAL_VAR .)
    LBRACKET        reduce using rule 21 (expression -> GLOBAL_VAR .)
    STRING          reduce using rule 21 (expression -> GLOBAL_VAR .)
    INTEGER         reduce using rule 21 (expression -> GLOBAL_VAR .)
    FLOAT           reduce using rule 21 (expression -> GLOBAL_VAR .)
    LPAREN          reduce using rule 21 (expression -> GLOBAL_VAR .)
    RPAREN          reduce using rule 21 (expression -> GLOBAL_VAR .)
    END             reduce using rule 21 (expression -> GLOBAL_VAR .)
    $end            reduce using rule 21 (expression -> GLOBAL_VAR .)
    ELSE            reduce using rule 21 (expression -> GLOBAL_VAR .)
    ELSIF           reduce using rule 21 (expression -> GLOBAL_VAR .)
    HASH_ROCKET     reduce using rule 21 (expression -> GLOBAL_VAR .)
    RBRACKET        reduce using rule 21 (expression -> GLOBAL_VAR .)
    COMMA           reduce using rule 21 (expression -> GLOBAL_VAR .)
    RBRACE          reduce using rule 21 (expression -> GLOBAL_VAR .)


state 38

    (22) expression -> INSTANCE_VAR .

    GREATER         reduce using rule 22 (expression -> INSTANCE_VAR .)
    LESS            reduce using rule 22 (expression -> INSTANCE_VAR .)
    GREATER_EQUAL   reduce using rule 22 (expression -> INSTANCE_VAR .)
    LESS_EQUAL      reduce using rule 22 (expression -> INSTANCE_VAR .)
    EQUALS          reduce using rule 22 (expression -> INSTANCE_VAR .)
    NOT_EQUALS      reduce using rule 22 (expression -> INSTANCE_VAR .)
    PLUS            reduce using rule 22 (expression -> INSTANCE_VAR .)
    MINUS           reduce using rule 22 (expression -> INSTANCE_VAR .)
    GLOBAL_VAR      reduce using rule 22 (expression -> INSTANCE_VAR .)
    IF              reduce using rule 22 (expression -> INSTANCE_VAR .)
    DEF             reduce using rule 22 (expression -> INSTANCE_VAR .)
    IDENTIFIER      reduce using rule 22 (expression -> INSTANCE_VAR .)
    INSTANCE_VAR    reduce using rule 22 (expression -> INSTANCE_VAR .)
    WHILE           reduce using rule 22 (expression -> INSTANCE_VAR .)
    FOR             reduce using rule 22 (expression -> INSTANCE_VAR .)
    PUTS            reduce using rule 22 (expression -> INSTANCE_VAR .)
    LBRACE          reduce using rule 22 (expression -> INSTANCE_VAR .)
    SETNEW          reduce using rule 22 (expression -> INSTANCE_VAR .)
    LBRACKET        reduce using rule 22 (expression -> INSTANCE_VAR .)
    STRING          reduce using rule 22 (expression -> INSTANCE_VAR .)
    INTEGER         reduce using rule 22 (expression -> INSTANCE_VAR .)
    FLOAT           reduce using rule 22 (expression -> INSTANCE_VAR .)
    LPAREN          reduce using rule 22 (expression -> INSTANCE_VAR .)
    RPAREN          reduce using rule 22 (expression -> INSTANCE_VAR .)
    END             reduce using rule 22 (expression -> INSTANCE_VAR .)
    $end            reduce using rule 22 (expression -> INSTANCE_VAR .)
    ELSE            reduce using rule 22 (expression -> INSTANCE_VAR .)
    ELSIF           reduce using rule 22 (expression -> INSTANCE_VAR .)
    HASH_ROCKET     reduce using rule 22 (expression -> INSTANCE_VAR .)
    RBRACKET        reduce using rule 22 (expression -> INSTANCE_VAR .)
    COMMA           reduce using rule 22 (expression -> INSTANCE_VAR .)
    RBRACE          reduce using rule 22 (expression -> INSTANCE_VAR .)


state 39

    (34) statement -> DEF IDENTIFIER . statement END
    (53) statement -> DEF IDENTIFIER . LPAREN params RPAREN statement END
    (7) statement -> . local_var
    (8) statement -> . expression
    (11) statement -> . GLOBAL_VAR ASSIGN STRING
    (12) statement -> . GLOBAL_VAR ASSIGN expression
    (23) statement -> . statement statement
    (24) statement -> . IF expression statement END
    (25) statement -> . IF expression statement ELSE statement END
    (26) statement -> . IF expression statement ELSIF expression statement END
    (27) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (34) statement -> . DEF IDENTIFIER statement END
    (35) statement -> . IDENTIFIER
    (36) statement -> . INSTANCE_VAR EQUALS INTEGER
    (37) statement -> . INSTANCE_VAR EQUALS FLOAT
    (39) statement -> . WHILE expression statement END
    (40) statement -> . IDENTIFIER EQUALS GETS
    (53) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (54) statement -> . IDENTIFIER LPAREN params RPAREN
    (55) statement -> . FOR IDENTIFIER IN range statement
    (58) statement -> . PUTS expression
    (9) local_var -> . IDENTIFIER EQUALS INTEGER
    (10) local_var -> . IDENTIFIER EQUALS FLOAT
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 69
    GLOBAL_VAR      shift and go to state 6
    IF              shift and go to state 8
    DEF             shift and go to state 9
    IDENTIFIER      shift and go to state 10
    INSTANCE_VAR    shift and go to state 11
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13

    statement                      shift and go to state 68
    local_var                      shift and go to state 4
    expression                     shift and go to state 5
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 40

    (40) statement -> IDENTIFIER EQUALS . GETS
    (9) local_var -> IDENTIFIER EQUALS . INTEGER
    (10) local_var -> IDENTIFIER EQUALS . FLOAT

    GETS            shift and go to state 70
    INTEGER         shift and go to state 71
    FLOAT           shift and go to state 72


state 41

    (54) statement -> IDENTIFIER LPAREN . params RPAREN
    (3) params -> . IDENTIFIER
    (4) params -> . params COMMA IDENTIFIER

    IDENTIFIER      shift and go to state 73

    params                         shift and go to state 74

state 42

    (36) statement -> INSTANCE_VAR EQUALS . INTEGER
    (37) statement -> INSTANCE_VAR EQUALS . FLOAT

    INTEGER         shift and go to state 75
    FLOAT           shift and go to state 76


state 43

    (39) statement -> WHILE expression . statement END
    (28) expression -> expression . GREATER expression
    (29) expression -> expression . LESS expression
    (30) expression -> expression . GREATER_EQUAL expression
    (31) expression -> expression . LESS_EQUAL expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term
    (7) statement -> . local_var
    (8) statement -> . expression
    (11) statement -> . GLOBAL_VAR ASSIGN STRING
    (12) statement -> . GLOBAL_VAR ASSIGN expression
    (23) statement -> . statement statement
    (24) statement -> . IF expression statement END
    (25) statement -> . IF expression statement ELSE statement END
    (26) statement -> . IF expression statement ELSIF expression statement END
    (27) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (34) statement -> . DEF IDENTIFIER statement END
    (35) statement -> . IDENTIFIER
    (36) statement -> . INSTANCE_VAR EQUALS INTEGER
    (37) statement -> . INSTANCE_VAR EQUALS FLOAT
    (39) statement -> . WHILE expression statement END
    (40) statement -> . IDENTIFIER EQUALS GETS
    (53) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (54) statement -> . IDENTIFIER LPAREN params RPAREN
    (55) statement -> . FOR IDENTIFIER IN range statement
    (58) statement -> . PUTS expression
    (9) local_var -> . IDENTIFIER EQUALS INTEGER
    (10) local_var -> . IDENTIFIER EQUALS FLOAT
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    GREATER         shift and go to state 26
    LESS            shift and go to state 27
    GREATER_EQUAL   shift and go to state 28
    LESS_EQUAL      shift and go to state 29
    EQUALS          shift and go to state 30
    NOT_EQUALS      shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    GLOBAL_VAR      shift and go to state 6
    IF              shift and go to state 8
    DEF             shift and go to state 9
    IDENTIFIER      shift and go to state 10
    INSTANCE_VAR    shift and go to state 11
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 5
    statement                      shift and go to state 77
    term                           shift and go to state 20
    local_var                      shift and go to state 4
    factor                         shift and go to state 22

state 44

    (49) factor -> LPAREN expression . RPAREN
    (28) expression -> expression . GREATER expression
    (29) expression -> expression . LESS expression
    (30) expression -> expression . GREATER_EQUAL expression
    (31) expression -> expression . LESS_EQUAL expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term

    RPAREN          shift and go to state 78
    GREATER         shift and go to state 26
    LESS            shift and go to state 27
    GREATER_EQUAL   shift and go to state 28
    LESS_EQUAL      shift and go to state 29
    EQUALS          shift and go to state 30
    NOT_EQUALS      shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 45

    (55) statement -> FOR IDENTIFIER . IN range statement

    IN              shift and go to state 79


state 46

    (58) statement -> PUTS expression .
    (28) expression -> expression . GREATER expression
    (29) expression -> expression . LESS expression
    (30) expression -> expression . GREATER_EQUAL expression
    (31) expression -> expression . LESS_EQUAL expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term

    GLOBAL_VAR      reduce using rule 58 (statement -> PUTS expression .)
    IF              reduce using rule 58 (statement -> PUTS expression .)
    DEF             reduce using rule 58 (statement -> PUTS expression .)
    IDENTIFIER      reduce using rule 58 (statement -> PUTS expression .)
    INSTANCE_VAR    reduce using rule 58 (statement -> PUTS expression .)
    WHILE           reduce using rule 58 (statement -> PUTS expression .)
    FOR             reduce using rule 58 (statement -> PUTS expression .)
    PUTS            reduce using rule 58 (statement -> PUTS expression .)
    LBRACE          reduce using rule 58 (statement -> PUTS expression .)
    SETNEW          reduce using rule 58 (statement -> PUTS expression .)
    LBRACKET        reduce using rule 58 (statement -> PUTS expression .)
    STRING          reduce using rule 58 (statement -> PUTS expression .)
    INTEGER         reduce using rule 58 (statement -> PUTS expression .)
    FLOAT           reduce using rule 58 (statement -> PUTS expression .)
    LPAREN          reduce using rule 58 (statement -> PUTS expression .)
    END             reduce using rule 58 (statement -> PUTS expression .)
    $end            reduce using rule 58 (statement -> PUTS expression .)
    ELSE            reduce using rule 58 (statement -> PUTS expression .)
    ELSIF           reduce using rule 58 (statement -> PUTS expression .)
    GREATER         shift and go to state 26
    LESS            shift and go to state 27
    GREATER_EQUAL   shift and go to state 28
    LESS_EQUAL      shift and go to state 29
    EQUALS          shift and go to state 30
    NOT_EQUALS      shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 47

    (15) expression -> LBRACE key_value_pairs . RBRACE
    (18) key_value_pairs -> key_value_pairs . COMMA key_value

    RBRACE          shift and go to state 80
    COMMA           shift and go to state 81


state 48

    (16) expression -> LBRACE RBRACE .

    GREATER         reduce using rule 16 (expression -> LBRACE RBRACE .)
    LESS            reduce using rule 16 (expression -> LBRACE RBRACE .)
    GREATER_EQUAL   reduce using rule 16 (expression -> LBRACE RBRACE .)
    LESS_EQUAL      reduce using rule 16 (expression -> LBRACE RBRACE .)
    EQUALS          reduce using rule 16 (expression -> LBRACE RBRACE .)
    NOT_EQUALS      reduce using rule 16 (expression -> LBRACE RBRACE .)
    PLUS            reduce using rule 16 (expression -> LBRACE RBRACE .)
    MINUS           reduce using rule 16 (expression -> LBRACE RBRACE .)
    GLOBAL_VAR      reduce using rule 16 (expression -> LBRACE RBRACE .)
    IF              reduce using rule 16 (expression -> LBRACE RBRACE .)
    DEF             reduce using rule 16 (expression -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 16 (expression -> LBRACE RBRACE .)
    INSTANCE_VAR    reduce using rule 16 (expression -> LBRACE RBRACE .)
    WHILE           reduce using rule 16 (expression -> LBRACE RBRACE .)
    FOR             reduce using rule 16 (expression -> LBRACE RBRACE .)
    PUTS            reduce using rule 16 (expression -> LBRACE RBRACE .)
    LBRACE          reduce using rule 16 (expression -> LBRACE RBRACE .)
    SETNEW          reduce using rule 16 (expression -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 16 (expression -> LBRACE RBRACE .)
    STRING          reduce using rule 16 (expression -> LBRACE RBRACE .)
    INTEGER         reduce using rule 16 (expression -> LBRACE RBRACE .)
    FLOAT           reduce using rule 16 (expression -> LBRACE RBRACE .)
    LPAREN          reduce using rule 16 (expression -> LBRACE RBRACE .)
    END             reduce using rule 16 (expression -> LBRACE RBRACE .)
    $end            reduce using rule 16 (expression -> LBRACE RBRACE .)
    RPAREN          reduce using rule 16 (expression -> LBRACE RBRACE .)
    ELSE            reduce using rule 16 (expression -> LBRACE RBRACE .)
    ELSIF           reduce using rule 16 (expression -> LBRACE RBRACE .)
    HASH_ROCKET     reduce using rule 16 (expression -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 16 (expression -> LBRACE RBRACE .)
    COMMA           reduce using rule 16 (expression -> LBRACE RBRACE .)
    RBRACE          reduce using rule 16 (expression -> LBRACE RBRACE .)


state 49

    (17) key_value_pairs -> key_value .

    RBRACE          reduce using rule 17 (key_value_pairs -> key_value .)
    COMMA           reduce using rule 17 (key_value_pairs -> key_value .)


state 50

    (19) key_value -> expression . HASH_ROCKET expression
    (28) expression -> expression . GREATER expression
    (29) expression -> expression . LESS expression
    (30) expression -> expression . GREATER_EQUAL expression
    (31) expression -> expression . LESS_EQUAL expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term

    HASH_ROCKET     shift and go to state 82
    GREATER         shift and go to state 26
    LESS            shift and go to state 27
    GREATER_EQUAL   shift and go to state 28
    LESS_EQUAL      shift and go to state 29
    EQUALS          shift and go to state 30
    NOT_EQUALS      shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 51

    (38) expression -> SETNEW LPAREN . elements RPAREN
    (51) elements -> . expression
    (52) elements -> . elements COMMA expression
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 36
    GLOBAL_VAR      shift and go to state 37
    INSTANCE_VAR    shift and go to state 38
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    elements                       shift and go to state 83
    expression                     shift and go to state 55
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 52

    (42) term -> term DIVIDE . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    factor                         shift and go to state 84

state 53

    (43) term -> term TIMES . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    factor                         shift and go to state 85

state 54

    (50) expression -> LBRACKET elements . RBRACKET
    (52) elements -> elements . COMMA expression

    RBRACKET        shift and go to state 86
    COMMA           shift and go to state 87


state 55

    (51) elements -> expression .
    (28) expression -> expression . GREATER expression
    (29) expression -> expression . LESS expression
    (30) expression -> expression . GREATER_EQUAL expression
    (31) expression -> expression . LESS_EQUAL expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term

    RBRACKET        reduce using rule 51 (elements -> expression .)
    COMMA           reduce using rule 51 (elements -> expression .)
    RPAREN          reduce using rule 51 (elements -> expression .)
    GREATER         shift and go to state 26
    LESS            shift and go to state 27
    GREATER_EQUAL   shift and go to state 28
    LESS_EQUAL      shift and go to state 29
    EQUALS          shift and go to state 30
    NOT_EQUALS      shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 56

    (13) factor -> factor POWER . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    factor                         shift and go to state 88

state 57

    (28) expression -> expression GREATER expression .
    (28) expression -> expression . GREATER expression
    (29) expression -> expression . LESS expression
    (30) expression -> expression . GREATER_EQUAL expression
    (31) expression -> expression . LESS_EQUAL expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term

    GREATER         reduce using rule 28 (expression -> expression GREATER expression .)
    LESS            reduce using rule 28 (expression -> expression GREATER expression .)
    GREATER_EQUAL   reduce using rule 28 (expression -> expression GREATER expression .)
    LESS_EQUAL      reduce using rule 28 (expression -> expression GREATER expression .)
    EQUALS          reduce using rule 28 (expression -> expression GREATER expression .)
    NOT_EQUALS      reduce using rule 28 (expression -> expression GREATER expression .)
    GLOBAL_VAR      reduce using rule 28 (expression -> expression GREATER expression .)
    IF              reduce using rule 28 (expression -> expression GREATER expression .)
    DEF             reduce using rule 28 (expression -> expression GREATER expression .)
    IDENTIFIER      reduce using rule 28 (expression -> expression GREATER expression .)
    INSTANCE_VAR    reduce using rule 28 (expression -> expression GREATER expression .)
    WHILE           reduce using rule 28 (expression -> expression GREATER expression .)
    FOR             reduce using rule 28 (expression -> expression GREATER expression .)
    PUTS            reduce using rule 28 (expression -> expression GREATER expression .)
    LBRACE          reduce using rule 28 (expression -> expression GREATER expression .)
    SETNEW          reduce using rule 28 (expression -> expression GREATER expression .)
    LBRACKET        reduce using rule 28 (expression -> expression GREATER expression .)
    STRING          reduce using rule 28 (expression -> expression GREATER expression .)
    INTEGER         reduce using rule 28 (expression -> expression GREATER expression .)
    FLOAT           reduce using rule 28 (expression -> expression GREATER expression .)
    LPAREN          reduce using rule 28 (expression -> expression GREATER expression .)
    END             reduce using rule 28 (expression -> expression GREATER expression .)
    $end            reduce using rule 28 (expression -> expression GREATER expression .)
    RPAREN          reduce using rule 28 (expression -> expression GREATER expression .)
    ELSE            reduce using rule 28 (expression -> expression GREATER expression .)
    ELSIF           reduce using rule 28 (expression -> expression GREATER expression .)
    HASH_ROCKET     reduce using rule 28 (expression -> expression GREATER expression .)
    RBRACKET        reduce using rule 28 (expression -> expression GREATER expression .)
    COMMA           reduce using rule 28 (expression -> expression GREATER expression .)
    RBRACE          reduce using rule 28 (expression -> expression GREATER expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33

  ! PLUS            [ reduce using rule 28 (expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 28 (expression -> expression GREATER expression .) ]
  ! GREATER         [ shift and go to state 26 ]
  ! LESS            [ shift and go to state 27 ]
  ! GREATER_EQUAL   [ shift and go to state 28 ]
  ! LESS_EQUAL      [ shift and go to state 29 ]
  ! EQUALS          [ shift and go to state 30 ]
  ! NOT_EQUALS      [ shift and go to state 31 ]


state 58

    (29) expression -> expression LESS expression .
    (28) expression -> expression . GREATER expression
    (29) expression -> expression . LESS expression
    (30) expression -> expression . GREATER_EQUAL expression
    (31) expression -> expression . LESS_EQUAL expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term

    GREATER         reduce using rule 29 (expression -> expression LESS expression .)
    LESS            reduce using rule 29 (expression -> expression LESS expression .)
    GREATER_EQUAL   reduce using rule 29 (expression -> expression LESS expression .)
    LESS_EQUAL      reduce using rule 29 (expression -> expression LESS expression .)
    EQUALS          reduce using rule 29 (expression -> expression LESS expression .)
    NOT_EQUALS      reduce using rule 29 (expression -> expression LESS expression .)
    GLOBAL_VAR      reduce using rule 29 (expression -> expression LESS expression .)
    IF              reduce using rule 29 (expression -> expression LESS expression .)
    DEF             reduce using rule 29 (expression -> expression LESS expression .)
    IDENTIFIER      reduce using rule 29 (expression -> expression LESS expression .)
    INSTANCE_VAR    reduce using rule 29 (expression -> expression LESS expression .)
    WHILE           reduce using rule 29 (expression -> expression LESS expression .)
    FOR             reduce using rule 29 (expression -> expression LESS expression .)
    PUTS            reduce using rule 29 (expression -> expression LESS expression .)
    LBRACE          reduce using rule 29 (expression -> expression LESS expression .)
    SETNEW          reduce using rule 29 (expression -> expression LESS expression .)
    LBRACKET        reduce using rule 29 (expression -> expression LESS expression .)
    STRING          reduce using rule 29 (expression -> expression LESS expression .)
    INTEGER         reduce using rule 29 (expression -> expression LESS expression .)
    FLOAT           reduce using rule 29 (expression -> expression LESS expression .)
    LPAREN          reduce using rule 29 (expression -> expression LESS expression .)
    END             reduce using rule 29 (expression -> expression LESS expression .)
    $end            reduce using rule 29 (expression -> expression LESS expression .)
    RPAREN          reduce using rule 29 (expression -> expression LESS expression .)
    ELSE            reduce using rule 29 (expression -> expression LESS expression .)
    ELSIF           reduce using rule 29 (expression -> expression LESS expression .)
    HASH_ROCKET     reduce using rule 29 (expression -> expression LESS expression .)
    RBRACKET        reduce using rule 29 (expression -> expression LESS expression .)
    COMMA           reduce using rule 29 (expression -> expression LESS expression .)
    RBRACE          reduce using rule 29 (expression -> expression LESS expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33

  ! PLUS            [ reduce using rule 29 (expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 29 (expression -> expression LESS expression .) ]
  ! GREATER         [ shift and go to state 26 ]
  ! LESS            [ shift and go to state 27 ]
  ! GREATER_EQUAL   [ shift and go to state 28 ]
  ! LESS_EQUAL      [ shift and go to state 29 ]
  ! EQUALS          [ shift and go to state 30 ]
  ! NOT_EQUALS      [ shift and go to state 31 ]


state 59

    (30) expression -> expression GREATER_EQUAL expression .
    (28) expression -> expression . GREATER expression
    (29) expression -> expression . LESS expression
    (30) expression -> expression . GREATER_EQUAL expression
    (31) expression -> expression . LESS_EQUAL expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term

    GREATER         reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    LESS            reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    LESS_EQUAL      reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    EQUALS          reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    NOT_EQUALS      reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    GLOBAL_VAR      reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    IF              reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    DEF             reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    IDENTIFIER      reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    INSTANCE_VAR    reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    WHILE           reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    FOR             reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    PUTS            reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    LBRACE          reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    SETNEW          reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    LBRACKET        reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    STRING          reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    INTEGER         reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    FLOAT           reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    LPAREN          reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    END             reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    $end            reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    RPAREN          reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    ELSE            reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    ELSIF           reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    HASH_ROCKET     reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    RBRACKET        reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    COMMA           reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    RBRACE          reduce using rule 30 (expression -> expression GREATER_EQUAL expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33

  ! PLUS            [ reduce using rule 30 (expression -> expression GREATER_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 30 (expression -> expression GREATER_EQUAL expression .) ]
  ! GREATER         [ shift and go to state 26 ]
  ! LESS            [ shift and go to state 27 ]
  ! GREATER_EQUAL   [ shift and go to state 28 ]
  ! LESS_EQUAL      [ shift and go to state 29 ]
  ! EQUALS          [ shift and go to state 30 ]
  ! NOT_EQUALS      [ shift and go to state 31 ]


state 60

    (31) expression -> expression LESS_EQUAL expression .
    (28) expression -> expression . GREATER expression
    (29) expression -> expression . LESS expression
    (30) expression -> expression . GREATER_EQUAL expression
    (31) expression -> expression . LESS_EQUAL expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term

    GREATER         reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    LESS            reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    LESS_EQUAL      reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    EQUALS          reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    NOT_EQUALS      reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    GLOBAL_VAR      reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    IF              reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    DEF             reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    IDENTIFIER      reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    INSTANCE_VAR    reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    WHILE           reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    FOR             reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    PUTS            reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    LBRACE          reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    SETNEW          reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    LBRACKET        reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    STRING          reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    INTEGER         reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    FLOAT           reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    LPAREN          reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    END             reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    $end            reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    RPAREN          reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    ELSE            reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    ELSIF           reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    HASH_ROCKET     reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    RBRACKET        reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    COMMA           reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    RBRACE          reduce using rule 31 (expression -> expression LESS_EQUAL expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33

  ! PLUS            [ reduce using rule 31 (expression -> expression LESS_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 31 (expression -> expression LESS_EQUAL expression .) ]
  ! GREATER         [ shift and go to state 26 ]
  ! LESS            [ shift and go to state 27 ]
  ! GREATER_EQUAL   [ shift and go to state 28 ]
  ! LESS_EQUAL      [ shift and go to state 29 ]
  ! EQUALS          [ shift and go to state 30 ]
  ! NOT_EQUALS      [ shift and go to state 31 ]


state 61

    (32) expression -> expression EQUALS expression .
    (28) expression -> expression . GREATER expression
    (29) expression -> expression . LESS expression
    (30) expression -> expression . GREATER_EQUAL expression
    (31) expression -> expression . LESS_EQUAL expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term

    GREATER         reduce using rule 32 (expression -> expression EQUALS expression .)
    LESS            reduce using rule 32 (expression -> expression EQUALS expression .)
    GREATER_EQUAL   reduce using rule 32 (expression -> expression EQUALS expression .)
    LESS_EQUAL      reduce using rule 32 (expression -> expression EQUALS expression .)
    EQUALS          reduce using rule 32 (expression -> expression EQUALS expression .)
    NOT_EQUALS      reduce using rule 32 (expression -> expression EQUALS expression .)
    GLOBAL_VAR      reduce using rule 32 (expression -> expression EQUALS expression .)
    IF              reduce using rule 32 (expression -> expression EQUALS expression .)
    DEF             reduce using rule 32 (expression -> expression EQUALS expression .)
    IDENTIFIER      reduce using rule 32 (expression -> expression EQUALS expression .)
    INSTANCE_VAR    reduce using rule 32 (expression -> expression EQUALS expression .)
    WHILE           reduce using rule 32 (expression -> expression EQUALS expression .)
    FOR             reduce using rule 32 (expression -> expression EQUALS expression .)
    PUTS            reduce using rule 32 (expression -> expression EQUALS expression .)
    LBRACE          reduce using rule 32 (expression -> expression EQUALS expression .)
    SETNEW          reduce using rule 32 (expression -> expression EQUALS expression .)
    LBRACKET        reduce using rule 32 (expression -> expression EQUALS expression .)
    STRING          reduce using rule 32 (expression -> expression EQUALS expression .)
    INTEGER         reduce using rule 32 (expression -> expression EQUALS expression .)
    FLOAT           reduce using rule 32 (expression -> expression EQUALS expression .)
    LPAREN          reduce using rule 32 (expression -> expression EQUALS expression .)
    END             reduce using rule 32 (expression -> expression EQUALS expression .)
    $end            reduce using rule 32 (expression -> expression EQUALS expression .)
    RPAREN          reduce using rule 32 (expression -> expression EQUALS expression .)
    ELSE            reduce using rule 32 (expression -> expression EQUALS expression .)
    ELSIF           reduce using rule 32 (expression -> expression EQUALS expression .)
    HASH_ROCKET     reduce using rule 32 (expression -> expression EQUALS expression .)
    RBRACKET        reduce using rule 32 (expression -> expression EQUALS expression .)
    COMMA           reduce using rule 32 (expression -> expression EQUALS expression .)
    RBRACE          reduce using rule 32 (expression -> expression EQUALS expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33

  ! PLUS            [ reduce using rule 32 (expression -> expression EQUALS expression .) ]
  ! MINUS           [ reduce using rule 32 (expression -> expression EQUALS expression .) ]
  ! GREATER         [ shift and go to state 26 ]
  ! LESS            [ shift and go to state 27 ]
  ! GREATER_EQUAL   [ shift and go to state 28 ]
  ! LESS_EQUAL      [ shift and go to state 29 ]
  ! EQUALS          [ shift and go to state 30 ]
  ! NOT_EQUALS      [ shift and go to state 31 ]


state 62

    (33) expression -> expression NOT_EQUALS expression .
    (28) expression -> expression . GREATER expression
    (29) expression -> expression . LESS expression
    (30) expression -> expression . GREATER_EQUAL expression
    (31) expression -> expression . LESS_EQUAL expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term

    GREATER         reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    LESS            reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    GREATER_EQUAL   reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    LESS_EQUAL      reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    EQUALS          reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    NOT_EQUALS      reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    GLOBAL_VAR      reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    IF              reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    DEF             reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    IDENTIFIER      reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    INSTANCE_VAR    reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    WHILE           reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    FOR             reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    PUTS            reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    LBRACE          reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    SETNEW          reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    LBRACKET        reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    STRING          reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    INTEGER         reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    FLOAT           reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    LPAREN          reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    END             reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    $end            reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    RPAREN          reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    ELSE            reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    ELSIF           reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    HASH_ROCKET     reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    RBRACKET        reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    COMMA           reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    RBRACE          reduce using rule 33 (expression -> expression NOT_EQUALS expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33

  ! PLUS            [ reduce using rule 33 (expression -> expression NOT_EQUALS expression .) ]
  ! MINUS           [ reduce using rule 33 (expression -> expression NOT_EQUALS expression .) ]
  ! GREATER         [ shift and go to state 26 ]
  ! LESS            [ shift and go to state 27 ]
  ! GREATER_EQUAL   [ shift and go to state 28 ]
  ! LESS_EQUAL      [ shift and go to state 29 ]
  ! EQUALS          [ shift and go to state 30 ]
  ! NOT_EQUALS      [ shift and go to state 31 ]


state 63

    (44) expression -> expression PLUS term .
    (42) term -> term . DIVIDE factor
    (43) term -> term . TIMES factor

    GREATER         reduce using rule 44 (expression -> expression PLUS term .)
    LESS            reduce using rule 44 (expression -> expression PLUS term .)
    GREATER_EQUAL   reduce using rule 44 (expression -> expression PLUS term .)
    LESS_EQUAL      reduce using rule 44 (expression -> expression PLUS term .)
    EQUALS          reduce using rule 44 (expression -> expression PLUS term .)
    NOT_EQUALS      reduce using rule 44 (expression -> expression PLUS term .)
    PLUS            reduce using rule 44 (expression -> expression PLUS term .)
    MINUS           reduce using rule 44 (expression -> expression PLUS term .)
    GLOBAL_VAR      reduce using rule 44 (expression -> expression PLUS term .)
    IF              reduce using rule 44 (expression -> expression PLUS term .)
    DEF             reduce using rule 44 (expression -> expression PLUS term .)
    IDENTIFIER      reduce using rule 44 (expression -> expression PLUS term .)
    INSTANCE_VAR    reduce using rule 44 (expression -> expression PLUS term .)
    WHILE           reduce using rule 44 (expression -> expression PLUS term .)
    FOR             reduce using rule 44 (expression -> expression PLUS term .)
    PUTS            reduce using rule 44 (expression -> expression PLUS term .)
    LBRACE          reduce using rule 44 (expression -> expression PLUS term .)
    SETNEW          reduce using rule 44 (expression -> expression PLUS term .)
    LBRACKET        reduce using rule 44 (expression -> expression PLUS term .)
    STRING          reduce using rule 44 (expression -> expression PLUS term .)
    INTEGER         reduce using rule 44 (expression -> expression PLUS term .)
    FLOAT           reduce using rule 44 (expression -> expression PLUS term .)
    LPAREN          reduce using rule 44 (expression -> expression PLUS term .)
    END             reduce using rule 44 (expression -> expression PLUS term .)
    $end            reduce using rule 44 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 44 (expression -> expression PLUS term .)
    ELSE            reduce using rule 44 (expression -> expression PLUS term .)
    ELSIF           reduce using rule 44 (expression -> expression PLUS term .)
    HASH_ROCKET     reduce using rule 44 (expression -> expression PLUS term .)
    RBRACKET        reduce using rule 44 (expression -> expression PLUS term .)
    COMMA           reduce using rule 44 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 44 (expression -> expression PLUS term .)
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53


state 64

    (45) expression -> expression MINUS term .
    (42) term -> term . DIVIDE factor
    (43) term -> term . TIMES factor

    GREATER         reduce using rule 45 (expression -> expression MINUS term .)
    LESS            reduce using rule 45 (expression -> expression MINUS term .)
    GREATER_EQUAL   reduce using rule 45 (expression -> expression MINUS term .)
    LESS_EQUAL      reduce using rule 45 (expression -> expression MINUS term .)
    EQUALS          reduce using rule 45 (expression -> expression MINUS term .)
    NOT_EQUALS      reduce using rule 45 (expression -> expression MINUS term .)
    PLUS            reduce using rule 45 (expression -> expression MINUS term .)
    MINUS           reduce using rule 45 (expression -> expression MINUS term .)
    GLOBAL_VAR      reduce using rule 45 (expression -> expression MINUS term .)
    IF              reduce using rule 45 (expression -> expression MINUS term .)
    DEF             reduce using rule 45 (expression -> expression MINUS term .)
    IDENTIFIER      reduce using rule 45 (expression -> expression MINUS term .)
    INSTANCE_VAR    reduce using rule 45 (expression -> expression MINUS term .)
    WHILE           reduce using rule 45 (expression -> expression MINUS term .)
    FOR             reduce using rule 45 (expression -> expression MINUS term .)
    PUTS            reduce using rule 45 (expression -> expression MINUS term .)
    LBRACE          reduce using rule 45 (expression -> expression MINUS term .)
    SETNEW          reduce using rule 45 (expression -> expression MINUS term .)
    LBRACKET        reduce using rule 45 (expression -> expression MINUS term .)
    STRING          reduce using rule 45 (expression -> expression MINUS term .)
    INTEGER         reduce using rule 45 (expression -> expression MINUS term .)
    FLOAT           reduce using rule 45 (expression -> expression MINUS term .)
    LPAREN          reduce using rule 45 (expression -> expression MINUS term .)
    END             reduce using rule 45 (expression -> expression MINUS term .)
    $end            reduce using rule 45 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 45 (expression -> expression MINUS term .)
    ELSE            reduce using rule 45 (expression -> expression MINUS term .)
    ELSIF           reduce using rule 45 (expression -> expression MINUS term .)
    HASH_ROCKET     reduce using rule 45 (expression -> expression MINUS term .)
    RBRACKET        reduce using rule 45 (expression -> expression MINUS term .)
    COMMA           reduce using rule 45 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 45 (expression -> expression MINUS term .)
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53


state 65

    (11) statement -> GLOBAL_VAR ASSIGN STRING .
    (14) factor -> STRING .

  ! reduce/reduce conflict for GLOBAL_VAR resolved using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
  ! reduce/reduce conflict for IF resolved using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
  ! reduce/reduce conflict for DEF resolved using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
  ! reduce/reduce conflict for INSTANCE_VAR resolved using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
  ! reduce/reduce conflict for FOR resolved using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
  ! reduce/reduce conflict for PUTS resolved using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
  ! reduce/reduce conflict for LBRACE resolved using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
  ! reduce/reduce conflict for SETNEW resolved using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
  ! reduce/reduce conflict for STRING resolved using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
  ! reduce/reduce conflict for INTEGER resolved using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
  ! reduce/reduce conflict for LPAREN resolved using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
  ! reduce/reduce conflict for END resolved using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
  ! reduce/reduce conflict for $end resolved using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
  ! reduce/reduce conflict for ELSE resolved using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
  ! reduce/reduce conflict for ELSIF resolved using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
    GLOBAL_VAR      reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
    IF              reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
    DEF             reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
    IDENTIFIER      reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
    INSTANCE_VAR    reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
    WHILE           reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
    FOR             reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
    PUTS            reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
    LBRACE          reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
    SETNEW          reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
    LBRACKET        reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
    STRING          reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
    INTEGER         reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
    FLOAT           reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
    LPAREN          reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
    END             reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
    $end            reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
    ELSE            reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
    ELSIF           reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN STRING .)
    POWER           reduce using rule 14 (factor -> STRING .)
    DIVIDE          reduce using rule 14 (factor -> STRING .)
    TIMES           reduce using rule 14 (factor -> STRING .)
    GREATER         reduce using rule 14 (factor -> STRING .)
    LESS            reduce using rule 14 (factor -> STRING .)
    GREATER_EQUAL   reduce using rule 14 (factor -> STRING .)
    LESS_EQUAL      reduce using rule 14 (factor -> STRING .)
    EQUALS          reduce using rule 14 (factor -> STRING .)
    NOT_EQUALS      reduce using rule 14 (factor -> STRING .)
    PLUS            reduce using rule 14 (factor -> STRING .)
    MINUS           reduce using rule 14 (factor -> STRING .)

  ! GLOBAL_VAR      [ reduce using rule 14 (factor -> STRING .) ]
  ! IF              [ reduce using rule 14 (factor -> STRING .) ]
  ! DEF             [ reduce using rule 14 (factor -> STRING .) ]
  ! IDENTIFIER      [ reduce using rule 14 (factor -> STRING .) ]
  ! INSTANCE_VAR    [ reduce using rule 14 (factor -> STRING .) ]
  ! WHILE           [ reduce using rule 14 (factor -> STRING .) ]
  ! FOR             [ reduce using rule 14 (factor -> STRING .) ]
  ! PUTS            [ reduce using rule 14 (factor -> STRING .) ]
  ! LBRACE          [ reduce using rule 14 (factor -> STRING .) ]
  ! SETNEW          [ reduce using rule 14 (factor -> STRING .) ]
  ! LBRACKET        [ reduce using rule 14 (factor -> STRING .) ]
  ! STRING          [ reduce using rule 14 (factor -> STRING .) ]
  ! INTEGER         [ reduce using rule 14 (factor -> STRING .) ]
  ! FLOAT           [ reduce using rule 14 (factor -> STRING .) ]
  ! LPAREN          [ reduce using rule 14 (factor -> STRING .) ]
  ! END             [ reduce using rule 14 (factor -> STRING .) ]
  ! $end            [ reduce using rule 14 (factor -> STRING .) ]
  ! ELSE            [ reduce using rule 14 (factor -> STRING .) ]
  ! ELSIF           [ reduce using rule 14 (factor -> STRING .) ]


state 66

    (12) statement -> GLOBAL_VAR ASSIGN expression .
    (28) expression -> expression . GREATER expression
    (29) expression -> expression . LESS expression
    (30) expression -> expression . GREATER_EQUAL expression
    (31) expression -> expression . LESS_EQUAL expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term

    GLOBAL_VAR      reduce using rule 12 (statement -> GLOBAL_VAR ASSIGN expression .)
    IF              reduce using rule 12 (statement -> GLOBAL_VAR ASSIGN expression .)
    DEF             reduce using rule 12 (statement -> GLOBAL_VAR ASSIGN expression .)
    IDENTIFIER      reduce using rule 12 (statement -> GLOBAL_VAR ASSIGN expression .)
    INSTANCE_VAR    reduce using rule 12 (statement -> GLOBAL_VAR ASSIGN expression .)
    WHILE           reduce using rule 12 (statement -> GLOBAL_VAR ASSIGN expression .)
    FOR             reduce using rule 12 (statement -> GLOBAL_VAR ASSIGN expression .)
    PUTS            reduce using rule 12 (statement -> GLOBAL_VAR ASSIGN expression .)
    LBRACE          reduce using rule 12 (statement -> GLOBAL_VAR ASSIGN expression .)
    SETNEW          reduce using rule 12 (statement -> GLOBAL_VAR ASSIGN expression .)
    LBRACKET        reduce using rule 12 (statement -> GLOBAL_VAR ASSIGN expression .)
    STRING          reduce using rule 12 (statement -> GLOBAL_VAR ASSIGN expression .)
    INTEGER         reduce using rule 12 (statement -> GLOBAL_VAR ASSIGN expression .)
    FLOAT           reduce using rule 12 (statement -> GLOBAL_VAR ASSIGN expression .)
    LPAREN          reduce using rule 12 (statement -> GLOBAL_VAR ASSIGN expression .)
    END             reduce using rule 12 (statement -> GLOBAL_VAR ASSIGN expression .)
    $end            reduce using rule 12 (statement -> GLOBAL_VAR ASSIGN expression .)
    ELSE            reduce using rule 12 (statement -> GLOBAL_VAR ASSIGN expression .)
    ELSIF           reduce using rule 12 (statement -> GLOBAL_VAR ASSIGN expression .)
    GREATER         shift and go to state 26
    LESS            shift and go to state 27
    GREATER_EQUAL   shift and go to state 28
    LESS_EQUAL      shift and go to state 29
    EQUALS          shift and go to state 30
    NOT_EQUALS      shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 67

    (24) statement -> IF expression statement . END
    (25) statement -> IF expression statement . ELSE statement END
    (26) statement -> IF expression statement . ELSIF expression statement END
    (27) statement -> IF expression statement . ELSIF expression statement ELSE statement END
    (23) statement -> statement . statement
    (7) statement -> . local_var
    (8) statement -> . expression
    (11) statement -> . GLOBAL_VAR ASSIGN STRING
    (12) statement -> . GLOBAL_VAR ASSIGN expression
    (23) statement -> . statement statement
    (24) statement -> . IF expression statement END
    (25) statement -> . IF expression statement ELSE statement END
    (26) statement -> . IF expression statement ELSIF expression statement END
    (27) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (34) statement -> . DEF IDENTIFIER statement END
    (35) statement -> . IDENTIFIER
    (36) statement -> . INSTANCE_VAR EQUALS INTEGER
    (37) statement -> . INSTANCE_VAR EQUALS FLOAT
    (39) statement -> . WHILE expression statement END
    (40) statement -> . IDENTIFIER EQUALS GETS
    (53) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (54) statement -> . IDENTIFIER LPAREN params RPAREN
    (55) statement -> . FOR IDENTIFIER IN range statement
    (58) statement -> . PUTS expression
    (9) local_var -> . IDENTIFIER EQUALS INTEGER
    (10) local_var -> . IDENTIFIER EQUALS FLOAT
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    END             shift and go to state 89
    ELSE            shift and go to state 90
    ELSIF           shift and go to state 91
    GLOBAL_VAR      shift and go to state 6
    IF              shift and go to state 8
    DEF             shift and go to state 9
    IDENTIFIER      shift and go to state 10
    INSTANCE_VAR    shift and go to state 11
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 5
    statement                      shift and go to state 25
    local_var                      shift and go to state 4
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 68

    (34) statement -> DEF IDENTIFIER statement . END
    (23) statement -> statement . statement
    (7) statement -> . local_var
    (8) statement -> . expression
    (11) statement -> . GLOBAL_VAR ASSIGN STRING
    (12) statement -> . GLOBAL_VAR ASSIGN expression
    (23) statement -> . statement statement
    (24) statement -> . IF expression statement END
    (25) statement -> . IF expression statement ELSE statement END
    (26) statement -> . IF expression statement ELSIF expression statement END
    (27) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (34) statement -> . DEF IDENTIFIER statement END
    (35) statement -> . IDENTIFIER
    (36) statement -> . INSTANCE_VAR EQUALS INTEGER
    (37) statement -> . INSTANCE_VAR EQUALS FLOAT
    (39) statement -> . WHILE expression statement END
    (40) statement -> . IDENTIFIER EQUALS GETS
    (53) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (54) statement -> . IDENTIFIER LPAREN params RPAREN
    (55) statement -> . FOR IDENTIFIER IN range statement
    (58) statement -> . PUTS expression
    (9) local_var -> . IDENTIFIER EQUALS INTEGER
    (10) local_var -> . IDENTIFIER EQUALS FLOAT
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    END             shift and go to state 92
    GLOBAL_VAR      shift and go to state 6
    IF              shift and go to state 8
    DEF             shift and go to state 9
    IDENTIFIER      shift and go to state 10
    INSTANCE_VAR    shift and go to state 11
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    statement                      shift and go to state 25
    local_var                      shift and go to state 4
    expression                     shift and go to state 5
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 69

    (53) statement -> DEF IDENTIFIER LPAREN . params RPAREN statement END
    (49) factor -> LPAREN . expression RPAREN
    (3) params -> . IDENTIFIER
    (4) params -> . params COMMA IDENTIFIER
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 93
    LBRACE          shift and go to state 18
    GLOBAL_VAR      shift and go to state 37
    INSTANCE_VAR    shift and go to state 38
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    params                         shift and go to state 94
    expression                     shift and go to state 44
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 70

    (40) statement -> IDENTIFIER EQUALS GETS .

    GLOBAL_VAR      reduce using rule 40 (statement -> IDENTIFIER EQUALS GETS .)
    IF              reduce using rule 40 (statement -> IDENTIFIER EQUALS GETS .)
    DEF             reduce using rule 40 (statement -> IDENTIFIER EQUALS GETS .)
    IDENTIFIER      reduce using rule 40 (statement -> IDENTIFIER EQUALS GETS .)
    INSTANCE_VAR    reduce using rule 40 (statement -> IDENTIFIER EQUALS GETS .)
    WHILE           reduce using rule 40 (statement -> IDENTIFIER EQUALS GETS .)
    FOR             reduce using rule 40 (statement -> IDENTIFIER EQUALS GETS .)
    PUTS            reduce using rule 40 (statement -> IDENTIFIER EQUALS GETS .)
    LBRACE          reduce using rule 40 (statement -> IDENTIFIER EQUALS GETS .)
    SETNEW          reduce using rule 40 (statement -> IDENTIFIER EQUALS GETS .)
    LBRACKET        reduce using rule 40 (statement -> IDENTIFIER EQUALS GETS .)
    STRING          reduce using rule 40 (statement -> IDENTIFIER EQUALS GETS .)
    INTEGER         reduce using rule 40 (statement -> IDENTIFIER EQUALS GETS .)
    FLOAT           reduce using rule 40 (statement -> IDENTIFIER EQUALS GETS .)
    LPAREN          reduce using rule 40 (statement -> IDENTIFIER EQUALS GETS .)
    END             reduce using rule 40 (statement -> IDENTIFIER EQUALS GETS .)
    $end            reduce using rule 40 (statement -> IDENTIFIER EQUALS GETS .)
    ELSE            reduce using rule 40 (statement -> IDENTIFIER EQUALS GETS .)
    ELSIF           reduce using rule 40 (statement -> IDENTIFIER EQUALS GETS .)


state 71

    (9) local_var -> IDENTIFIER EQUALS INTEGER .

    GLOBAL_VAR      reduce using rule 9 (local_var -> IDENTIFIER EQUALS INTEGER .)
    IF              reduce using rule 9 (local_var -> IDENTIFIER EQUALS INTEGER .)
    DEF             reduce using rule 9 (local_var -> IDENTIFIER EQUALS INTEGER .)
    IDENTIFIER      reduce using rule 9 (local_var -> IDENTIFIER EQUALS INTEGER .)
    INSTANCE_VAR    reduce using rule 9 (local_var -> IDENTIFIER EQUALS INTEGER .)
    WHILE           reduce using rule 9 (local_var -> IDENTIFIER EQUALS INTEGER .)
    FOR             reduce using rule 9 (local_var -> IDENTIFIER EQUALS INTEGER .)
    PUTS            reduce using rule 9 (local_var -> IDENTIFIER EQUALS INTEGER .)
    LBRACE          reduce using rule 9 (local_var -> IDENTIFIER EQUALS INTEGER .)
    SETNEW          reduce using rule 9 (local_var -> IDENTIFIER EQUALS INTEGER .)
    LBRACKET        reduce using rule 9 (local_var -> IDENTIFIER EQUALS INTEGER .)
    STRING          reduce using rule 9 (local_var -> IDENTIFIER EQUALS INTEGER .)
    INTEGER         reduce using rule 9 (local_var -> IDENTIFIER EQUALS INTEGER .)
    FLOAT           reduce using rule 9 (local_var -> IDENTIFIER EQUALS INTEGER .)
    LPAREN          reduce using rule 9 (local_var -> IDENTIFIER EQUALS INTEGER .)
    END             reduce using rule 9 (local_var -> IDENTIFIER EQUALS INTEGER .)
    $end            reduce using rule 9 (local_var -> IDENTIFIER EQUALS INTEGER .)
    ELSE            reduce using rule 9 (local_var -> IDENTIFIER EQUALS INTEGER .)
    ELSIF           reduce using rule 9 (local_var -> IDENTIFIER EQUALS INTEGER .)


state 72

    (10) local_var -> IDENTIFIER EQUALS FLOAT .

    GLOBAL_VAR      reduce using rule 10 (local_var -> IDENTIFIER EQUALS FLOAT .)
    IF              reduce using rule 10 (local_var -> IDENTIFIER EQUALS FLOAT .)
    DEF             reduce using rule 10 (local_var -> IDENTIFIER EQUALS FLOAT .)
    IDENTIFIER      reduce using rule 10 (local_var -> IDENTIFIER EQUALS FLOAT .)
    INSTANCE_VAR    reduce using rule 10 (local_var -> IDENTIFIER EQUALS FLOAT .)
    WHILE           reduce using rule 10 (local_var -> IDENTIFIER EQUALS FLOAT .)
    FOR             reduce using rule 10 (local_var -> IDENTIFIER EQUALS FLOAT .)
    PUTS            reduce using rule 10 (local_var -> IDENTIFIER EQUALS FLOAT .)
    LBRACE          reduce using rule 10 (local_var -> IDENTIFIER EQUALS FLOAT .)
    SETNEW          reduce using rule 10 (local_var -> IDENTIFIER EQUALS FLOAT .)
    LBRACKET        reduce using rule 10 (local_var -> IDENTIFIER EQUALS FLOAT .)
    STRING          reduce using rule 10 (local_var -> IDENTIFIER EQUALS FLOAT .)
    INTEGER         reduce using rule 10 (local_var -> IDENTIFIER EQUALS FLOAT .)
    FLOAT           reduce using rule 10 (local_var -> IDENTIFIER EQUALS FLOAT .)
    LPAREN          reduce using rule 10 (local_var -> IDENTIFIER EQUALS FLOAT .)
    END             reduce using rule 10 (local_var -> IDENTIFIER EQUALS FLOAT .)
    $end            reduce using rule 10 (local_var -> IDENTIFIER EQUALS FLOAT .)
    ELSE            reduce using rule 10 (local_var -> IDENTIFIER EQUALS FLOAT .)
    ELSIF           reduce using rule 10 (local_var -> IDENTIFIER EQUALS FLOAT .)


state 73

    (3) params -> IDENTIFIER .

    RPAREN          reduce using rule 3 (params -> IDENTIFIER .)
    COMMA           reduce using rule 3 (params -> IDENTIFIER .)


state 74

    (54) statement -> IDENTIFIER LPAREN params . RPAREN
    (4) params -> params . COMMA IDENTIFIER

    RPAREN          shift and go to state 95
    COMMA           shift and go to state 96


state 75

    (36) statement -> INSTANCE_VAR EQUALS INTEGER .

    GLOBAL_VAR      reduce using rule 36 (statement -> INSTANCE_VAR EQUALS INTEGER .)
    IF              reduce using rule 36 (statement -> INSTANCE_VAR EQUALS INTEGER .)
    DEF             reduce using rule 36 (statement -> INSTANCE_VAR EQUALS INTEGER .)
    IDENTIFIER      reduce using rule 36 (statement -> INSTANCE_VAR EQUALS INTEGER .)
    INSTANCE_VAR    reduce using rule 36 (statement -> INSTANCE_VAR EQUALS INTEGER .)
    WHILE           reduce using rule 36 (statement -> INSTANCE_VAR EQUALS INTEGER .)
    FOR             reduce using rule 36 (statement -> INSTANCE_VAR EQUALS INTEGER .)
    PUTS            reduce using rule 36 (statement -> INSTANCE_VAR EQUALS INTEGER .)
    LBRACE          reduce using rule 36 (statement -> INSTANCE_VAR EQUALS INTEGER .)
    SETNEW          reduce using rule 36 (statement -> INSTANCE_VAR EQUALS INTEGER .)
    LBRACKET        reduce using rule 36 (statement -> INSTANCE_VAR EQUALS INTEGER .)
    STRING          reduce using rule 36 (statement -> INSTANCE_VAR EQUALS INTEGER .)
    INTEGER         reduce using rule 36 (statement -> INSTANCE_VAR EQUALS INTEGER .)
    FLOAT           reduce using rule 36 (statement -> INSTANCE_VAR EQUALS INTEGER .)
    LPAREN          reduce using rule 36 (statement -> INSTANCE_VAR EQUALS INTEGER .)
    END             reduce using rule 36 (statement -> INSTANCE_VAR EQUALS INTEGER .)
    $end            reduce using rule 36 (statement -> INSTANCE_VAR EQUALS INTEGER .)
    ELSE            reduce using rule 36 (statement -> INSTANCE_VAR EQUALS INTEGER .)
    ELSIF           reduce using rule 36 (statement -> INSTANCE_VAR EQUALS INTEGER .)


state 76

    (37) statement -> INSTANCE_VAR EQUALS FLOAT .

    GLOBAL_VAR      reduce using rule 37 (statement -> INSTANCE_VAR EQUALS FLOAT .)
    IF              reduce using rule 37 (statement -> INSTANCE_VAR EQUALS FLOAT .)
    DEF             reduce using rule 37 (statement -> INSTANCE_VAR EQUALS FLOAT .)
    IDENTIFIER      reduce using rule 37 (statement -> INSTANCE_VAR EQUALS FLOAT .)
    INSTANCE_VAR    reduce using rule 37 (statement -> INSTANCE_VAR EQUALS FLOAT .)
    WHILE           reduce using rule 37 (statement -> INSTANCE_VAR EQUALS FLOAT .)
    FOR             reduce using rule 37 (statement -> INSTANCE_VAR EQUALS FLOAT .)
    PUTS            reduce using rule 37 (statement -> INSTANCE_VAR EQUALS FLOAT .)
    LBRACE          reduce using rule 37 (statement -> INSTANCE_VAR EQUALS FLOAT .)
    SETNEW          reduce using rule 37 (statement -> INSTANCE_VAR EQUALS FLOAT .)
    LBRACKET        reduce using rule 37 (statement -> INSTANCE_VAR EQUALS FLOAT .)
    STRING          reduce using rule 37 (statement -> INSTANCE_VAR EQUALS FLOAT .)
    INTEGER         reduce using rule 37 (statement -> INSTANCE_VAR EQUALS FLOAT .)
    FLOAT           reduce using rule 37 (statement -> INSTANCE_VAR EQUALS FLOAT .)
    LPAREN          reduce using rule 37 (statement -> INSTANCE_VAR EQUALS FLOAT .)
    END             reduce using rule 37 (statement -> INSTANCE_VAR EQUALS FLOAT .)
    $end            reduce using rule 37 (statement -> INSTANCE_VAR EQUALS FLOAT .)
    ELSE            reduce using rule 37 (statement -> INSTANCE_VAR EQUALS FLOAT .)
    ELSIF           reduce using rule 37 (statement -> INSTANCE_VAR EQUALS FLOAT .)


state 77

    (39) statement -> WHILE expression statement . END
    (23) statement -> statement . statement
    (7) statement -> . local_var
    (8) statement -> . expression
    (11) statement -> . GLOBAL_VAR ASSIGN STRING
    (12) statement -> . GLOBAL_VAR ASSIGN expression
    (23) statement -> . statement statement
    (24) statement -> . IF expression statement END
    (25) statement -> . IF expression statement ELSE statement END
    (26) statement -> . IF expression statement ELSIF expression statement END
    (27) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (34) statement -> . DEF IDENTIFIER statement END
    (35) statement -> . IDENTIFIER
    (36) statement -> . INSTANCE_VAR EQUALS INTEGER
    (37) statement -> . INSTANCE_VAR EQUALS FLOAT
    (39) statement -> . WHILE expression statement END
    (40) statement -> . IDENTIFIER EQUALS GETS
    (53) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (54) statement -> . IDENTIFIER LPAREN params RPAREN
    (55) statement -> . FOR IDENTIFIER IN range statement
    (58) statement -> . PUTS expression
    (9) local_var -> . IDENTIFIER EQUALS INTEGER
    (10) local_var -> . IDENTIFIER EQUALS FLOAT
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    END             shift and go to state 97
    GLOBAL_VAR      shift and go to state 6
    IF              shift and go to state 8
    DEF             shift and go to state 9
    IDENTIFIER      shift and go to state 10
    INSTANCE_VAR    shift and go to state 11
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 5
    statement                      shift and go to state 25
    local_var                      shift and go to state 4
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 78

    (49) factor -> LPAREN expression RPAREN .

    POWER           reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    GREATER_EQUAL   reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    NOT_EQUALS      reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    GLOBAL_VAR      reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    DEF             reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    INSTANCE_VAR    reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    PUTS            reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    SETNEW          reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    STRING          reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    INTEGER         reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    ELSIF           reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    HASH_ROCKET     reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 49 (factor -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 49 (factor -> LPAREN expression RPAREN .)


state 79

    (55) statement -> FOR IDENTIFIER IN . range statement
    (56) range -> . INTEGER DOUBLE_DOT INTEGER
    (57) range -> . FLOAT DOUBLE_DOT FLOAT

    INTEGER         shift and go to state 99
    FLOAT           shift and go to state 100

    range                          shift and go to state 98

state 80

    (15) expression -> LBRACE key_value_pairs RBRACE .

    GREATER         reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    LESS            reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    GREATER_EQUAL   reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    LESS_EQUAL      reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    EQUALS          reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    NOT_EQUALS      reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    PLUS            reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    MINUS           reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    GLOBAL_VAR      reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    IF              reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    DEF             reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    IDENTIFIER      reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    INSTANCE_VAR    reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    WHILE           reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    FOR             reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    PUTS            reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    LBRACE          reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    SETNEW          reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    LBRACKET        reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    STRING          reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    INTEGER         reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    FLOAT           reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    LPAREN          reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    END             reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    $end            reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    RPAREN          reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    ELSE            reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    ELSIF           reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    HASH_ROCKET     reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    RBRACKET        reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    COMMA           reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)
    RBRACE          reduce using rule 15 (expression -> LBRACE key_value_pairs RBRACE .)


state 81

    (18) key_value_pairs -> key_value_pairs COMMA . key_value
    (19) key_value -> . expression HASH_ROCKET expression
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 36
    GLOBAL_VAR      shift and go to state 37
    INSTANCE_VAR    shift and go to state 38
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    key_value                      shift and go to state 101
    expression                     shift and go to state 50
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 82

    (19) key_value -> expression HASH_ROCKET . expression
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 36
    GLOBAL_VAR      shift and go to state 37
    INSTANCE_VAR    shift and go to state 38
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 102
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 83

    (38) expression -> SETNEW LPAREN elements . RPAREN
    (52) elements -> elements . COMMA expression

    RPAREN          shift and go to state 103
    COMMA           shift and go to state 87


state 84

    (42) term -> term DIVIDE factor .
    (13) factor -> factor . POWER factor

    DIVIDE          reduce using rule 42 (term -> term DIVIDE factor .)
    TIMES           reduce using rule 42 (term -> term DIVIDE factor .)
    GREATER         reduce using rule 42 (term -> term DIVIDE factor .)
    LESS            reduce using rule 42 (term -> term DIVIDE factor .)
    GREATER_EQUAL   reduce using rule 42 (term -> term DIVIDE factor .)
    LESS_EQUAL      reduce using rule 42 (term -> term DIVIDE factor .)
    EQUALS          reduce using rule 42 (term -> term DIVIDE factor .)
    NOT_EQUALS      reduce using rule 42 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 42 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 42 (term -> term DIVIDE factor .)
    GLOBAL_VAR      reduce using rule 42 (term -> term DIVIDE factor .)
    IF              reduce using rule 42 (term -> term DIVIDE factor .)
    DEF             reduce using rule 42 (term -> term DIVIDE factor .)
    IDENTIFIER      reduce using rule 42 (term -> term DIVIDE factor .)
    INSTANCE_VAR    reduce using rule 42 (term -> term DIVIDE factor .)
    WHILE           reduce using rule 42 (term -> term DIVIDE factor .)
    FOR             reduce using rule 42 (term -> term DIVIDE factor .)
    PUTS            reduce using rule 42 (term -> term DIVIDE factor .)
    LBRACE          reduce using rule 42 (term -> term DIVIDE factor .)
    SETNEW          reduce using rule 42 (term -> term DIVIDE factor .)
    LBRACKET        reduce using rule 42 (term -> term DIVIDE factor .)
    STRING          reduce using rule 42 (term -> term DIVIDE factor .)
    INTEGER         reduce using rule 42 (term -> term DIVIDE factor .)
    FLOAT           reduce using rule 42 (term -> term DIVIDE factor .)
    LPAREN          reduce using rule 42 (term -> term DIVIDE factor .)
    END             reduce using rule 42 (term -> term DIVIDE factor .)
    $end            reduce using rule 42 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 42 (term -> term DIVIDE factor .)
    ELSE            reduce using rule 42 (term -> term DIVIDE factor .)
    ELSIF           reduce using rule 42 (term -> term DIVIDE factor .)
    HASH_ROCKET     reduce using rule 42 (term -> term DIVIDE factor .)
    RBRACKET        reduce using rule 42 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 42 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 42 (term -> term DIVIDE factor .)
    POWER           shift and go to state 56


state 85

    (43) term -> term TIMES factor .
    (13) factor -> factor . POWER factor

    DIVIDE          reduce using rule 43 (term -> term TIMES factor .)
    TIMES           reduce using rule 43 (term -> term TIMES factor .)
    GREATER         reduce using rule 43 (term -> term TIMES factor .)
    LESS            reduce using rule 43 (term -> term TIMES factor .)
    GREATER_EQUAL   reduce using rule 43 (term -> term TIMES factor .)
    LESS_EQUAL      reduce using rule 43 (term -> term TIMES factor .)
    EQUALS          reduce using rule 43 (term -> term TIMES factor .)
    NOT_EQUALS      reduce using rule 43 (term -> term TIMES factor .)
    PLUS            reduce using rule 43 (term -> term TIMES factor .)
    MINUS           reduce using rule 43 (term -> term TIMES factor .)
    GLOBAL_VAR      reduce using rule 43 (term -> term TIMES factor .)
    IF              reduce using rule 43 (term -> term TIMES factor .)
    DEF             reduce using rule 43 (term -> term TIMES factor .)
    IDENTIFIER      reduce using rule 43 (term -> term TIMES factor .)
    INSTANCE_VAR    reduce using rule 43 (term -> term TIMES factor .)
    WHILE           reduce using rule 43 (term -> term TIMES factor .)
    FOR             reduce using rule 43 (term -> term TIMES factor .)
    PUTS            reduce using rule 43 (term -> term TIMES factor .)
    LBRACE          reduce using rule 43 (term -> term TIMES factor .)
    SETNEW          reduce using rule 43 (term -> term TIMES factor .)
    LBRACKET        reduce using rule 43 (term -> term TIMES factor .)
    STRING          reduce using rule 43 (term -> term TIMES factor .)
    INTEGER         reduce using rule 43 (term -> term TIMES factor .)
    FLOAT           reduce using rule 43 (term -> term TIMES factor .)
    LPAREN          reduce using rule 43 (term -> term TIMES factor .)
    END             reduce using rule 43 (term -> term TIMES factor .)
    $end            reduce using rule 43 (term -> term TIMES factor .)
    RPAREN          reduce using rule 43 (term -> term TIMES factor .)
    ELSE            reduce using rule 43 (term -> term TIMES factor .)
    ELSIF           reduce using rule 43 (term -> term TIMES factor .)
    HASH_ROCKET     reduce using rule 43 (term -> term TIMES factor .)
    RBRACKET        reduce using rule 43 (term -> term TIMES factor .)
    COMMA           reduce using rule 43 (term -> term TIMES factor .)
    RBRACE          reduce using rule 43 (term -> term TIMES factor .)
    POWER           shift and go to state 56


state 86

    (50) expression -> LBRACKET elements RBRACKET .

    GREATER         reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    LESS            reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    GREATER_EQUAL   reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    LESS_EQUAL      reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    EQUALS          reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    NOT_EQUALS      reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    PLUS            reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    MINUS           reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    GLOBAL_VAR      reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    IF              reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    DEF             reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    IDENTIFIER      reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    INSTANCE_VAR    reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    WHILE           reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    FOR             reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    PUTS            reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    LBRACE          reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    SETNEW          reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    LBRACKET        reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    STRING          reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    INTEGER         reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    FLOAT           reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    LPAREN          reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    END             reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    $end            reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    RPAREN          reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    ELSE            reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    ELSIF           reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    HASH_ROCKET     reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    RBRACKET        reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    COMMA           reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)
    RBRACE          reduce using rule 50 (expression -> LBRACKET elements RBRACKET .)


state 87

    (52) elements -> elements COMMA . expression
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 36
    GLOBAL_VAR      shift and go to state 37
    INSTANCE_VAR    shift and go to state 38
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 104
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 88

    (13) factor -> factor POWER factor .
    (13) factor -> factor . POWER factor

    DIVIDE          reduce using rule 13 (factor -> factor POWER factor .)
    TIMES           reduce using rule 13 (factor -> factor POWER factor .)
    GREATER         reduce using rule 13 (factor -> factor POWER factor .)
    LESS            reduce using rule 13 (factor -> factor POWER factor .)
    GREATER_EQUAL   reduce using rule 13 (factor -> factor POWER factor .)
    LESS_EQUAL      reduce using rule 13 (factor -> factor POWER factor .)
    EQUALS          reduce using rule 13 (factor -> factor POWER factor .)
    NOT_EQUALS      reduce using rule 13 (factor -> factor POWER factor .)
    PLUS            reduce using rule 13 (factor -> factor POWER factor .)
    MINUS           reduce using rule 13 (factor -> factor POWER factor .)
    GLOBAL_VAR      reduce using rule 13 (factor -> factor POWER factor .)
    IF              reduce using rule 13 (factor -> factor POWER factor .)
    DEF             reduce using rule 13 (factor -> factor POWER factor .)
    IDENTIFIER      reduce using rule 13 (factor -> factor POWER factor .)
    INSTANCE_VAR    reduce using rule 13 (factor -> factor POWER factor .)
    WHILE           reduce using rule 13 (factor -> factor POWER factor .)
    FOR             reduce using rule 13 (factor -> factor POWER factor .)
    PUTS            reduce using rule 13 (factor -> factor POWER factor .)
    LBRACE          reduce using rule 13 (factor -> factor POWER factor .)
    SETNEW          reduce using rule 13 (factor -> factor POWER factor .)
    LBRACKET        reduce using rule 13 (factor -> factor POWER factor .)
    STRING          reduce using rule 13 (factor -> factor POWER factor .)
    INTEGER         reduce using rule 13 (factor -> factor POWER factor .)
    FLOAT           reduce using rule 13 (factor -> factor POWER factor .)
    LPAREN          reduce using rule 13 (factor -> factor POWER factor .)
    END             reduce using rule 13 (factor -> factor POWER factor .)
    $end            reduce using rule 13 (factor -> factor POWER factor .)
    RPAREN          reduce using rule 13 (factor -> factor POWER factor .)
    ELSE            reduce using rule 13 (factor -> factor POWER factor .)
    ELSIF           reduce using rule 13 (factor -> factor POWER factor .)
    HASH_ROCKET     reduce using rule 13 (factor -> factor POWER factor .)
    RBRACKET        reduce using rule 13 (factor -> factor POWER factor .)
    COMMA           reduce using rule 13 (factor -> factor POWER factor .)
    RBRACE          reduce using rule 13 (factor -> factor POWER factor .)
    POWER           shift and go to state 56

  ! POWER           [ reduce using rule 13 (factor -> factor POWER factor .) ]


state 89

    (24) statement -> IF expression statement END .

    GLOBAL_VAR      reduce using rule 24 (statement -> IF expression statement END .)
    IF              reduce using rule 24 (statement -> IF expression statement END .)
    DEF             reduce using rule 24 (statement -> IF expression statement END .)
    IDENTIFIER      reduce using rule 24 (statement -> IF expression statement END .)
    INSTANCE_VAR    reduce using rule 24 (statement -> IF expression statement END .)
    WHILE           reduce using rule 24 (statement -> IF expression statement END .)
    FOR             reduce using rule 24 (statement -> IF expression statement END .)
    PUTS            reduce using rule 24 (statement -> IF expression statement END .)
    LBRACE          reduce using rule 24 (statement -> IF expression statement END .)
    SETNEW          reduce using rule 24 (statement -> IF expression statement END .)
    LBRACKET        reduce using rule 24 (statement -> IF expression statement END .)
    STRING          reduce using rule 24 (statement -> IF expression statement END .)
    INTEGER         reduce using rule 24 (statement -> IF expression statement END .)
    FLOAT           reduce using rule 24 (statement -> IF expression statement END .)
    LPAREN          reduce using rule 24 (statement -> IF expression statement END .)
    END             reduce using rule 24 (statement -> IF expression statement END .)
    $end            reduce using rule 24 (statement -> IF expression statement END .)
    ELSE            reduce using rule 24 (statement -> IF expression statement END .)
    ELSIF           reduce using rule 24 (statement -> IF expression statement END .)


state 90

    (25) statement -> IF expression statement ELSE . statement END
    (7) statement -> . local_var
    (8) statement -> . expression
    (11) statement -> . GLOBAL_VAR ASSIGN STRING
    (12) statement -> . GLOBAL_VAR ASSIGN expression
    (23) statement -> . statement statement
    (24) statement -> . IF expression statement END
    (25) statement -> . IF expression statement ELSE statement END
    (26) statement -> . IF expression statement ELSIF expression statement END
    (27) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (34) statement -> . DEF IDENTIFIER statement END
    (35) statement -> . IDENTIFIER
    (36) statement -> . INSTANCE_VAR EQUALS INTEGER
    (37) statement -> . INSTANCE_VAR EQUALS FLOAT
    (39) statement -> . WHILE expression statement END
    (40) statement -> . IDENTIFIER EQUALS GETS
    (53) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (54) statement -> . IDENTIFIER LPAREN params RPAREN
    (55) statement -> . FOR IDENTIFIER IN range statement
    (58) statement -> . PUTS expression
    (9) local_var -> . IDENTIFIER EQUALS INTEGER
    (10) local_var -> . IDENTIFIER EQUALS FLOAT
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    GLOBAL_VAR      shift and go to state 6
    IF              shift and go to state 8
    DEF             shift and go to state 9
    IDENTIFIER      shift and go to state 10
    INSTANCE_VAR    shift and go to state 11
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 5
    statement                      shift and go to state 105
    local_var                      shift and go to state 4
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 91

    (26) statement -> IF expression statement ELSIF . expression statement END
    (27) statement -> IF expression statement ELSIF . expression statement ELSE statement END
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 36
    GLOBAL_VAR      shift and go to state 37
    INSTANCE_VAR    shift and go to state 38
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 106
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 92

    (34) statement -> DEF IDENTIFIER statement END .

    GLOBAL_VAR      reduce using rule 34 (statement -> DEF IDENTIFIER statement END .)
    IF              reduce using rule 34 (statement -> DEF IDENTIFIER statement END .)
    DEF             reduce using rule 34 (statement -> DEF IDENTIFIER statement END .)
    IDENTIFIER      reduce using rule 34 (statement -> DEF IDENTIFIER statement END .)
    INSTANCE_VAR    reduce using rule 34 (statement -> DEF IDENTIFIER statement END .)
    WHILE           reduce using rule 34 (statement -> DEF IDENTIFIER statement END .)
    FOR             reduce using rule 34 (statement -> DEF IDENTIFIER statement END .)
    PUTS            reduce using rule 34 (statement -> DEF IDENTIFIER statement END .)
    LBRACE          reduce using rule 34 (statement -> DEF IDENTIFIER statement END .)
    SETNEW          reduce using rule 34 (statement -> DEF IDENTIFIER statement END .)
    LBRACKET        reduce using rule 34 (statement -> DEF IDENTIFIER statement END .)
    STRING          reduce using rule 34 (statement -> DEF IDENTIFIER statement END .)
    INTEGER         reduce using rule 34 (statement -> DEF IDENTIFIER statement END .)
    FLOAT           reduce using rule 34 (statement -> DEF IDENTIFIER statement END .)
    LPAREN          reduce using rule 34 (statement -> DEF IDENTIFIER statement END .)
    END             reduce using rule 34 (statement -> DEF IDENTIFIER statement END .)
    $end            reduce using rule 34 (statement -> DEF IDENTIFIER statement END .)
    ELSE            reduce using rule 34 (statement -> DEF IDENTIFIER statement END .)
    ELSIF           reduce using rule 34 (statement -> DEF IDENTIFIER statement END .)


state 93

    (3) params -> IDENTIFIER .
    (20) expression -> IDENTIFIER .

  ! reduce/reduce conflict for RPAREN resolved using rule 3 (params -> IDENTIFIER .)
    RPAREN          reduce using rule 3 (params -> IDENTIFIER .)
    COMMA           reduce using rule 3 (params -> IDENTIFIER .)
    GREATER         reduce using rule 20 (expression -> IDENTIFIER .)
    LESS            reduce using rule 20 (expression -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 20 (expression -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 20 (expression -> IDENTIFIER .)
    EQUALS          reduce using rule 20 (expression -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 20 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 20 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 20 (expression -> IDENTIFIER .)

  ! RPAREN          [ reduce using rule 20 (expression -> IDENTIFIER .) ]


state 94

    (53) statement -> DEF IDENTIFIER LPAREN params . RPAREN statement END
    (4) params -> params . COMMA IDENTIFIER

    RPAREN          shift and go to state 107
    COMMA           shift and go to state 96


state 95

    (54) statement -> IDENTIFIER LPAREN params RPAREN .

    GLOBAL_VAR      reduce using rule 54 (statement -> IDENTIFIER LPAREN params RPAREN .)
    IF              reduce using rule 54 (statement -> IDENTIFIER LPAREN params RPAREN .)
    DEF             reduce using rule 54 (statement -> IDENTIFIER LPAREN params RPAREN .)
    IDENTIFIER      reduce using rule 54 (statement -> IDENTIFIER LPAREN params RPAREN .)
    INSTANCE_VAR    reduce using rule 54 (statement -> IDENTIFIER LPAREN params RPAREN .)
    WHILE           reduce using rule 54 (statement -> IDENTIFIER LPAREN params RPAREN .)
    FOR             reduce using rule 54 (statement -> IDENTIFIER LPAREN params RPAREN .)
    PUTS            reduce using rule 54 (statement -> IDENTIFIER LPAREN params RPAREN .)
    LBRACE          reduce using rule 54 (statement -> IDENTIFIER LPAREN params RPAREN .)
    SETNEW          reduce using rule 54 (statement -> IDENTIFIER LPAREN params RPAREN .)
    LBRACKET        reduce using rule 54 (statement -> IDENTIFIER LPAREN params RPAREN .)
    STRING          reduce using rule 54 (statement -> IDENTIFIER LPAREN params RPAREN .)
    INTEGER         reduce using rule 54 (statement -> IDENTIFIER LPAREN params RPAREN .)
    FLOAT           reduce using rule 54 (statement -> IDENTIFIER LPAREN params RPAREN .)
    LPAREN          reduce using rule 54 (statement -> IDENTIFIER LPAREN params RPAREN .)
    END             reduce using rule 54 (statement -> IDENTIFIER LPAREN params RPAREN .)
    $end            reduce using rule 54 (statement -> IDENTIFIER LPAREN params RPAREN .)
    ELSE            reduce using rule 54 (statement -> IDENTIFIER LPAREN params RPAREN .)
    ELSIF           reduce using rule 54 (statement -> IDENTIFIER LPAREN params RPAREN .)


state 96

    (4) params -> params COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 108


state 97

    (39) statement -> WHILE expression statement END .

    GLOBAL_VAR      reduce using rule 39 (statement -> WHILE expression statement END .)
    IF              reduce using rule 39 (statement -> WHILE expression statement END .)
    DEF             reduce using rule 39 (statement -> WHILE expression statement END .)
    IDENTIFIER      reduce using rule 39 (statement -> WHILE expression statement END .)
    INSTANCE_VAR    reduce using rule 39 (statement -> WHILE expression statement END .)
    WHILE           reduce using rule 39 (statement -> WHILE expression statement END .)
    FOR             reduce using rule 39 (statement -> WHILE expression statement END .)
    PUTS            reduce using rule 39 (statement -> WHILE expression statement END .)
    LBRACE          reduce using rule 39 (statement -> WHILE expression statement END .)
    SETNEW          reduce using rule 39 (statement -> WHILE expression statement END .)
    LBRACKET        reduce using rule 39 (statement -> WHILE expression statement END .)
    STRING          reduce using rule 39 (statement -> WHILE expression statement END .)
    INTEGER         reduce using rule 39 (statement -> WHILE expression statement END .)
    FLOAT           reduce using rule 39 (statement -> WHILE expression statement END .)
    LPAREN          reduce using rule 39 (statement -> WHILE expression statement END .)
    END             reduce using rule 39 (statement -> WHILE expression statement END .)
    $end            reduce using rule 39 (statement -> WHILE expression statement END .)
    ELSE            reduce using rule 39 (statement -> WHILE expression statement END .)
    ELSIF           reduce using rule 39 (statement -> WHILE expression statement END .)


state 98

    (55) statement -> FOR IDENTIFIER IN range . statement
    (7) statement -> . local_var
    (8) statement -> . expression
    (11) statement -> . GLOBAL_VAR ASSIGN STRING
    (12) statement -> . GLOBAL_VAR ASSIGN expression
    (23) statement -> . statement statement
    (24) statement -> . IF expression statement END
    (25) statement -> . IF expression statement ELSE statement END
    (26) statement -> . IF expression statement ELSIF expression statement END
    (27) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (34) statement -> . DEF IDENTIFIER statement END
    (35) statement -> . IDENTIFIER
    (36) statement -> . INSTANCE_VAR EQUALS INTEGER
    (37) statement -> . INSTANCE_VAR EQUALS FLOAT
    (39) statement -> . WHILE expression statement END
    (40) statement -> . IDENTIFIER EQUALS GETS
    (53) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (54) statement -> . IDENTIFIER LPAREN params RPAREN
    (55) statement -> . FOR IDENTIFIER IN range statement
    (58) statement -> . PUTS expression
    (9) local_var -> . IDENTIFIER EQUALS INTEGER
    (10) local_var -> . IDENTIFIER EQUALS FLOAT
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    GLOBAL_VAR      shift and go to state 6
    IF              shift and go to state 8
    DEF             shift and go to state 9
    IDENTIFIER      shift and go to state 10
    INSTANCE_VAR    shift and go to state 11
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    statement                      shift and go to state 109
    local_var                      shift and go to state 4
    expression                     shift and go to state 5
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 99

    (56) range -> INTEGER . DOUBLE_DOT INTEGER

    DOUBLE_DOT      shift and go to state 110


state 100

    (57) range -> FLOAT . DOUBLE_DOT FLOAT

    DOUBLE_DOT      shift and go to state 111


state 101

    (18) key_value_pairs -> key_value_pairs COMMA key_value .

    RBRACE          reduce using rule 18 (key_value_pairs -> key_value_pairs COMMA key_value .)
    COMMA           reduce using rule 18 (key_value_pairs -> key_value_pairs COMMA key_value .)


state 102

    (19) key_value -> expression HASH_ROCKET expression .
    (28) expression -> expression . GREATER expression
    (29) expression -> expression . LESS expression
    (30) expression -> expression . GREATER_EQUAL expression
    (31) expression -> expression . LESS_EQUAL expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term

    RBRACE          reduce using rule 19 (key_value -> expression HASH_ROCKET expression .)
    COMMA           reduce using rule 19 (key_value -> expression HASH_ROCKET expression .)
    GREATER         shift and go to state 26
    LESS            shift and go to state 27
    GREATER_EQUAL   shift and go to state 28
    LESS_EQUAL      shift and go to state 29
    EQUALS          shift and go to state 30
    NOT_EQUALS      shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 103

    (38) expression -> SETNEW LPAREN elements RPAREN .

    GREATER         reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    LESS            reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    GREATER_EQUAL   reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    LESS_EQUAL      reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    EQUALS          reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    NOT_EQUALS      reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    PLUS            reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    MINUS           reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    GLOBAL_VAR      reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    IF              reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    DEF             reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    IDENTIFIER      reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    INSTANCE_VAR    reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    WHILE           reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    FOR             reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    PUTS            reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    LBRACE          reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    SETNEW          reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    LBRACKET        reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    STRING          reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    INTEGER         reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    FLOAT           reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    LPAREN          reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    END             reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    $end            reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    RPAREN          reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    ELSE            reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    ELSIF           reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    HASH_ROCKET     reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    RBRACKET        reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    COMMA           reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)
    RBRACE          reduce using rule 38 (expression -> SETNEW LPAREN elements RPAREN .)


state 104

    (52) elements -> elements COMMA expression .
    (28) expression -> expression . GREATER expression
    (29) expression -> expression . LESS expression
    (30) expression -> expression . GREATER_EQUAL expression
    (31) expression -> expression . LESS_EQUAL expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term

    RBRACKET        reduce using rule 52 (elements -> elements COMMA expression .)
    COMMA           reduce using rule 52 (elements -> elements COMMA expression .)
    RPAREN          reduce using rule 52 (elements -> elements COMMA expression .)
    GREATER         shift and go to state 26
    LESS            shift and go to state 27
    GREATER_EQUAL   shift and go to state 28
    LESS_EQUAL      shift and go to state 29
    EQUALS          shift and go to state 30
    NOT_EQUALS      shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 105

    (25) statement -> IF expression statement ELSE statement . END
    (23) statement -> statement . statement
    (7) statement -> . local_var
    (8) statement -> . expression
    (11) statement -> . GLOBAL_VAR ASSIGN STRING
    (12) statement -> . GLOBAL_VAR ASSIGN expression
    (23) statement -> . statement statement
    (24) statement -> . IF expression statement END
    (25) statement -> . IF expression statement ELSE statement END
    (26) statement -> . IF expression statement ELSIF expression statement END
    (27) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (34) statement -> . DEF IDENTIFIER statement END
    (35) statement -> . IDENTIFIER
    (36) statement -> . INSTANCE_VAR EQUALS INTEGER
    (37) statement -> . INSTANCE_VAR EQUALS FLOAT
    (39) statement -> . WHILE expression statement END
    (40) statement -> . IDENTIFIER EQUALS GETS
    (53) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (54) statement -> . IDENTIFIER LPAREN params RPAREN
    (55) statement -> . FOR IDENTIFIER IN range statement
    (58) statement -> . PUTS expression
    (9) local_var -> . IDENTIFIER EQUALS INTEGER
    (10) local_var -> . IDENTIFIER EQUALS FLOAT
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    END             shift and go to state 112
    GLOBAL_VAR      shift and go to state 6
    IF              shift and go to state 8
    DEF             shift and go to state 9
    IDENTIFIER      shift and go to state 10
    INSTANCE_VAR    shift and go to state 11
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 5
    statement                      shift and go to state 25
    local_var                      shift and go to state 4
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 106

    (26) statement -> IF expression statement ELSIF expression . statement END
    (27) statement -> IF expression statement ELSIF expression . statement ELSE statement END
    (28) expression -> expression . GREATER expression
    (29) expression -> expression . LESS expression
    (30) expression -> expression . GREATER_EQUAL expression
    (31) expression -> expression . LESS_EQUAL expression
    (32) expression -> expression . EQUALS expression
    (33) expression -> expression . NOT_EQUALS expression
    (44) expression -> expression . PLUS term
    (45) expression -> expression . MINUS term
    (7) statement -> . local_var
    (8) statement -> . expression
    (11) statement -> . GLOBAL_VAR ASSIGN STRING
    (12) statement -> . GLOBAL_VAR ASSIGN expression
    (23) statement -> . statement statement
    (24) statement -> . IF expression statement END
    (25) statement -> . IF expression statement ELSE statement END
    (26) statement -> . IF expression statement ELSIF expression statement END
    (27) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (34) statement -> . DEF IDENTIFIER statement END
    (35) statement -> . IDENTIFIER
    (36) statement -> . INSTANCE_VAR EQUALS INTEGER
    (37) statement -> . INSTANCE_VAR EQUALS FLOAT
    (39) statement -> . WHILE expression statement END
    (40) statement -> . IDENTIFIER EQUALS GETS
    (53) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (54) statement -> . IDENTIFIER LPAREN params RPAREN
    (55) statement -> . FOR IDENTIFIER IN range statement
    (58) statement -> . PUTS expression
    (9) local_var -> . IDENTIFIER EQUALS INTEGER
    (10) local_var -> . IDENTIFIER EQUALS FLOAT
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    GREATER         shift and go to state 26
    LESS            shift and go to state 27
    GREATER_EQUAL   shift and go to state 28
    LESS_EQUAL      shift and go to state 29
    EQUALS          shift and go to state 30
    NOT_EQUALS      shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    GLOBAL_VAR      shift and go to state 6
    IF              shift and go to state 8
    DEF             shift and go to state 9
    IDENTIFIER      shift and go to state 10
    INSTANCE_VAR    shift and go to state 11
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 5
    statement                      shift and go to state 113
    term                           shift and go to state 20
    local_var                      shift and go to state 4
    factor                         shift and go to state 22

state 107

    (53) statement -> DEF IDENTIFIER LPAREN params RPAREN . statement END
    (7) statement -> . local_var
    (8) statement -> . expression
    (11) statement -> . GLOBAL_VAR ASSIGN STRING
    (12) statement -> . GLOBAL_VAR ASSIGN expression
    (23) statement -> . statement statement
    (24) statement -> . IF expression statement END
    (25) statement -> . IF expression statement ELSE statement END
    (26) statement -> . IF expression statement ELSIF expression statement END
    (27) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (34) statement -> . DEF IDENTIFIER statement END
    (35) statement -> . IDENTIFIER
    (36) statement -> . INSTANCE_VAR EQUALS INTEGER
    (37) statement -> . INSTANCE_VAR EQUALS FLOAT
    (39) statement -> . WHILE expression statement END
    (40) statement -> . IDENTIFIER EQUALS GETS
    (53) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (54) statement -> . IDENTIFIER LPAREN params RPAREN
    (55) statement -> . FOR IDENTIFIER IN range statement
    (58) statement -> . PUTS expression
    (9) local_var -> . IDENTIFIER EQUALS INTEGER
    (10) local_var -> . IDENTIFIER EQUALS FLOAT
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    GLOBAL_VAR      shift and go to state 6
    IF              shift and go to state 8
    DEF             shift and go to state 9
    IDENTIFIER      shift and go to state 10
    INSTANCE_VAR    shift and go to state 11
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    statement                      shift and go to state 114
    local_var                      shift and go to state 4
    expression                     shift and go to state 5
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 108

    (4) params -> params COMMA IDENTIFIER .

    RPAREN          reduce using rule 4 (params -> params COMMA IDENTIFIER .)
    COMMA           reduce using rule 4 (params -> params COMMA IDENTIFIER .)


state 109

    (55) statement -> FOR IDENTIFIER IN range statement .
    (23) statement -> statement . statement
    (7) statement -> . local_var
    (8) statement -> . expression
    (11) statement -> . GLOBAL_VAR ASSIGN STRING
    (12) statement -> . GLOBAL_VAR ASSIGN expression
    (23) statement -> . statement statement
    (24) statement -> . IF expression statement END
    (25) statement -> . IF expression statement ELSE statement END
    (26) statement -> . IF expression statement ELSIF expression statement END
    (27) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (34) statement -> . DEF IDENTIFIER statement END
    (35) statement -> . IDENTIFIER
    (36) statement -> . INSTANCE_VAR EQUALS INTEGER
    (37) statement -> . INSTANCE_VAR EQUALS FLOAT
    (39) statement -> . WHILE expression statement END
    (40) statement -> . IDENTIFIER EQUALS GETS
    (53) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (54) statement -> . IDENTIFIER LPAREN params RPAREN
    (55) statement -> . FOR IDENTIFIER IN range statement
    (58) statement -> . PUTS expression
    (9) local_var -> . IDENTIFIER EQUALS INTEGER
    (10) local_var -> . IDENTIFIER EQUALS FLOAT
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for SETNEW resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    END             reduce using rule 55 (statement -> FOR IDENTIFIER IN range statement .)
    $end            reduce using rule 55 (statement -> FOR IDENTIFIER IN range statement .)
    ELSE            reduce using rule 55 (statement -> FOR IDENTIFIER IN range statement .)
    ELSIF           reduce using rule 55 (statement -> FOR IDENTIFIER IN range statement .)
    GLOBAL_VAR      shift and go to state 6
    IF              shift and go to state 8
    DEF             shift and go to state 9
    IDENTIFIER      shift and go to state 10
    INSTANCE_VAR    shift and go to state 11
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

  ! GLOBAL_VAR      [ reduce using rule 55 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! IF              [ reduce using rule 55 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! DEF             [ reduce using rule 55 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! IDENTIFIER      [ reduce using rule 55 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! INSTANCE_VAR    [ reduce using rule 55 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! WHILE           [ reduce using rule 55 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! FOR             [ reduce using rule 55 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! PUTS            [ reduce using rule 55 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! LBRACE          [ reduce using rule 55 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! SETNEW          [ reduce using rule 55 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! LBRACKET        [ reduce using rule 55 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! STRING          [ reduce using rule 55 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! INTEGER         [ reduce using rule 55 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! FLOAT           [ reduce using rule 55 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! LPAREN          [ reduce using rule 55 (statement -> FOR IDENTIFIER IN range statement .) ]

    statement                      shift and go to state 25
    local_var                      shift and go to state 4
    expression                     shift and go to state 5
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 110

    (56) range -> INTEGER DOUBLE_DOT . INTEGER

    INTEGER         shift and go to state 115


state 111

    (57) range -> FLOAT DOUBLE_DOT . FLOAT

    FLOAT           shift and go to state 116


state 112

    (25) statement -> IF expression statement ELSE statement END .

    GLOBAL_VAR      reduce using rule 25 (statement -> IF expression statement ELSE statement END .)
    IF              reduce using rule 25 (statement -> IF expression statement ELSE statement END .)
    DEF             reduce using rule 25 (statement -> IF expression statement ELSE statement END .)
    IDENTIFIER      reduce using rule 25 (statement -> IF expression statement ELSE statement END .)
    INSTANCE_VAR    reduce using rule 25 (statement -> IF expression statement ELSE statement END .)
    WHILE           reduce using rule 25 (statement -> IF expression statement ELSE statement END .)
    FOR             reduce using rule 25 (statement -> IF expression statement ELSE statement END .)
    PUTS            reduce using rule 25 (statement -> IF expression statement ELSE statement END .)
    LBRACE          reduce using rule 25 (statement -> IF expression statement ELSE statement END .)
    SETNEW          reduce using rule 25 (statement -> IF expression statement ELSE statement END .)
    LBRACKET        reduce using rule 25 (statement -> IF expression statement ELSE statement END .)
    STRING          reduce using rule 25 (statement -> IF expression statement ELSE statement END .)
    INTEGER         reduce using rule 25 (statement -> IF expression statement ELSE statement END .)
    FLOAT           reduce using rule 25 (statement -> IF expression statement ELSE statement END .)
    LPAREN          reduce using rule 25 (statement -> IF expression statement ELSE statement END .)
    END             reduce using rule 25 (statement -> IF expression statement ELSE statement END .)
    $end            reduce using rule 25 (statement -> IF expression statement ELSE statement END .)
    ELSE            reduce using rule 25 (statement -> IF expression statement ELSE statement END .)
    ELSIF           reduce using rule 25 (statement -> IF expression statement ELSE statement END .)


state 113

    (26) statement -> IF expression statement ELSIF expression statement . END
    (27) statement -> IF expression statement ELSIF expression statement . ELSE statement END
    (23) statement -> statement . statement
    (7) statement -> . local_var
    (8) statement -> . expression
    (11) statement -> . GLOBAL_VAR ASSIGN STRING
    (12) statement -> . GLOBAL_VAR ASSIGN expression
    (23) statement -> . statement statement
    (24) statement -> . IF expression statement END
    (25) statement -> . IF expression statement ELSE statement END
    (26) statement -> . IF expression statement ELSIF expression statement END
    (27) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (34) statement -> . DEF IDENTIFIER statement END
    (35) statement -> . IDENTIFIER
    (36) statement -> . INSTANCE_VAR EQUALS INTEGER
    (37) statement -> . INSTANCE_VAR EQUALS FLOAT
    (39) statement -> . WHILE expression statement END
    (40) statement -> . IDENTIFIER EQUALS GETS
    (53) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (54) statement -> . IDENTIFIER LPAREN params RPAREN
    (55) statement -> . FOR IDENTIFIER IN range statement
    (58) statement -> . PUTS expression
    (9) local_var -> . IDENTIFIER EQUALS INTEGER
    (10) local_var -> . IDENTIFIER EQUALS FLOAT
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    END             shift and go to state 117
    ELSE            shift and go to state 118
    GLOBAL_VAR      shift and go to state 6
    IF              shift and go to state 8
    DEF             shift and go to state 9
    IDENTIFIER      shift and go to state 10
    INSTANCE_VAR    shift and go to state 11
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 5
    statement                      shift and go to state 25
    local_var                      shift and go to state 4
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 114

    (53) statement -> DEF IDENTIFIER LPAREN params RPAREN statement . END
    (23) statement -> statement . statement
    (7) statement -> . local_var
    (8) statement -> . expression
    (11) statement -> . GLOBAL_VAR ASSIGN STRING
    (12) statement -> . GLOBAL_VAR ASSIGN expression
    (23) statement -> . statement statement
    (24) statement -> . IF expression statement END
    (25) statement -> . IF expression statement ELSE statement END
    (26) statement -> . IF expression statement ELSIF expression statement END
    (27) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (34) statement -> . DEF IDENTIFIER statement END
    (35) statement -> . IDENTIFIER
    (36) statement -> . INSTANCE_VAR EQUALS INTEGER
    (37) statement -> . INSTANCE_VAR EQUALS FLOAT
    (39) statement -> . WHILE expression statement END
    (40) statement -> . IDENTIFIER EQUALS GETS
    (53) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (54) statement -> . IDENTIFIER LPAREN params RPAREN
    (55) statement -> . FOR IDENTIFIER IN range statement
    (58) statement -> . PUTS expression
    (9) local_var -> . IDENTIFIER EQUALS INTEGER
    (10) local_var -> . IDENTIFIER EQUALS FLOAT
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    END             shift and go to state 119
    GLOBAL_VAR      shift and go to state 6
    IF              shift and go to state 8
    DEF             shift and go to state 9
    IDENTIFIER      shift and go to state 10
    INSTANCE_VAR    shift and go to state 11
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    statement                      shift and go to state 25
    local_var                      shift and go to state 4
    expression                     shift and go to state 5
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 115

    (56) range -> INTEGER DOUBLE_DOT INTEGER .

    GLOBAL_VAR      reduce using rule 56 (range -> INTEGER DOUBLE_DOT INTEGER .)
    IF              reduce using rule 56 (range -> INTEGER DOUBLE_DOT INTEGER .)
    DEF             reduce using rule 56 (range -> INTEGER DOUBLE_DOT INTEGER .)
    IDENTIFIER      reduce using rule 56 (range -> INTEGER DOUBLE_DOT INTEGER .)
    INSTANCE_VAR    reduce using rule 56 (range -> INTEGER DOUBLE_DOT INTEGER .)
    WHILE           reduce using rule 56 (range -> INTEGER DOUBLE_DOT INTEGER .)
    FOR             reduce using rule 56 (range -> INTEGER DOUBLE_DOT INTEGER .)
    PUTS            reduce using rule 56 (range -> INTEGER DOUBLE_DOT INTEGER .)
    LBRACE          reduce using rule 56 (range -> INTEGER DOUBLE_DOT INTEGER .)
    SETNEW          reduce using rule 56 (range -> INTEGER DOUBLE_DOT INTEGER .)
    LBRACKET        reduce using rule 56 (range -> INTEGER DOUBLE_DOT INTEGER .)
    STRING          reduce using rule 56 (range -> INTEGER DOUBLE_DOT INTEGER .)
    INTEGER         reduce using rule 56 (range -> INTEGER DOUBLE_DOT INTEGER .)
    FLOAT           reduce using rule 56 (range -> INTEGER DOUBLE_DOT INTEGER .)
    LPAREN          reduce using rule 56 (range -> INTEGER DOUBLE_DOT INTEGER .)


state 116

    (57) range -> FLOAT DOUBLE_DOT FLOAT .

    GLOBAL_VAR      reduce using rule 57 (range -> FLOAT DOUBLE_DOT FLOAT .)
    IF              reduce using rule 57 (range -> FLOAT DOUBLE_DOT FLOAT .)
    DEF             reduce using rule 57 (range -> FLOAT DOUBLE_DOT FLOAT .)
    IDENTIFIER      reduce using rule 57 (range -> FLOAT DOUBLE_DOT FLOAT .)
    INSTANCE_VAR    reduce using rule 57 (range -> FLOAT DOUBLE_DOT FLOAT .)
    WHILE           reduce using rule 57 (range -> FLOAT DOUBLE_DOT FLOAT .)
    FOR             reduce using rule 57 (range -> FLOAT DOUBLE_DOT FLOAT .)
    PUTS            reduce using rule 57 (range -> FLOAT DOUBLE_DOT FLOAT .)
    LBRACE          reduce using rule 57 (range -> FLOAT DOUBLE_DOT FLOAT .)
    SETNEW          reduce using rule 57 (range -> FLOAT DOUBLE_DOT FLOAT .)
    LBRACKET        reduce using rule 57 (range -> FLOAT DOUBLE_DOT FLOAT .)
    STRING          reduce using rule 57 (range -> FLOAT DOUBLE_DOT FLOAT .)
    INTEGER         reduce using rule 57 (range -> FLOAT DOUBLE_DOT FLOAT .)
    FLOAT           reduce using rule 57 (range -> FLOAT DOUBLE_DOT FLOAT .)
    LPAREN          reduce using rule 57 (range -> FLOAT DOUBLE_DOT FLOAT .)


state 117

    (26) statement -> IF expression statement ELSIF expression statement END .

    GLOBAL_VAR      reduce using rule 26 (statement -> IF expression statement ELSIF expression statement END .)
    IF              reduce using rule 26 (statement -> IF expression statement ELSIF expression statement END .)
    DEF             reduce using rule 26 (statement -> IF expression statement ELSIF expression statement END .)
    IDENTIFIER      reduce using rule 26 (statement -> IF expression statement ELSIF expression statement END .)
    INSTANCE_VAR    reduce using rule 26 (statement -> IF expression statement ELSIF expression statement END .)
    WHILE           reduce using rule 26 (statement -> IF expression statement ELSIF expression statement END .)
    FOR             reduce using rule 26 (statement -> IF expression statement ELSIF expression statement END .)
    PUTS            reduce using rule 26 (statement -> IF expression statement ELSIF expression statement END .)
    LBRACE          reduce using rule 26 (statement -> IF expression statement ELSIF expression statement END .)
    SETNEW          reduce using rule 26 (statement -> IF expression statement ELSIF expression statement END .)
    LBRACKET        reduce using rule 26 (statement -> IF expression statement ELSIF expression statement END .)
    STRING          reduce using rule 26 (statement -> IF expression statement ELSIF expression statement END .)
    INTEGER         reduce using rule 26 (statement -> IF expression statement ELSIF expression statement END .)
    FLOAT           reduce using rule 26 (statement -> IF expression statement ELSIF expression statement END .)
    LPAREN          reduce using rule 26 (statement -> IF expression statement ELSIF expression statement END .)
    END             reduce using rule 26 (statement -> IF expression statement ELSIF expression statement END .)
    $end            reduce using rule 26 (statement -> IF expression statement ELSIF expression statement END .)
    ELSE            reduce using rule 26 (statement -> IF expression statement ELSIF expression statement END .)
    ELSIF           reduce using rule 26 (statement -> IF expression statement ELSIF expression statement END .)


state 118

    (27) statement -> IF expression statement ELSIF expression statement ELSE . statement END
    (7) statement -> . local_var
    (8) statement -> . expression
    (11) statement -> . GLOBAL_VAR ASSIGN STRING
    (12) statement -> . GLOBAL_VAR ASSIGN expression
    (23) statement -> . statement statement
    (24) statement -> . IF expression statement END
    (25) statement -> . IF expression statement ELSE statement END
    (26) statement -> . IF expression statement ELSIF expression statement END
    (27) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (34) statement -> . DEF IDENTIFIER statement END
    (35) statement -> . IDENTIFIER
    (36) statement -> . INSTANCE_VAR EQUALS INTEGER
    (37) statement -> . INSTANCE_VAR EQUALS FLOAT
    (39) statement -> . WHILE expression statement END
    (40) statement -> . IDENTIFIER EQUALS GETS
    (53) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (54) statement -> . IDENTIFIER LPAREN params RPAREN
    (55) statement -> . FOR IDENTIFIER IN range statement
    (58) statement -> . PUTS expression
    (9) local_var -> . IDENTIFIER EQUALS INTEGER
    (10) local_var -> . IDENTIFIER EQUALS FLOAT
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    GLOBAL_VAR      shift and go to state 6
    IF              shift and go to state 8
    DEF             shift and go to state 9
    IDENTIFIER      shift and go to state 10
    INSTANCE_VAR    shift and go to state 11
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 5
    statement                      shift and go to state 120
    local_var                      shift and go to state 4
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 119

    (53) statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .

    GLOBAL_VAR      reduce using rule 53 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    IF              reduce using rule 53 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    DEF             reduce using rule 53 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    IDENTIFIER      reduce using rule 53 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    INSTANCE_VAR    reduce using rule 53 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    WHILE           reduce using rule 53 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    FOR             reduce using rule 53 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    PUTS            reduce using rule 53 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    LBRACE          reduce using rule 53 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    SETNEW          reduce using rule 53 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    LBRACKET        reduce using rule 53 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    STRING          reduce using rule 53 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    INTEGER         reduce using rule 53 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    FLOAT           reduce using rule 53 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    LPAREN          reduce using rule 53 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    END             reduce using rule 53 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    $end            reduce using rule 53 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    ELSE            reduce using rule 53 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    ELSIF           reduce using rule 53 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)


state 120

    (27) statement -> IF expression statement ELSIF expression statement ELSE statement . END
    (23) statement -> statement . statement
    (7) statement -> . local_var
    (8) statement -> . expression
    (11) statement -> . GLOBAL_VAR ASSIGN STRING
    (12) statement -> . GLOBAL_VAR ASSIGN expression
    (23) statement -> . statement statement
    (24) statement -> . IF expression statement END
    (25) statement -> . IF expression statement ELSE statement END
    (26) statement -> . IF expression statement ELSIF expression statement END
    (27) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (34) statement -> . DEF IDENTIFIER statement END
    (35) statement -> . IDENTIFIER
    (36) statement -> . INSTANCE_VAR EQUALS INTEGER
    (37) statement -> . INSTANCE_VAR EQUALS FLOAT
    (39) statement -> . WHILE expression statement END
    (40) statement -> . IDENTIFIER EQUALS GETS
    (53) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (54) statement -> . IDENTIFIER LPAREN params RPAREN
    (55) statement -> . FOR IDENTIFIER IN range statement
    (58) statement -> . PUTS expression
    (9) local_var -> . IDENTIFIER EQUALS INTEGER
    (10) local_var -> . IDENTIFIER EQUALS FLOAT
    (15) expression -> . LBRACE key_value_pairs RBRACE
    (16) expression -> . LBRACE RBRACE
    (20) expression -> . IDENTIFIER
    (21) expression -> . GLOBAL_VAR
    (22) expression -> . INSTANCE_VAR
    (28) expression -> . expression GREATER expression
    (29) expression -> . expression LESS expression
    (30) expression -> . expression GREATER_EQUAL expression
    (31) expression -> . expression LESS_EQUAL expression
    (32) expression -> . expression EQUALS expression
    (33) expression -> . expression NOT_EQUALS expression
    (38) expression -> . SETNEW LPAREN elements RPAREN
    (41) expression -> . term
    (44) expression -> . expression PLUS term
    (45) expression -> . expression MINUS term
    (50) expression -> . LBRACKET elements RBRACKET
    (42) term -> . term DIVIDE factor
    (43) term -> . term TIMES factor
    (46) term -> . factor
    (13) factor -> . factor POWER factor
    (14) factor -> . STRING
    (47) factor -> . INTEGER
    (48) factor -> . FLOAT
    (49) factor -> . LPAREN expression RPAREN

    END             shift and go to state 121
    GLOBAL_VAR      shift and go to state 6
    IF              shift and go to state 8
    DEF             shift and go to state 9
    IDENTIFIER      shift and go to state 10
    INSTANCE_VAR    shift and go to state 11
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    SETNEW          shift and go to state 19
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 7
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    LPAREN          shift and go to state 15

    expression                     shift and go to state 5
    statement                      shift and go to state 25
    local_var                      shift and go to state 4
    term                           shift and go to state 20
    factor                         shift and go to state 22

state 121

    (27) statement -> IF expression statement ELSIF expression statement ELSE statement END .

    GLOBAL_VAR      reduce using rule 27 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    IF              reduce using rule 27 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    DEF             reduce using rule 27 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    IDENTIFIER      reduce using rule 27 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    INSTANCE_VAR    reduce using rule 27 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    WHILE           reduce using rule 27 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    FOR             reduce using rule 27 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    PUTS            reduce using rule 27 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    LBRACE          reduce using rule 27 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    SETNEW          reduce using rule 27 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    LBRACKET        reduce using rule 27 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    STRING          reduce using rule 27 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    INTEGER         reduce using rule 27 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    FLOAT           reduce using rule 27 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    LPAREN          reduce using rule 27 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    END             reduce using rule 27 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    $end            reduce using rule 27 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    ELSE            reduce using rule 27 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    ELSIF           reduce using rule 27 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for GLOBAL_VAR in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for DEF in state 3 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 3 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 3 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 3 resolved as shift
WARNING: shift/reduce conflict for SETNEW in state 3 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 3 resolved as shift
WARNING: shift/reduce conflict for STRING in state 3 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 3 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 3 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 3 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 10 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 10 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 10 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 11 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 24 resolved as shift
WARNING: shift/reduce conflict for IF in state 24 resolved as shift
WARNING: shift/reduce conflict for DEF in state 24 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 24 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 24 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 24 resolved as shift
WARNING: shift/reduce conflict for FOR in state 24 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 24 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 24 resolved as shift
WARNING: shift/reduce conflict for SETNEW in state 24 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 24 resolved as shift
WARNING: shift/reduce conflict for STRING in state 24 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 24 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 24 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 24 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 25 resolved as shift
WARNING: shift/reduce conflict for IF in state 25 resolved as shift
WARNING: shift/reduce conflict for DEF in state 25 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 25 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 25 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 25 resolved as shift
WARNING: shift/reduce conflict for FOR in state 25 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 25 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 25 resolved as shift
WARNING: shift/reduce conflict for SETNEW in state 25 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 25 resolved as shift
WARNING: shift/reduce conflict for STRING in state 25 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 25 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 25 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 25 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 109 resolved as shift
WARNING: shift/reduce conflict for IF in state 109 resolved as shift
WARNING: shift/reduce conflict for DEF in state 109 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 109 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 109 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 109 resolved as shift
WARNING: shift/reduce conflict for FOR in state 109 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 109 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 109 resolved as shift
WARNING: shift/reduce conflict for SETNEW in state 109 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 109 resolved as shift
WARNING: shift/reduce conflict for STRING in state 109 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 109 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 109 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 109 resolved as shift
WARNING: reduce/reduce conflict in state 10 resolved using rule (expression -> IDENTIFIER)
WARNING: rejected rule (statement -> IDENTIFIER) in state 10
WARNING: reduce/reduce conflict in state 65 resolved using rule (statement -> GLOBAL_VAR ASSIGN STRING)
WARNING: rejected rule (factor -> STRING) in state 65
WARNING: reduce/reduce conflict in state 93 resolved using rule (params -> IDENTIFIER)
WARNING: rejected rule (expression -> IDENTIFIER) in state 93
WARNING: Rule (statement -> IDENTIFIER) is never reduced
