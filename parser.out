Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BEGIN
    BITWISE_AND
    BREAK
    CASE
    CLASS_VAR
    COMMENT
    CONSTANT
    DIVIDE_ASSIGN
    DO
    ENSURE
    FALSE
    FLOOR_DIVIDE
    LAMBDA
    MINUS_ASSIGN
    MOD
    MODULE
    MOD_ASSIGN
    NEXT
    NIL
    NOT
    OR
    PIPE
    PLUS_ASSIGN
    POWER_ASSIGN
    PROC
    QUESTION_MARK
    RAISE
    RANGE
    REDO
    REQUIRE
    RESCUE
    RETRY
    RETURN
    SELF
    SEMICOLON
    SPACESHIP
    SUPER
    TIMES_ASSIGN
    TRUE
    UNTIL
    WHEN
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> statements END
Rule 2     program -> statements
Rule 3     params -> IDENTIFIER
Rule 4     params -> params COMMA IDENTIFIER
Rule 5     statements -> statement
Rule 6     statements -> statements statement
Rule 7     statement -> expression
Rule 8     statement -> IDENTIFIER ASSIGN INTEGER
Rule 9     statement -> IDENTIFIER ASSIGN FLOAT
Rule 10    statement -> GLOBAL_VAR ASSIGN STRING
Rule 11    statement -> GLOBAL_VAR ASSIGN expression
Rule 12    factor -> factor POWER factor
Rule 13    factor -> STRING
Rule 14    expression -> LBRACE key_value_pairs RBRACE
Rule 15    expression -> LBRACE RBRACE
Rule 16    key_value_pairs -> key_value
Rule 17    key_value_pairs -> key_value_pairs COMMA key_value
Rule 18    key_value -> expression HASH_ROCKET expression
Rule 19    expression -> IDENTIFIER
Rule 20    expression -> GLOBAL_VAR
Rule 21    expression -> INSTANCE_VAR
Rule 22    statement -> statement statement
Rule 23    statement -> IF expression statement END
Rule 24    statement -> IF expression statement ELSE statement END
Rule 25    statement -> IF expression statement ELSIF expression statement END
Rule 26    statement -> IF expression statement ELSIF expression statement ELSE statement END
Rule 27    expression -> expression GREATER expression
Rule 28    expression -> expression LESS expression
Rule 29    expression -> expression GREATER_EQUAL expression
Rule 30    expression -> expression LESS_EQUAL expression
Rule 31    expression -> expression EQUALS expression
Rule 32    expression -> expression NOT_EQUALS expression
Rule 33    statement -> DEF IDENTIFIER statement END
Rule 34    statement -> IDENTIFIER
Rule 35    statement -> CLASS IDENTIFIER statement END
Rule 36    statement -> CLASS IDENTIFIER END
Rule 37    expression -> IDENTIFIER DOT NEW
Rule 38    expression -> IDENTIFIER DOT NEW LPAREN RPAREN
Rule 39    statement -> IDENTIFIER ASSIGN expression
Rule 40    statement -> INSTANCE_VAR ASSIGN INTEGER
Rule 41    statement -> INSTANCE_VAR ASSIGN FLOAT
Rule 42    statement -> SETNEW LPAREN optional_elements RPAREN
Rule 43    optional_elements -> elements
Rule 44    optional_elements -> empty
Rule 45    empty -> <empty>
Rule 46    statement -> WHILE expression statement END
Rule 47    statement -> IDENTIFIER ASSIGN GETS
Rule 48    statement -> DEF ID LPAREN params RPAREN statement END
Rule 49    statement -> ID LPAREN params RPAREN
Rule 50    expression -> term
Rule 51    term -> factor DIVIDE factor
Rule 52    term -> factor TIMES factor
Rule 53    expression -> expression PLUS factor
Rule 54    expression -> expression MINUS factor
Rule 55    factor -> INTEGER
Rule 56    factor -> FLOAT
Rule 57    factor -> LPAREN expression RPAREN
Rule 58    expression -> LBRACKET elements RBRACKET
Rule 59    elements -> expression
Rule 60    elements -> elements COMMA expression
Rule 61    statement -> DEF IDENTIFIER LPAREN params RPAREN statement END
Rule 62    statement -> IDENTIFIER LPAREN params RPAREN
Rule 63    statement -> FOR IDENTIFIER IN range statement
Rule 64    range -> INTEGER DOUBLE_DOT INTEGER
Rule 65    range -> FLOAT DOUBLE_DOT FLOAT
Rule 66    statement -> PUTS statement

Terminals, with rules where they appear

AND                  : 
ASSIGN               : 8 9 10 11 39 40 41 47
BEGIN                : 
BITWISE_AND          : 
BREAK                : 
CASE                 : 
CLASS                : 35 36
CLASS_VAR            : 
COMMA                : 4 17 60
COMMENT              : 
CONSTANT             : 
DEF                  : 33 48 61
DIVIDE               : 51
DIVIDE_ASSIGN        : 
DO                   : 
DOT                  : 37 38
DOUBLE_DOT           : 64 65
ELSE                 : 24 26
ELSIF                : 25 26
END                  : 1 23 24 25 26 33 35 36 46 48 61
ENSURE               : 
EQUALS               : 31
FALSE                : 
FLOAT                : 9 41 56 65 65
FLOOR_DIVIDE         : 
FOR                  : 63
GETS                 : 47
GLOBAL_VAR           : 10 11 20
GREATER              : 27
GREATER_EQUAL        : 29
HASH_ROCKET          : 18
IDENTIFIER           : 3 4 8 9 19 33 34 35 36 37 38 39 47 61 62 63
IF                   : 23 24 25 26
IN                   : 63
INSTANCE_VAR         : 21 40 41
INTEGER              : 8 40 55 64 64
LAMBDA               : 
LBRACE               : 14 15
LBRACKET             : 58
LESS                 : 28
LESS_EQUAL           : 30
LPAREN               : 38 42 48 49 57 61 62
MINUS                : 54
MINUS_ASSIGN         : 
MOD                  : 
MODULE               : 
MOD_ASSIGN           : 
NEW                  : 37 38
NEXT                 : 
NIL                  : 
NOT                  : 
NOT_EQUALS           : 32
OR                   : 
PIPE                 : 
PLUS                 : 53
PLUS_ASSIGN          : 
POWER                : 12
POWER_ASSIGN         : 
PROC                 : 
PUTS                 : 66
QUESTION_MARK        : 
RAISE                : 
RANGE                : 
RBRACE               : 14 15
RBRACKET             : 58
REDO                 : 
REQUIRE              : 
RESCUE               : 
RETRY                : 
RETURN               : 
RPAREN               : 38 42 48 49 57 61 62
SELF                 : 
SEMICOLON            : 
SETNEW               : 42
SPACESHIP            : 
STRING               : 10 13
SUPER                : 
TIMES                : 52
TIMES_ASSIGN         : 
TRUE                 : 
UNTIL                : 
WHEN                 : 
WHILE                : 46
YIELD                : 
error                : 

Nonterminals, with rules where they appear

ID                   : 48 49
elements             : 43 58 60
empty                : 44
expression           : 7 11 18 18 23 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 39 46 53 54 57 59 60
factor               : 12 12 51 51 52 52 53 54
key_value            : 16 17
key_value_pairs      : 14 17
optional_elements    : 42
params               : 4 48 49 61 62
program              : 0
range                : 63
statement            : 5 6 22 22 23 24 24 25 25 26 26 26 33 35 46 48 61 63 66
statements           : 1 2 6
term                 : 50

Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BEGIN
    BITWISE_AND
    BREAK
    CASE
    CLASS
    CLASS_VAR
    COMMENT
    CONSTANT
    DIVIDE_ASSIGN
    DO
    DOT
    ENSURE
    FALSE
    FLOOR_DIVIDE
    LAMBDA
    MINUS_ASSIGN
    MOD
    MODULE
    MOD_ASSIGN
    NEW
    NEXT
    NIL
    NOT
    OR
    PIPE
    PLUS_ASSIGN
    POWER_ASSIGN
    PROC
    QUESTION_MARK
    RAISE
    RANGE
    REDO
    REQUIRE
    RESCUE
    RETRY
    RETURN
    SELF
    SEMICOLON
    SPACESHIP
    SUPER
    TIMES_ASSIGN
    TRUE
    UNTIL
    WHEN
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> statements END
Rule 2     program -> statements
Rule 3     params -> IDENTIFIER
Rule 4     params -> params COMMA IDENTIFIER
Rule 5     statements -> statement
Rule 6     statements -> statements statement
Rule 7     statement -> expression
Rule 8     statement -> IDENTIFIER ASSIGN INTEGER
Rule 9     statement -> IDENTIFIER ASSIGN FLOAT
Rule 10    statement -> GLOBAL_VAR ASSIGN STRING
Rule 11    statement -> GLOBAL_VAR ASSIGN expression
Rule 12    factor -> factor POWER factor
Rule 13    factor -> STRING
Rule 14    expression -> LBRACE key_value_pairs RBRACE
Rule 15    expression -> LBRACE RBRACE
Rule 16    key_value_pairs -> key_value
Rule 17    key_value_pairs -> key_value_pairs COMMA key_value
Rule 18    key_value -> expression HASH_ROCKET expression
Rule 19    expression -> IDENTIFIER
Rule 20    expression -> GLOBAL_VAR
Rule 21    expression -> INSTANCE_VAR
Rule 22    statement -> statement statement
Rule 23    statement -> IF expression statement END
Rule 24    statement -> IF expression statement ELSE statement END
Rule 25    statement -> IF expression statement ELSIF expression statement END
Rule 26    statement -> IF expression statement ELSIF expression statement ELSE statement END
Rule 27    expression -> expression GREATER expression
Rule 28    expression -> expression LESS expression
Rule 29    expression -> expression GREATER_EQUAL expression
Rule 30    expression -> expression LESS_EQUAL expression
Rule 31    expression -> expression EQUALS expression
Rule 32    expression -> expression NOT_EQUALS expression
Rule 33    statement -> DEF IDENTIFIER statement END
Rule 34    statement -> IDENTIFIER
Rule 35    statement -> INSTANCE_VAR ASSIGN INTEGER
Rule 36    statement -> INSTANCE_VAR ASSIGN FLOAT
Rule 37    statement -> SETNEW LPAREN optional_elements RPAREN
Rule 38    optional_elements -> elements
Rule 39    optional_elements -> empty
Rule 40    empty -> <empty>
Rule 41    statement -> WHILE expression statement END
Rule 42    statement -> IDENTIFIER ASSIGN GETS
Rule 43    statement -> DEF IDENTIFIER LPAREN params RPAREN statement END
Rule 44    statement -> IDENTIFIER LPAREN params RPAREN
Rule 45    expression -> term
Rule 46    term -> factor DIVIDE factor
Rule 47    term -> factor TIMES factor
Rule 48    expression -> expression PLUS factor
Rule 49    expression -> expression MINUS factor
Rule 50    factor -> INTEGER
Rule 51    factor -> FLOAT
Rule 52    factor -> LPAREN expression RPAREN
Rule 53    expression -> LBRACKET elements RBRACKET
Rule 54    elements -> expression
Rule 55    elements -> elements COMMA expression
Rule 56    statement -> FOR IDENTIFIER IN range statement
Rule 57    range -> INTEGER DOUBLE_DOT INTEGER
Rule 58    range -> FLOAT DOUBLE_DOT FLOAT
Rule 59    statement -> PUTS statement

Terminals, with rules where they appear

AND                  : 
ASSIGN               : 8 9 10 11 35 36 42
BEGIN                : 
BITWISE_AND          : 
BREAK                : 
CASE                 : 
CLASS                : 
CLASS_VAR            : 
COMMA                : 4 17 55
COMMENT              : 
CONSTANT             : 
DEF                  : 33 43
DIVIDE               : 46
DIVIDE_ASSIGN        : 
DO                   : 
DOT                  : 
DOUBLE_DOT           : 57 58
ELSE                 : 24 26
ELSIF                : 25 26
END                  : 1 23 24 25 26 33 41 43
ENSURE               : 
EQUALS               : 31
FALSE                : 
FLOAT                : 9 36 51 58 58
FLOOR_DIVIDE         : 
FOR                  : 56
GETS                 : 42
GLOBAL_VAR           : 10 11 20
GREATER              : 27
GREATER_EQUAL        : 29
HASH_ROCKET          : 18
IDENTIFIER           : 3 4 8 9 19 33 34 42 43 44 56
IF                   : 23 24 25 26
IN                   : 56
INSTANCE_VAR         : 21 35 36
INTEGER              : 8 35 50 57 57
LAMBDA               : 
LBRACE               : 14 15
LBRACKET             : 53
LESS                 : 28
LESS_EQUAL           : 30
LPAREN               : 37 43 44 52
MINUS                : 49
MINUS_ASSIGN         : 
MOD                  : 
MODULE               : 
MOD_ASSIGN           : 
NEW                  : 
NEXT                 : 
NIL                  : 
NOT                  : 
NOT_EQUALS           : 32
OR                   : 
PIPE                 : 
PLUS                 : 48
PLUS_ASSIGN          : 
POWER                : 12
POWER_ASSIGN         : 
PROC                 : 
PUTS                 : 59
QUESTION_MARK        : 
RAISE                : 
RANGE                : 
RBRACE               : 14 15
RBRACKET             : 53
REDO                 : 
REQUIRE              : 
RESCUE               : 
RETRY                : 
RETURN               : 
RPAREN               : 37 43 44 52
SELF                 : 
SEMICOLON            : 
SETNEW               : 37
SPACESHIP            : 
STRING               : 10 13
SUPER                : 
TIMES                : 47
TIMES_ASSIGN         : 
TRUE                 : 
UNTIL                : 
WHEN                 : 
WHILE                : 41
YIELD                : 
error                : 

Nonterminals, with rules where they appear

elements             : 38 53 55
empty                : 39
expression           : 7 11 18 18 23 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 41 48 49 52 54 55
factor               : 12 12 46 46 47 47 48 49
key_value            : 16 17
key_value_pairs      : 14 17
optional_elements    : 37
params               : 4 43 44
program              : 0
range                : 56
statement            : 5 6 22 22 23 24 24 25 25 26 26 26 33 41 43 56 59
statements           : 1 2 6
term                 : 45

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements END
    (2) program -> . statements
    (5) statements -> . statement
    (6) statements -> . statements statement
    (7) statement -> . expression
    (8) statement -> . IDENTIFIER ASSIGN INTEGER
    (9) statement -> . IDENTIFIER ASSIGN FLOAT
    (10) statement -> . GLOBAL_VAR ASSIGN STRING
    (11) statement -> . GLOBAL_VAR ASSIGN expression
    (22) statement -> . statement statement
    (23) statement -> . IF expression statement END
    (24) statement -> . IF expression statement ELSE statement END
    (25) statement -> . IF expression statement ELSIF expression statement END
    (26) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (33) statement -> . DEF IDENTIFIER statement END
    (34) statement -> . IDENTIFIER
    (35) statement -> . INSTANCE_VAR ASSIGN INTEGER
    (36) statement -> . INSTANCE_VAR ASSIGN FLOAT
    (37) statement -> . SETNEW LPAREN optional_elements RPAREN
    (41) statement -> . WHILE expression statement END
    (42) statement -> . IDENTIFIER ASSIGN GETS
    (43) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (44) statement -> . IDENTIFIER LPAREN params RPAREN
    (56) statement -> . FOR IDENTIFIER IN range statement
    (59) statement -> . PUTS statement
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 5
    GLOBAL_VAR      shift and go to state 8
    IF              shift and go to state 10
    DEF             shift and go to state 11
    INSTANCE_VAR    shift and go to state 12
    SETNEW          shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 4
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 1

    (0) S' -> program .



state 2

    (1) program -> statements . END
    (2) program -> statements .
    (6) statements -> statements . statement
    (7) statement -> . expression
    (8) statement -> . IDENTIFIER ASSIGN INTEGER
    (9) statement -> . IDENTIFIER ASSIGN FLOAT
    (10) statement -> . GLOBAL_VAR ASSIGN STRING
    (11) statement -> . GLOBAL_VAR ASSIGN expression
    (22) statement -> . statement statement
    (23) statement -> . IF expression statement END
    (24) statement -> . IF expression statement ELSE statement END
    (25) statement -> . IF expression statement ELSIF expression statement END
    (26) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (33) statement -> . DEF IDENTIFIER statement END
    (34) statement -> . IDENTIFIER
    (35) statement -> . INSTANCE_VAR ASSIGN INTEGER
    (36) statement -> . INSTANCE_VAR ASSIGN FLOAT
    (37) statement -> . SETNEW LPAREN optional_elements RPAREN
    (41) statement -> . WHILE expression statement END
    (42) statement -> . IDENTIFIER ASSIGN GETS
    (43) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (44) statement -> . IDENTIFIER LPAREN params RPAREN
    (56) statement -> . FOR IDENTIFIER IN range statement
    (59) statement -> . PUTS statement
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    END             shift and go to state 22
    $end            reduce using rule 2 (program -> statements .)
    IDENTIFIER      shift and go to state 5
    GLOBAL_VAR      shift and go to state 8
    IF              shift and go to state 10
    DEF             shift and go to state 11
    INSTANCE_VAR    shift and go to state 12
    SETNEW          shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    statement                      shift and go to state 23
    expression                     shift and go to state 4
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 3

    (5) statements -> statement .
    (22) statement -> statement . statement
    (7) statement -> . expression
    (8) statement -> . IDENTIFIER ASSIGN INTEGER
    (9) statement -> . IDENTIFIER ASSIGN FLOAT
    (10) statement -> . GLOBAL_VAR ASSIGN STRING
    (11) statement -> . GLOBAL_VAR ASSIGN expression
    (22) statement -> . statement statement
    (23) statement -> . IF expression statement END
    (24) statement -> . IF expression statement ELSE statement END
    (25) statement -> . IF expression statement ELSIF expression statement END
    (26) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (33) statement -> . DEF IDENTIFIER statement END
    (34) statement -> . IDENTIFIER
    (35) statement -> . INSTANCE_VAR ASSIGN INTEGER
    (36) statement -> . INSTANCE_VAR ASSIGN FLOAT
    (37) statement -> . SETNEW LPAREN optional_elements RPAREN
    (41) statement -> . WHILE expression statement END
    (42) statement -> . IDENTIFIER ASSIGN GETS
    (43) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (44) statement -> . IDENTIFIER LPAREN params RPAREN
    (56) statement -> . FOR IDENTIFIER IN range statement
    (59) statement -> . PUTS statement
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for SETNEW resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    END             reduce using rule 5 (statements -> statement .)
    $end            reduce using rule 5 (statements -> statement .)
    IDENTIFIER      shift and go to state 5
    GLOBAL_VAR      shift and go to state 8
    IF              shift and go to state 10
    DEF             shift and go to state 11
    INSTANCE_VAR    shift and go to state 12
    SETNEW          shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

  ! IDENTIFIER      [ reduce using rule 5 (statements -> statement .) ]
  ! GLOBAL_VAR      [ reduce using rule 5 (statements -> statement .) ]
  ! IF              [ reduce using rule 5 (statements -> statement .) ]
  ! DEF             [ reduce using rule 5 (statements -> statement .) ]
  ! INSTANCE_VAR    [ reduce using rule 5 (statements -> statement .) ]
  ! SETNEW          [ reduce using rule 5 (statements -> statement .) ]
  ! WHILE           [ reduce using rule 5 (statements -> statement .) ]
  ! FOR             [ reduce using rule 5 (statements -> statement .) ]
  ! PUTS            [ reduce using rule 5 (statements -> statement .) ]
  ! LBRACE          [ reduce using rule 5 (statements -> statement .) ]
  ! LBRACKET        [ reduce using rule 5 (statements -> statement .) ]
  ! STRING          [ reduce using rule 5 (statements -> statement .) ]
  ! INTEGER         [ reduce using rule 5 (statements -> statement .) ]
  ! FLOAT           [ reduce using rule 5 (statements -> statement .) ]
  ! LPAREN          [ reduce using rule 5 (statements -> statement .) ]

    statement                      shift and go to state 24
    expression                     shift and go to state 4
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 4

    (7) statement -> expression .
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression
    (29) expression -> expression . GREATER_EQUAL expression
    (30) expression -> expression . LESS_EQUAL expression
    (31) expression -> expression . EQUALS expression
    (32) expression -> expression . NOT_EQUALS expression
    (48) expression -> expression . PLUS factor
    (49) expression -> expression . MINUS factor

    IDENTIFIER      reduce using rule 7 (statement -> expression .)
    GLOBAL_VAR      reduce using rule 7 (statement -> expression .)
    IF              reduce using rule 7 (statement -> expression .)
    DEF             reduce using rule 7 (statement -> expression .)
    INSTANCE_VAR    reduce using rule 7 (statement -> expression .)
    SETNEW          reduce using rule 7 (statement -> expression .)
    WHILE           reduce using rule 7 (statement -> expression .)
    FOR             reduce using rule 7 (statement -> expression .)
    PUTS            reduce using rule 7 (statement -> expression .)
    LBRACE          reduce using rule 7 (statement -> expression .)
    LBRACKET        reduce using rule 7 (statement -> expression .)
    STRING          reduce using rule 7 (statement -> expression .)
    INTEGER         reduce using rule 7 (statement -> expression .)
    FLOAT           reduce using rule 7 (statement -> expression .)
    LPAREN          reduce using rule 7 (statement -> expression .)
    END             reduce using rule 7 (statement -> expression .)
    $end            reduce using rule 7 (statement -> expression .)
    ELSE            reduce using rule 7 (statement -> expression .)
    ELSIF           reduce using rule 7 (statement -> expression .)
    GREATER         shift and go to state 25
    LESS            shift and go to state 26
    GREATER_EQUAL   shift and go to state 27
    LESS_EQUAL      shift and go to state 28
    EQUALS          shift and go to state 29
    NOT_EQUALS      shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32


state 5

    (8) statement -> IDENTIFIER . ASSIGN INTEGER
    (9) statement -> IDENTIFIER . ASSIGN FLOAT
    (34) statement -> IDENTIFIER .
    (42) statement -> IDENTIFIER . ASSIGN GETS
    (44) statement -> IDENTIFIER . LPAREN params RPAREN
    (19) expression -> IDENTIFIER .

  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 19 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for GLOBAL_VAR resolved using rule 19 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for IF resolved using rule 19 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for DEF resolved using rule 19 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for INSTANCE_VAR resolved using rule 19 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for SETNEW resolved using rule 19 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for WHILE resolved using rule 19 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for FOR resolved using rule 19 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for PUTS resolved using rule 19 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LBRACE resolved using rule 19 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 19 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for STRING resolved using rule 19 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for INTEGER resolved using rule 19 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 19 (expression -> IDENTIFIER .)
  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for END resolved using rule 19 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 19 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for ELSE resolved using rule 19 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for ELSIF resolved using rule 19 (expression -> IDENTIFIER .)
    ASSIGN          shift and go to state 33
    LPAREN          shift and go to state 34
    GREATER         reduce using rule 19 (expression -> IDENTIFIER .)
    LESS            reduce using rule 19 (expression -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 19 (expression -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 19 (expression -> IDENTIFIER .)
    EQUALS          reduce using rule 19 (expression -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 19 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 19 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 19 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 19 (expression -> IDENTIFIER .)
    GLOBAL_VAR      reduce using rule 19 (expression -> IDENTIFIER .)
    IF              reduce using rule 19 (expression -> IDENTIFIER .)
    DEF             reduce using rule 19 (expression -> IDENTIFIER .)
    INSTANCE_VAR    reduce using rule 19 (expression -> IDENTIFIER .)
    SETNEW          reduce using rule 19 (expression -> IDENTIFIER .)
    WHILE           reduce using rule 19 (expression -> IDENTIFIER .)
    FOR             reduce using rule 19 (expression -> IDENTIFIER .)
    PUTS            reduce using rule 19 (expression -> IDENTIFIER .)
    LBRACE          reduce using rule 19 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 19 (expression -> IDENTIFIER .)
    STRING          reduce using rule 19 (expression -> IDENTIFIER .)
    INTEGER         reduce using rule 19 (expression -> IDENTIFIER .)
    FLOAT           reduce using rule 19 (expression -> IDENTIFIER .)
    END             reduce using rule 19 (expression -> IDENTIFIER .)
    $end            reduce using rule 19 (expression -> IDENTIFIER .)
    ELSE            reduce using rule 19 (expression -> IDENTIFIER .)
    ELSIF           reduce using rule 19 (expression -> IDENTIFIER .)

  ! IDENTIFIER      [ reduce using rule 34 (statement -> IDENTIFIER .) ]
  ! GLOBAL_VAR      [ reduce using rule 34 (statement -> IDENTIFIER .) ]
  ! IF              [ reduce using rule 34 (statement -> IDENTIFIER .) ]
  ! DEF             [ reduce using rule 34 (statement -> IDENTIFIER .) ]
  ! INSTANCE_VAR    [ reduce using rule 34 (statement -> IDENTIFIER .) ]
  ! SETNEW          [ reduce using rule 34 (statement -> IDENTIFIER .) ]
  ! WHILE           [ reduce using rule 34 (statement -> IDENTIFIER .) ]
  ! FOR             [ reduce using rule 34 (statement -> IDENTIFIER .) ]
  ! PUTS            [ reduce using rule 34 (statement -> IDENTIFIER .) ]
  ! LBRACE          [ reduce using rule 34 (statement -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 34 (statement -> IDENTIFIER .) ]
  ! STRING          [ reduce using rule 34 (statement -> IDENTIFIER .) ]
  ! INTEGER         [ reduce using rule 34 (statement -> IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 34 (statement -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 34 (statement -> IDENTIFIER .) ]
  ! END             [ reduce using rule 34 (statement -> IDENTIFIER .) ]
  ! $end            [ reduce using rule 34 (statement -> IDENTIFIER .) ]
  ! ELSE            [ reduce using rule 34 (statement -> IDENTIFIER .) ]
  ! ELSIF           [ reduce using rule 34 (statement -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 19 (expression -> IDENTIFIER .) ]


state 6

    (50) factor -> INTEGER .

    DIVIDE          reduce using rule 50 (factor -> INTEGER .)
    TIMES           reduce using rule 50 (factor -> INTEGER .)
    POWER           reduce using rule 50 (factor -> INTEGER .)
    GREATER         reduce using rule 50 (factor -> INTEGER .)
    LESS            reduce using rule 50 (factor -> INTEGER .)
    GREATER_EQUAL   reduce using rule 50 (factor -> INTEGER .)
    LESS_EQUAL      reduce using rule 50 (factor -> INTEGER .)
    EQUALS          reduce using rule 50 (factor -> INTEGER .)
    NOT_EQUALS      reduce using rule 50 (factor -> INTEGER .)
    PLUS            reduce using rule 50 (factor -> INTEGER .)
    MINUS           reduce using rule 50 (factor -> INTEGER .)
    IDENTIFIER      reduce using rule 50 (factor -> INTEGER .)
    GLOBAL_VAR      reduce using rule 50 (factor -> INTEGER .)
    IF              reduce using rule 50 (factor -> INTEGER .)
    DEF             reduce using rule 50 (factor -> INTEGER .)
    INSTANCE_VAR    reduce using rule 50 (factor -> INTEGER .)
    SETNEW          reduce using rule 50 (factor -> INTEGER .)
    WHILE           reduce using rule 50 (factor -> INTEGER .)
    FOR             reduce using rule 50 (factor -> INTEGER .)
    PUTS            reduce using rule 50 (factor -> INTEGER .)
    LBRACE          reduce using rule 50 (factor -> INTEGER .)
    LBRACKET        reduce using rule 50 (factor -> INTEGER .)
    STRING          reduce using rule 50 (factor -> INTEGER .)
    INTEGER         reduce using rule 50 (factor -> INTEGER .)
    FLOAT           reduce using rule 50 (factor -> INTEGER .)
    LPAREN          reduce using rule 50 (factor -> INTEGER .)
    END             reduce using rule 50 (factor -> INTEGER .)
    $end            reduce using rule 50 (factor -> INTEGER .)
    RPAREN          reduce using rule 50 (factor -> INTEGER .)
    ELSE            reduce using rule 50 (factor -> INTEGER .)
    ELSIF           reduce using rule 50 (factor -> INTEGER .)
    HASH_ROCKET     reduce using rule 50 (factor -> INTEGER .)
    RBRACKET        reduce using rule 50 (factor -> INTEGER .)
    COMMA           reduce using rule 50 (factor -> INTEGER .)
    RBRACE          reduce using rule 50 (factor -> INTEGER .)


state 7

    (51) factor -> FLOAT .

    DIVIDE          reduce using rule 51 (factor -> FLOAT .)
    TIMES           reduce using rule 51 (factor -> FLOAT .)
    POWER           reduce using rule 51 (factor -> FLOAT .)
    GREATER         reduce using rule 51 (factor -> FLOAT .)
    LESS            reduce using rule 51 (factor -> FLOAT .)
    GREATER_EQUAL   reduce using rule 51 (factor -> FLOAT .)
    LESS_EQUAL      reduce using rule 51 (factor -> FLOAT .)
    EQUALS          reduce using rule 51 (factor -> FLOAT .)
    NOT_EQUALS      reduce using rule 51 (factor -> FLOAT .)
    PLUS            reduce using rule 51 (factor -> FLOAT .)
    MINUS           reduce using rule 51 (factor -> FLOAT .)
    IDENTIFIER      reduce using rule 51 (factor -> FLOAT .)
    GLOBAL_VAR      reduce using rule 51 (factor -> FLOAT .)
    IF              reduce using rule 51 (factor -> FLOAT .)
    DEF             reduce using rule 51 (factor -> FLOAT .)
    INSTANCE_VAR    reduce using rule 51 (factor -> FLOAT .)
    SETNEW          reduce using rule 51 (factor -> FLOAT .)
    WHILE           reduce using rule 51 (factor -> FLOAT .)
    FOR             reduce using rule 51 (factor -> FLOAT .)
    PUTS            reduce using rule 51 (factor -> FLOAT .)
    LBRACE          reduce using rule 51 (factor -> FLOAT .)
    LBRACKET        reduce using rule 51 (factor -> FLOAT .)
    STRING          reduce using rule 51 (factor -> FLOAT .)
    INTEGER         reduce using rule 51 (factor -> FLOAT .)
    FLOAT           reduce using rule 51 (factor -> FLOAT .)
    LPAREN          reduce using rule 51 (factor -> FLOAT .)
    END             reduce using rule 51 (factor -> FLOAT .)
    $end            reduce using rule 51 (factor -> FLOAT .)
    RPAREN          reduce using rule 51 (factor -> FLOAT .)
    ELSE            reduce using rule 51 (factor -> FLOAT .)
    ELSIF           reduce using rule 51 (factor -> FLOAT .)
    HASH_ROCKET     reduce using rule 51 (factor -> FLOAT .)
    RBRACKET        reduce using rule 51 (factor -> FLOAT .)
    COMMA           reduce using rule 51 (factor -> FLOAT .)
    RBRACE          reduce using rule 51 (factor -> FLOAT .)


state 8

    (10) statement -> GLOBAL_VAR . ASSIGN STRING
    (11) statement -> GLOBAL_VAR . ASSIGN expression
    (20) expression -> GLOBAL_VAR .

    ASSIGN          shift and go to state 35
    GREATER         reduce using rule 20 (expression -> GLOBAL_VAR .)
    LESS            reduce using rule 20 (expression -> GLOBAL_VAR .)
    GREATER_EQUAL   reduce using rule 20 (expression -> GLOBAL_VAR .)
    LESS_EQUAL      reduce using rule 20 (expression -> GLOBAL_VAR .)
    EQUALS          reduce using rule 20 (expression -> GLOBAL_VAR .)
    NOT_EQUALS      reduce using rule 20 (expression -> GLOBAL_VAR .)
    PLUS            reduce using rule 20 (expression -> GLOBAL_VAR .)
    MINUS           reduce using rule 20 (expression -> GLOBAL_VAR .)
    IDENTIFIER      reduce using rule 20 (expression -> GLOBAL_VAR .)
    GLOBAL_VAR      reduce using rule 20 (expression -> GLOBAL_VAR .)
    IF              reduce using rule 20 (expression -> GLOBAL_VAR .)
    DEF             reduce using rule 20 (expression -> GLOBAL_VAR .)
    INSTANCE_VAR    reduce using rule 20 (expression -> GLOBAL_VAR .)
    SETNEW          reduce using rule 20 (expression -> GLOBAL_VAR .)
    WHILE           reduce using rule 20 (expression -> GLOBAL_VAR .)
    FOR             reduce using rule 20 (expression -> GLOBAL_VAR .)
    PUTS            reduce using rule 20 (expression -> GLOBAL_VAR .)
    LBRACE          reduce using rule 20 (expression -> GLOBAL_VAR .)
    LBRACKET        reduce using rule 20 (expression -> GLOBAL_VAR .)
    STRING          reduce using rule 20 (expression -> GLOBAL_VAR .)
    INTEGER         reduce using rule 20 (expression -> GLOBAL_VAR .)
    FLOAT           reduce using rule 20 (expression -> GLOBAL_VAR .)
    LPAREN          reduce using rule 20 (expression -> GLOBAL_VAR .)
    END             reduce using rule 20 (expression -> GLOBAL_VAR .)
    $end            reduce using rule 20 (expression -> GLOBAL_VAR .)
    ELSE            reduce using rule 20 (expression -> GLOBAL_VAR .)
    ELSIF           reduce using rule 20 (expression -> GLOBAL_VAR .)


state 9

    (13) factor -> STRING .

    DIVIDE          reduce using rule 13 (factor -> STRING .)
    TIMES           reduce using rule 13 (factor -> STRING .)
    POWER           reduce using rule 13 (factor -> STRING .)
    GREATER         reduce using rule 13 (factor -> STRING .)
    LESS            reduce using rule 13 (factor -> STRING .)
    GREATER_EQUAL   reduce using rule 13 (factor -> STRING .)
    LESS_EQUAL      reduce using rule 13 (factor -> STRING .)
    EQUALS          reduce using rule 13 (factor -> STRING .)
    NOT_EQUALS      reduce using rule 13 (factor -> STRING .)
    PLUS            reduce using rule 13 (factor -> STRING .)
    MINUS           reduce using rule 13 (factor -> STRING .)
    IDENTIFIER      reduce using rule 13 (factor -> STRING .)
    GLOBAL_VAR      reduce using rule 13 (factor -> STRING .)
    IF              reduce using rule 13 (factor -> STRING .)
    DEF             reduce using rule 13 (factor -> STRING .)
    INSTANCE_VAR    reduce using rule 13 (factor -> STRING .)
    SETNEW          reduce using rule 13 (factor -> STRING .)
    WHILE           reduce using rule 13 (factor -> STRING .)
    FOR             reduce using rule 13 (factor -> STRING .)
    PUTS            reduce using rule 13 (factor -> STRING .)
    LBRACE          reduce using rule 13 (factor -> STRING .)
    LBRACKET        reduce using rule 13 (factor -> STRING .)
    STRING          reduce using rule 13 (factor -> STRING .)
    INTEGER         reduce using rule 13 (factor -> STRING .)
    FLOAT           reduce using rule 13 (factor -> STRING .)
    LPAREN          reduce using rule 13 (factor -> STRING .)
    END             reduce using rule 13 (factor -> STRING .)
    $end            reduce using rule 13 (factor -> STRING .)
    RPAREN          reduce using rule 13 (factor -> STRING .)
    ELSE            reduce using rule 13 (factor -> STRING .)
    ELSIF           reduce using rule 13 (factor -> STRING .)
    HASH_ROCKET     reduce using rule 13 (factor -> STRING .)
    RBRACKET        reduce using rule 13 (factor -> STRING .)
    COMMA           reduce using rule 13 (factor -> STRING .)
    RBRACE          reduce using rule 13 (factor -> STRING .)


state 10

    (23) statement -> IF . expression statement END
    (24) statement -> IF . expression statement ELSE statement END
    (25) statement -> IF . expression statement ELSIF expression statement END
    (26) statement -> IF . expression statement ELSIF expression statement ELSE statement END
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 37
    GLOBAL_VAR      shift and go to state 38
    INSTANCE_VAR    shift and go to state 39
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    expression                     shift and go to state 36
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 11

    (33) statement -> DEF . IDENTIFIER statement END
    (43) statement -> DEF . IDENTIFIER LPAREN params RPAREN statement END

    IDENTIFIER      shift and go to state 40


state 12

    (35) statement -> INSTANCE_VAR . ASSIGN INTEGER
    (36) statement -> INSTANCE_VAR . ASSIGN FLOAT
    (21) expression -> INSTANCE_VAR .

    ASSIGN          shift and go to state 41
    GREATER         reduce using rule 21 (expression -> INSTANCE_VAR .)
    LESS            reduce using rule 21 (expression -> INSTANCE_VAR .)
    GREATER_EQUAL   reduce using rule 21 (expression -> INSTANCE_VAR .)
    LESS_EQUAL      reduce using rule 21 (expression -> INSTANCE_VAR .)
    EQUALS          reduce using rule 21 (expression -> INSTANCE_VAR .)
    NOT_EQUALS      reduce using rule 21 (expression -> INSTANCE_VAR .)
    PLUS            reduce using rule 21 (expression -> INSTANCE_VAR .)
    MINUS           reduce using rule 21 (expression -> INSTANCE_VAR .)
    IDENTIFIER      reduce using rule 21 (expression -> INSTANCE_VAR .)
    GLOBAL_VAR      reduce using rule 21 (expression -> INSTANCE_VAR .)
    IF              reduce using rule 21 (expression -> INSTANCE_VAR .)
    DEF             reduce using rule 21 (expression -> INSTANCE_VAR .)
    INSTANCE_VAR    reduce using rule 21 (expression -> INSTANCE_VAR .)
    SETNEW          reduce using rule 21 (expression -> INSTANCE_VAR .)
    WHILE           reduce using rule 21 (expression -> INSTANCE_VAR .)
    FOR             reduce using rule 21 (expression -> INSTANCE_VAR .)
    PUTS            reduce using rule 21 (expression -> INSTANCE_VAR .)
    LBRACE          reduce using rule 21 (expression -> INSTANCE_VAR .)
    LBRACKET        reduce using rule 21 (expression -> INSTANCE_VAR .)
    STRING          reduce using rule 21 (expression -> INSTANCE_VAR .)
    INTEGER         reduce using rule 21 (expression -> INSTANCE_VAR .)
    FLOAT           reduce using rule 21 (expression -> INSTANCE_VAR .)
    LPAREN          reduce using rule 21 (expression -> INSTANCE_VAR .)
    END             reduce using rule 21 (expression -> INSTANCE_VAR .)
    $end            reduce using rule 21 (expression -> INSTANCE_VAR .)
    ELSE            reduce using rule 21 (expression -> INSTANCE_VAR .)
    ELSIF           reduce using rule 21 (expression -> INSTANCE_VAR .)


state 13

    (37) statement -> SETNEW . LPAREN optional_elements RPAREN

    LPAREN          shift and go to state 42


state 14

    (52) factor -> LPAREN . expression RPAREN
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 37
    GLOBAL_VAR      shift and go to state 38
    INSTANCE_VAR    shift and go to state 39
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    expression                     shift and go to state 43
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 15

    (41) statement -> WHILE . expression statement END
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 37
    GLOBAL_VAR      shift and go to state 38
    INSTANCE_VAR    shift and go to state 39
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    expression                     shift and go to state 44
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 16

    (56) statement -> FOR . IDENTIFIER IN range statement

    IDENTIFIER      shift and go to state 45


state 17

    (59) statement -> PUTS . statement
    (7) statement -> . expression
    (8) statement -> . IDENTIFIER ASSIGN INTEGER
    (9) statement -> . IDENTIFIER ASSIGN FLOAT
    (10) statement -> . GLOBAL_VAR ASSIGN STRING
    (11) statement -> . GLOBAL_VAR ASSIGN expression
    (22) statement -> . statement statement
    (23) statement -> . IF expression statement END
    (24) statement -> . IF expression statement ELSE statement END
    (25) statement -> . IF expression statement ELSIF expression statement END
    (26) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (33) statement -> . DEF IDENTIFIER statement END
    (34) statement -> . IDENTIFIER
    (35) statement -> . INSTANCE_VAR ASSIGN INTEGER
    (36) statement -> . INSTANCE_VAR ASSIGN FLOAT
    (37) statement -> . SETNEW LPAREN optional_elements RPAREN
    (41) statement -> . WHILE expression statement END
    (42) statement -> . IDENTIFIER ASSIGN GETS
    (43) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (44) statement -> . IDENTIFIER LPAREN params RPAREN
    (56) statement -> . FOR IDENTIFIER IN range statement
    (59) statement -> . PUTS statement
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 5
    GLOBAL_VAR      shift and go to state 8
    IF              shift and go to state 10
    DEF             shift and go to state 11
    INSTANCE_VAR    shift and go to state 12
    SETNEW          shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    statement                      shift and go to state 46
    expression                     shift and go to state 4
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 18

    (14) expression -> LBRACE . key_value_pairs RBRACE
    (15) expression -> LBRACE . RBRACE
    (16) key_value_pairs -> . key_value
    (17) key_value_pairs -> . key_value_pairs COMMA key_value
    (18) key_value -> . expression HASH_ROCKET expression
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 48
    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 37
    GLOBAL_VAR      shift and go to state 38
    INSTANCE_VAR    shift and go to state 39
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    key_value_pairs                shift and go to state 47
    key_value                      shift and go to state 49
    expression                     shift and go to state 50
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 19

    (45) expression -> term .

    GREATER         reduce using rule 45 (expression -> term .)
    LESS            reduce using rule 45 (expression -> term .)
    GREATER_EQUAL   reduce using rule 45 (expression -> term .)
    LESS_EQUAL      reduce using rule 45 (expression -> term .)
    EQUALS          reduce using rule 45 (expression -> term .)
    NOT_EQUALS      reduce using rule 45 (expression -> term .)
    PLUS            reduce using rule 45 (expression -> term .)
    MINUS           reduce using rule 45 (expression -> term .)
    IDENTIFIER      reduce using rule 45 (expression -> term .)
    GLOBAL_VAR      reduce using rule 45 (expression -> term .)
    IF              reduce using rule 45 (expression -> term .)
    DEF             reduce using rule 45 (expression -> term .)
    INSTANCE_VAR    reduce using rule 45 (expression -> term .)
    SETNEW          reduce using rule 45 (expression -> term .)
    WHILE           reduce using rule 45 (expression -> term .)
    FOR             reduce using rule 45 (expression -> term .)
    PUTS            reduce using rule 45 (expression -> term .)
    LBRACE          reduce using rule 45 (expression -> term .)
    LBRACKET        reduce using rule 45 (expression -> term .)
    STRING          reduce using rule 45 (expression -> term .)
    INTEGER         reduce using rule 45 (expression -> term .)
    FLOAT           reduce using rule 45 (expression -> term .)
    LPAREN          reduce using rule 45 (expression -> term .)
    END             reduce using rule 45 (expression -> term .)
    $end            reduce using rule 45 (expression -> term .)
    RPAREN          reduce using rule 45 (expression -> term .)
    ELSE            reduce using rule 45 (expression -> term .)
    ELSIF           reduce using rule 45 (expression -> term .)
    HASH_ROCKET     reduce using rule 45 (expression -> term .)
    RBRACKET        reduce using rule 45 (expression -> term .)
    COMMA           reduce using rule 45 (expression -> term .)
    RBRACE          reduce using rule 45 (expression -> term .)


state 20

    (46) term -> factor . DIVIDE factor
    (47) term -> factor . TIMES factor
    (12) factor -> factor . POWER factor

    DIVIDE          shift and go to state 51
    TIMES           shift and go to state 52
    POWER           shift and go to state 53


state 21

    (53) expression -> LBRACKET . elements RBRACKET
    (54) elements -> . expression
    (55) elements -> . elements COMMA expression
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 37
    GLOBAL_VAR      shift and go to state 38
    INSTANCE_VAR    shift and go to state 39
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    elements                       shift and go to state 54
    expression                     shift and go to state 55
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 22

    (1) program -> statements END .

    $end            reduce using rule 1 (program -> statements END .)


state 23

    (6) statements -> statements statement .
    (22) statement -> statement . statement
    (7) statement -> . expression
    (8) statement -> . IDENTIFIER ASSIGN INTEGER
    (9) statement -> . IDENTIFIER ASSIGN FLOAT
    (10) statement -> . GLOBAL_VAR ASSIGN STRING
    (11) statement -> . GLOBAL_VAR ASSIGN expression
    (22) statement -> . statement statement
    (23) statement -> . IF expression statement END
    (24) statement -> . IF expression statement ELSE statement END
    (25) statement -> . IF expression statement ELSIF expression statement END
    (26) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (33) statement -> . DEF IDENTIFIER statement END
    (34) statement -> . IDENTIFIER
    (35) statement -> . INSTANCE_VAR ASSIGN INTEGER
    (36) statement -> . INSTANCE_VAR ASSIGN FLOAT
    (37) statement -> . SETNEW LPAREN optional_elements RPAREN
    (41) statement -> . WHILE expression statement END
    (42) statement -> . IDENTIFIER ASSIGN GETS
    (43) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (44) statement -> . IDENTIFIER LPAREN params RPAREN
    (56) statement -> . FOR IDENTIFIER IN range statement
    (59) statement -> . PUTS statement
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for SETNEW resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    END             reduce using rule 6 (statements -> statements statement .)
    $end            reduce using rule 6 (statements -> statements statement .)
    IDENTIFIER      shift and go to state 5
    GLOBAL_VAR      shift and go to state 8
    IF              shift and go to state 10
    DEF             shift and go to state 11
    INSTANCE_VAR    shift and go to state 12
    SETNEW          shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

  ! IDENTIFIER      [ reduce using rule 6 (statements -> statements statement .) ]
  ! GLOBAL_VAR      [ reduce using rule 6 (statements -> statements statement .) ]
  ! IF              [ reduce using rule 6 (statements -> statements statement .) ]
  ! DEF             [ reduce using rule 6 (statements -> statements statement .) ]
  ! INSTANCE_VAR    [ reduce using rule 6 (statements -> statements statement .) ]
  ! SETNEW          [ reduce using rule 6 (statements -> statements statement .) ]
  ! WHILE           [ reduce using rule 6 (statements -> statements statement .) ]
  ! FOR             [ reduce using rule 6 (statements -> statements statement .) ]
  ! PUTS            [ reduce using rule 6 (statements -> statements statement .) ]
  ! LBRACE          [ reduce using rule 6 (statements -> statements statement .) ]
  ! LBRACKET        [ reduce using rule 6 (statements -> statements statement .) ]
  ! STRING          [ reduce using rule 6 (statements -> statements statement .) ]
  ! INTEGER         [ reduce using rule 6 (statements -> statements statement .) ]
  ! FLOAT           [ reduce using rule 6 (statements -> statements statement .) ]
  ! LPAREN          [ reduce using rule 6 (statements -> statements statement .) ]

    statement                      shift and go to state 24
    expression                     shift and go to state 4
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 24

    (22) statement -> statement statement .
    (22) statement -> statement . statement
    (7) statement -> . expression
    (8) statement -> . IDENTIFIER ASSIGN INTEGER
    (9) statement -> . IDENTIFIER ASSIGN FLOAT
    (10) statement -> . GLOBAL_VAR ASSIGN STRING
    (11) statement -> . GLOBAL_VAR ASSIGN expression
    (22) statement -> . statement statement
    (23) statement -> . IF expression statement END
    (24) statement -> . IF expression statement ELSE statement END
    (25) statement -> . IF expression statement ELSIF expression statement END
    (26) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (33) statement -> . DEF IDENTIFIER statement END
    (34) statement -> . IDENTIFIER
    (35) statement -> . INSTANCE_VAR ASSIGN INTEGER
    (36) statement -> . INSTANCE_VAR ASSIGN FLOAT
    (37) statement -> . SETNEW LPAREN optional_elements RPAREN
    (41) statement -> . WHILE expression statement END
    (42) statement -> . IDENTIFIER ASSIGN GETS
    (43) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (44) statement -> . IDENTIFIER LPAREN params RPAREN
    (56) statement -> . FOR IDENTIFIER IN range statement
    (59) statement -> . PUTS statement
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for SETNEW resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    END             reduce using rule 22 (statement -> statement statement .)
    $end            reduce using rule 22 (statement -> statement statement .)
    ELSE            reduce using rule 22 (statement -> statement statement .)
    ELSIF           reduce using rule 22 (statement -> statement statement .)
    IDENTIFIER      shift and go to state 5
    GLOBAL_VAR      shift and go to state 8
    IF              shift and go to state 10
    DEF             shift and go to state 11
    INSTANCE_VAR    shift and go to state 12
    SETNEW          shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

  ! IDENTIFIER      [ reduce using rule 22 (statement -> statement statement .) ]
  ! GLOBAL_VAR      [ reduce using rule 22 (statement -> statement statement .) ]
  ! IF              [ reduce using rule 22 (statement -> statement statement .) ]
  ! DEF             [ reduce using rule 22 (statement -> statement statement .) ]
  ! INSTANCE_VAR    [ reduce using rule 22 (statement -> statement statement .) ]
  ! SETNEW          [ reduce using rule 22 (statement -> statement statement .) ]
  ! WHILE           [ reduce using rule 22 (statement -> statement statement .) ]
  ! FOR             [ reduce using rule 22 (statement -> statement statement .) ]
  ! PUTS            [ reduce using rule 22 (statement -> statement statement .) ]
  ! LBRACE          [ reduce using rule 22 (statement -> statement statement .) ]
  ! LBRACKET        [ reduce using rule 22 (statement -> statement statement .) ]
  ! STRING          [ reduce using rule 22 (statement -> statement statement .) ]
  ! INTEGER         [ reduce using rule 22 (statement -> statement statement .) ]
  ! FLOAT           [ reduce using rule 22 (statement -> statement statement .) ]
  ! LPAREN          [ reduce using rule 22 (statement -> statement statement .) ]

    statement                      shift and go to state 24
    expression                     shift and go to state 4
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 25

    (27) expression -> expression GREATER . expression
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 37
    GLOBAL_VAR      shift and go to state 38
    INSTANCE_VAR    shift and go to state 39
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    expression                     shift and go to state 56
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 26

    (28) expression -> expression LESS . expression
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 37
    GLOBAL_VAR      shift and go to state 38
    INSTANCE_VAR    shift and go to state 39
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    expression                     shift and go to state 57
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 27

    (29) expression -> expression GREATER_EQUAL . expression
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 37
    GLOBAL_VAR      shift and go to state 38
    INSTANCE_VAR    shift and go to state 39
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    expression                     shift and go to state 58
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 28

    (30) expression -> expression LESS_EQUAL . expression
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 37
    GLOBAL_VAR      shift and go to state 38
    INSTANCE_VAR    shift and go to state 39
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    expression                     shift and go to state 59
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 29

    (31) expression -> expression EQUALS . expression
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 37
    GLOBAL_VAR      shift and go to state 38
    INSTANCE_VAR    shift and go to state 39
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    expression                     shift and go to state 60
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 30

    (32) expression -> expression NOT_EQUALS . expression
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 37
    GLOBAL_VAR      shift and go to state 38
    INSTANCE_VAR    shift and go to state 39
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    expression                     shift and go to state 61
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 31

    (48) expression -> expression PLUS . factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    factor                         shift and go to state 62

state 32

    (49) expression -> expression MINUS . factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    factor                         shift and go to state 63

state 33

    (8) statement -> IDENTIFIER ASSIGN . INTEGER
    (9) statement -> IDENTIFIER ASSIGN . FLOAT
    (42) statement -> IDENTIFIER ASSIGN . GETS

    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65
    GETS            shift and go to state 66


state 34

    (44) statement -> IDENTIFIER LPAREN . params RPAREN
    (3) params -> . IDENTIFIER
    (4) params -> . params COMMA IDENTIFIER

    IDENTIFIER      shift and go to state 67

    params                         shift and go to state 68

state 35

    (10) statement -> GLOBAL_VAR ASSIGN . STRING
    (11) statement -> GLOBAL_VAR ASSIGN . expression
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 69
    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 37
    GLOBAL_VAR      shift and go to state 38
    INSTANCE_VAR    shift and go to state 39
    LBRACKET        shift and go to state 21
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    expression                     shift and go to state 70
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 36

    (23) statement -> IF expression . statement END
    (24) statement -> IF expression . statement ELSE statement END
    (25) statement -> IF expression . statement ELSIF expression statement END
    (26) statement -> IF expression . statement ELSIF expression statement ELSE statement END
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression
    (29) expression -> expression . GREATER_EQUAL expression
    (30) expression -> expression . LESS_EQUAL expression
    (31) expression -> expression . EQUALS expression
    (32) expression -> expression . NOT_EQUALS expression
    (48) expression -> expression . PLUS factor
    (49) expression -> expression . MINUS factor
    (7) statement -> . expression
    (8) statement -> . IDENTIFIER ASSIGN INTEGER
    (9) statement -> . IDENTIFIER ASSIGN FLOAT
    (10) statement -> . GLOBAL_VAR ASSIGN STRING
    (11) statement -> . GLOBAL_VAR ASSIGN expression
    (22) statement -> . statement statement
    (23) statement -> . IF expression statement END
    (24) statement -> . IF expression statement ELSE statement END
    (25) statement -> . IF expression statement ELSIF expression statement END
    (26) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (33) statement -> . DEF IDENTIFIER statement END
    (34) statement -> . IDENTIFIER
    (35) statement -> . INSTANCE_VAR ASSIGN INTEGER
    (36) statement -> . INSTANCE_VAR ASSIGN FLOAT
    (37) statement -> . SETNEW LPAREN optional_elements RPAREN
    (41) statement -> . WHILE expression statement END
    (42) statement -> . IDENTIFIER ASSIGN GETS
    (43) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (44) statement -> . IDENTIFIER LPAREN params RPAREN
    (56) statement -> . FOR IDENTIFIER IN range statement
    (59) statement -> . PUTS statement
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    GREATER         shift and go to state 25
    LESS            shift and go to state 26
    GREATER_EQUAL   shift and go to state 27
    LESS_EQUAL      shift and go to state 28
    EQUALS          shift and go to state 29
    NOT_EQUALS      shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    IDENTIFIER      shift and go to state 5
    GLOBAL_VAR      shift and go to state 8
    IF              shift and go to state 10
    DEF             shift and go to state 11
    INSTANCE_VAR    shift and go to state 12
    SETNEW          shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    expression                     shift and go to state 4
    statement                      shift and go to state 71
    factor                         shift and go to state 20
    term                           shift and go to state 19

state 37

    (19) expression -> IDENTIFIER .

    GREATER         reduce using rule 19 (expression -> IDENTIFIER .)
    LESS            reduce using rule 19 (expression -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 19 (expression -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 19 (expression -> IDENTIFIER .)
    EQUALS          reduce using rule 19 (expression -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 19 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 19 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 19 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 19 (expression -> IDENTIFIER .)
    GLOBAL_VAR      reduce using rule 19 (expression -> IDENTIFIER .)
    IF              reduce using rule 19 (expression -> IDENTIFIER .)
    DEF             reduce using rule 19 (expression -> IDENTIFIER .)
    INSTANCE_VAR    reduce using rule 19 (expression -> IDENTIFIER .)
    SETNEW          reduce using rule 19 (expression -> IDENTIFIER .)
    WHILE           reduce using rule 19 (expression -> IDENTIFIER .)
    FOR             reduce using rule 19 (expression -> IDENTIFIER .)
    PUTS            reduce using rule 19 (expression -> IDENTIFIER .)
    LBRACE          reduce using rule 19 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 19 (expression -> IDENTIFIER .)
    STRING          reduce using rule 19 (expression -> IDENTIFIER .)
    INTEGER         reduce using rule 19 (expression -> IDENTIFIER .)
    FLOAT           reduce using rule 19 (expression -> IDENTIFIER .)
    LPAREN          reduce using rule 19 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 19 (expression -> IDENTIFIER .)
    HASH_ROCKET     reduce using rule 19 (expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 19 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 19 (expression -> IDENTIFIER .)
    END             reduce using rule 19 (expression -> IDENTIFIER .)
    $end            reduce using rule 19 (expression -> IDENTIFIER .)
    ELSE            reduce using rule 19 (expression -> IDENTIFIER .)
    ELSIF           reduce using rule 19 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 19 (expression -> IDENTIFIER .)


state 38

    (20) expression -> GLOBAL_VAR .

    GREATER         reduce using rule 20 (expression -> GLOBAL_VAR .)
    LESS            reduce using rule 20 (expression -> GLOBAL_VAR .)
    GREATER_EQUAL   reduce using rule 20 (expression -> GLOBAL_VAR .)
    LESS_EQUAL      reduce using rule 20 (expression -> GLOBAL_VAR .)
    EQUALS          reduce using rule 20 (expression -> GLOBAL_VAR .)
    NOT_EQUALS      reduce using rule 20 (expression -> GLOBAL_VAR .)
    PLUS            reduce using rule 20 (expression -> GLOBAL_VAR .)
    MINUS           reduce using rule 20 (expression -> GLOBAL_VAR .)
    IDENTIFIER      reduce using rule 20 (expression -> GLOBAL_VAR .)
    GLOBAL_VAR      reduce using rule 20 (expression -> GLOBAL_VAR .)
    IF              reduce using rule 20 (expression -> GLOBAL_VAR .)
    DEF             reduce using rule 20 (expression -> GLOBAL_VAR .)
    INSTANCE_VAR    reduce using rule 20 (expression -> GLOBAL_VAR .)
    SETNEW          reduce using rule 20 (expression -> GLOBAL_VAR .)
    WHILE           reduce using rule 20 (expression -> GLOBAL_VAR .)
    FOR             reduce using rule 20 (expression -> GLOBAL_VAR .)
    PUTS            reduce using rule 20 (expression -> GLOBAL_VAR .)
    LBRACE          reduce using rule 20 (expression -> GLOBAL_VAR .)
    LBRACKET        reduce using rule 20 (expression -> GLOBAL_VAR .)
    STRING          reduce using rule 20 (expression -> GLOBAL_VAR .)
    INTEGER         reduce using rule 20 (expression -> GLOBAL_VAR .)
    FLOAT           reduce using rule 20 (expression -> GLOBAL_VAR .)
    LPAREN          reduce using rule 20 (expression -> GLOBAL_VAR .)
    RPAREN          reduce using rule 20 (expression -> GLOBAL_VAR .)
    HASH_ROCKET     reduce using rule 20 (expression -> GLOBAL_VAR .)
    RBRACKET        reduce using rule 20 (expression -> GLOBAL_VAR .)
    COMMA           reduce using rule 20 (expression -> GLOBAL_VAR .)
    END             reduce using rule 20 (expression -> GLOBAL_VAR .)
    $end            reduce using rule 20 (expression -> GLOBAL_VAR .)
    ELSE            reduce using rule 20 (expression -> GLOBAL_VAR .)
    ELSIF           reduce using rule 20 (expression -> GLOBAL_VAR .)
    RBRACE          reduce using rule 20 (expression -> GLOBAL_VAR .)


state 39

    (21) expression -> INSTANCE_VAR .

    GREATER         reduce using rule 21 (expression -> INSTANCE_VAR .)
    LESS            reduce using rule 21 (expression -> INSTANCE_VAR .)
    GREATER_EQUAL   reduce using rule 21 (expression -> INSTANCE_VAR .)
    LESS_EQUAL      reduce using rule 21 (expression -> INSTANCE_VAR .)
    EQUALS          reduce using rule 21 (expression -> INSTANCE_VAR .)
    NOT_EQUALS      reduce using rule 21 (expression -> INSTANCE_VAR .)
    PLUS            reduce using rule 21 (expression -> INSTANCE_VAR .)
    MINUS           reduce using rule 21 (expression -> INSTANCE_VAR .)
    IDENTIFIER      reduce using rule 21 (expression -> INSTANCE_VAR .)
    GLOBAL_VAR      reduce using rule 21 (expression -> INSTANCE_VAR .)
    IF              reduce using rule 21 (expression -> INSTANCE_VAR .)
    DEF             reduce using rule 21 (expression -> INSTANCE_VAR .)
    INSTANCE_VAR    reduce using rule 21 (expression -> INSTANCE_VAR .)
    SETNEW          reduce using rule 21 (expression -> INSTANCE_VAR .)
    WHILE           reduce using rule 21 (expression -> INSTANCE_VAR .)
    FOR             reduce using rule 21 (expression -> INSTANCE_VAR .)
    PUTS            reduce using rule 21 (expression -> INSTANCE_VAR .)
    LBRACE          reduce using rule 21 (expression -> INSTANCE_VAR .)
    LBRACKET        reduce using rule 21 (expression -> INSTANCE_VAR .)
    STRING          reduce using rule 21 (expression -> INSTANCE_VAR .)
    INTEGER         reduce using rule 21 (expression -> INSTANCE_VAR .)
    FLOAT           reduce using rule 21 (expression -> INSTANCE_VAR .)
    LPAREN          reduce using rule 21 (expression -> INSTANCE_VAR .)
    RPAREN          reduce using rule 21 (expression -> INSTANCE_VAR .)
    HASH_ROCKET     reduce using rule 21 (expression -> INSTANCE_VAR .)
    RBRACKET        reduce using rule 21 (expression -> INSTANCE_VAR .)
    COMMA           reduce using rule 21 (expression -> INSTANCE_VAR .)
    END             reduce using rule 21 (expression -> INSTANCE_VAR .)
    $end            reduce using rule 21 (expression -> INSTANCE_VAR .)
    ELSE            reduce using rule 21 (expression -> INSTANCE_VAR .)
    ELSIF           reduce using rule 21 (expression -> INSTANCE_VAR .)
    RBRACE          reduce using rule 21 (expression -> INSTANCE_VAR .)


state 40

    (33) statement -> DEF IDENTIFIER . statement END
    (43) statement -> DEF IDENTIFIER . LPAREN params RPAREN statement END
    (7) statement -> . expression
    (8) statement -> . IDENTIFIER ASSIGN INTEGER
    (9) statement -> . IDENTIFIER ASSIGN FLOAT
    (10) statement -> . GLOBAL_VAR ASSIGN STRING
    (11) statement -> . GLOBAL_VAR ASSIGN expression
    (22) statement -> . statement statement
    (23) statement -> . IF expression statement END
    (24) statement -> . IF expression statement ELSE statement END
    (25) statement -> . IF expression statement ELSIF expression statement END
    (26) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (33) statement -> . DEF IDENTIFIER statement END
    (34) statement -> . IDENTIFIER
    (35) statement -> . INSTANCE_VAR ASSIGN INTEGER
    (36) statement -> . INSTANCE_VAR ASSIGN FLOAT
    (37) statement -> . SETNEW LPAREN optional_elements RPAREN
    (41) statement -> . WHILE expression statement END
    (42) statement -> . IDENTIFIER ASSIGN GETS
    (43) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (44) statement -> . IDENTIFIER LPAREN params RPAREN
    (56) statement -> . FOR IDENTIFIER IN range statement
    (59) statement -> . PUTS statement
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 73
    IDENTIFIER      shift and go to state 5
    GLOBAL_VAR      shift and go to state 8
    IF              shift and go to state 10
    DEF             shift and go to state 11
    INSTANCE_VAR    shift and go to state 12
    SETNEW          shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7

    statement                      shift and go to state 72
    expression                     shift and go to state 4
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 41

    (35) statement -> INSTANCE_VAR ASSIGN . INTEGER
    (36) statement -> INSTANCE_VAR ASSIGN . FLOAT

    INTEGER         shift and go to state 74
    FLOAT           shift and go to state 75


state 42

    (37) statement -> SETNEW LPAREN . optional_elements RPAREN
    (38) optional_elements -> . elements
    (39) optional_elements -> . empty
    (54) elements -> . expression
    (55) elements -> . elements COMMA expression
    (40) empty -> .
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    RPAREN          reduce using rule 40 (empty -> .)
    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 37
    GLOBAL_VAR      shift and go to state 38
    INSTANCE_VAR    shift and go to state 39
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    optional_elements              shift and go to state 76
    elements                       shift and go to state 77
    empty                          shift and go to state 78
    expression                     shift and go to state 55
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 43

    (52) factor -> LPAREN expression . RPAREN
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression
    (29) expression -> expression . GREATER_EQUAL expression
    (30) expression -> expression . LESS_EQUAL expression
    (31) expression -> expression . EQUALS expression
    (32) expression -> expression . NOT_EQUALS expression
    (48) expression -> expression . PLUS factor
    (49) expression -> expression . MINUS factor

    RPAREN          shift and go to state 79
    GREATER         shift and go to state 25
    LESS            shift and go to state 26
    GREATER_EQUAL   shift and go to state 27
    LESS_EQUAL      shift and go to state 28
    EQUALS          shift and go to state 29
    NOT_EQUALS      shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32


state 44

    (41) statement -> WHILE expression . statement END
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression
    (29) expression -> expression . GREATER_EQUAL expression
    (30) expression -> expression . LESS_EQUAL expression
    (31) expression -> expression . EQUALS expression
    (32) expression -> expression . NOT_EQUALS expression
    (48) expression -> expression . PLUS factor
    (49) expression -> expression . MINUS factor
    (7) statement -> . expression
    (8) statement -> . IDENTIFIER ASSIGN INTEGER
    (9) statement -> . IDENTIFIER ASSIGN FLOAT
    (10) statement -> . GLOBAL_VAR ASSIGN STRING
    (11) statement -> . GLOBAL_VAR ASSIGN expression
    (22) statement -> . statement statement
    (23) statement -> . IF expression statement END
    (24) statement -> . IF expression statement ELSE statement END
    (25) statement -> . IF expression statement ELSIF expression statement END
    (26) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (33) statement -> . DEF IDENTIFIER statement END
    (34) statement -> . IDENTIFIER
    (35) statement -> . INSTANCE_VAR ASSIGN INTEGER
    (36) statement -> . INSTANCE_VAR ASSIGN FLOAT
    (37) statement -> . SETNEW LPAREN optional_elements RPAREN
    (41) statement -> . WHILE expression statement END
    (42) statement -> . IDENTIFIER ASSIGN GETS
    (43) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (44) statement -> . IDENTIFIER LPAREN params RPAREN
    (56) statement -> . FOR IDENTIFIER IN range statement
    (59) statement -> . PUTS statement
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    GREATER         shift and go to state 25
    LESS            shift and go to state 26
    GREATER_EQUAL   shift and go to state 27
    LESS_EQUAL      shift and go to state 28
    EQUALS          shift and go to state 29
    NOT_EQUALS      shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    IDENTIFIER      shift and go to state 5
    GLOBAL_VAR      shift and go to state 8
    IF              shift and go to state 10
    DEF             shift and go to state 11
    INSTANCE_VAR    shift and go to state 12
    SETNEW          shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    expression                     shift and go to state 4
    statement                      shift and go to state 80
    factor                         shift and go to state 20
    term                           shift and go to state 19

state 45

    (56) statement -> FOR IDENTIFIER . IN range statement

    IN              shift and go to state 81


state 46

    (59) statement -> PUTS statement .
    (22) statement -> statement . statement
    (7) statement -> . expression
    (8) statement -> . IDENTIFIER ASSIGN INTEGER
    (9) statement -> . IDENTIFIER ASSIGN FLOAT
    (10) statement -> . GLOBAL_VAR ASSIGN STRING
    (11) statement -> . GLOBAL_VAR ASSIGN expression
    (22) statement -> . statement statement
    (23) statement -> . IF expression statement END
    (24) statement -> . IF expression statement ELSE statement END
    (25) statement -> . IF expression statement ELSIF expression statement END
    (26) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (33) statement -> . DEF IDENTIFIER statement END
    (34) statement -> . IDENTIFIER
    (35) statement -> . INSTANCE_VAR ASSIGN INTEGER
    (36) statement -> . INSTANCE_VAR ASSIGN FLOAT
    (37) statement -> . SETNEW LPAREN optional_elements RPAREN
    (41) statement -> . WHILE expression statement END
    (42) statement -> . IDENTIFIER ASSIGN GETS
    (43) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (44) statement -> . IDENTIFIER LPAREN params RPAREN
    (56) statement -> . FOR IDENTIFIER IN range statement
    (59) statement -> . PUTS statement
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for SETNEW resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    END             reduce using rule 59 (statement -> PUTS statement .)
    $end            reduce using rule 59 (statement -> PUTS statement .)
    ELSE            reduce using rule 59 (statement -> PUTS statement .)
    ELSIF           reduce using rule 59 (statement -> PUTS statement .)
    IDENTIFIER      shift and go to state 5
    GLOBAL_VAR      shift and go to state 8
    IF              shift and go to state 10
    DEF             shift and go to state 11
    INSTANCE_VAR    shift and go to state 12
    SETNEW          shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

  ! IDENTIFIER      [ reduce using rule 59 (statement -> PUTS statement .) ]
  ! GLOBAL_VAR      [ reduce using rule 59 (statement -> PUTS statement .) ]
  ! IF              [ reduce using rule 59 (statement -> PUTS statement .) ]
  ! DEF             [ reduce using rule 59 (statement -> PUTS statement .) ]
  ! INSTANCE_VAR    [ reduce using rule 59 (statement -> PUTS statement .) ]
  ! SETNEW          [ reduce using rule 59 (statement -> PUTS statement .) ]
  ! WHILE           [ reduce using rule 59 (statement -> PUTS statement .) ]
  ! FOR             [ reduce using rule 59 (statement -> PUTS statement .) ]
  ! PUTS            [ reduce using rule 59 (statement -> PUTS statement .) ]
  ! LBRACE          [ reduce using rule 59 (statement -> PUTS statement .) ]
  ! LBRACKET        [ reduce using rule 59 (statement -> PUTS statement .) ]
  ! STRING          [ reduce using rule 59 (statement -> PUTS statement .) ]
  ! INTEGER         [ reduce using rule 59 (statement -> PUTS statement .) ]
  ! FLOAT           [ reduce using rule 59 (statement -> PUTS statement .) ]
  ! LPAREN          [ reduce using rule 59 (statement -> PUTS statement .) ]

    statement                      shift and go to state 24
    expression                     shift and go to state 4
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 47

    (14) expression -> LBRACE key_value_pairs . RBRACE
    (17) key_value_pairs -> key_value_pairs . COMMA key_value

    RBRACE          shift and go to state 82
    COMMA           shift and go to state 83


state 48

    (15) expression -> LBRACE RBRACE .

    GREATER         reduce using rule 15 (expression -> LBRACE RBRACE .)
    LESS            reduce using rule 15 (expression -> LBRACE RBRACE .)
    GREATER_EQUAL   reduce using rule 15 (expression -> LBRACE RBRACE .)
    LESS_EQUAL      reduce using rule 15 (expression -> LBRACE RBRACE .)
    EQUALS          reduce using rule 15 (expression -> LBRACE RBRACE .)
    NOT_EQUALS      reduce using rule 15 (expression -> LBRACE RBRACE .)
    PLUS            reduce using rule 15 (expression -> LBRACE RBRACE .)
    MINUS           reduce using rule 15 (expression -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 15 (expression -> LBRACE RBRACE .)
    GLOBAL_VAR      reduce using rule 15 (expression -> LBRACE RBRACE .)
    IF              reduce using rule 15 (expression -> LBRACE RBRACE .)
    DEF             reduce using rule 15 (expression -> LBRACE RBRACE .)
    INSTANCE_VAR    reduce using rule 15 (expression -> LBRACE RBRACE .)
    SETNEW          reduce using rule 15 (expression -> LBRACE RBRACE .)
    WHILE           reduce using rule 15 (expression -> LBRACE RBRACE .)
    FOR             reduce using rule 15 (expression -> LBRACE RBRACE .)
    PUTS            reduce using rule 15 (expression -> LBRACE RBRACE .)
    LBRACE          reduce using rule 15 (expression -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 15 (expression -> LBRACE RBRACE .)
    STRING          reduce using rule 15 (expression -> LBRACE RBRACE .)
    INTEGER         reduce using rule 15 (expression -> LBRACE RBRACE .)
    FLOAT           reduce using rule 15 (expression -> LBRACE RBRACE .)
    LPAREN          reduce using rule 15 (expression -> LBRACE RBRACE .)
    END             reduce using rule 15 (expression -> LBRACE RBRACE .)
    $end            reduce using rule 15 (expression -> LBRACE RBRACE .)
    RPAREN          reduce using rule 15 (expression -> LBRACE RBRACE .)
    ELSE            reduce using rule 15 (expression -> LBRACE RBRACE .)
    ELSIF           reduce using rule 15 (expression -> LBRACE RBRACE .)
    HASH_ROCKET     reduce using rule 15 (expression -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 15 (expression -> LBRACE RBRACE .)
    COMMA           reduce using rule 15 (expression -> LBRACE RBRACE .)
    RBRACE          reduce using rule 15 (expression -> LBRACE RBRACE .)


state 49

    (16) key_value_pairs -> key_value .

    RBRACE          reduce using rule 16 (key_value_pairs -> key_value .)
    COMMA           reduce using rule 16 (key_value_pairs -> key_value .)


state 50

    (18) key_value -> expression . HASH_ROCKET expression
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression
    (29) expression -> expression . GREATER_EQUAL expression
    (30) expression -> expression . LESS_EQUAL expression
    (31) expression -> expression . EQUALS expression
    (32) expression -> expression . NOT_EQUALS expression
    (48) expression -> expression . PLUS factor
    (49) expression -> expression . MINUS factor

    HASH_ROCKET     shift and go to state 84
    GREATER         shift and go to state 25
    LESS            shift and go to state 26
    GREATER_EQUAL   shift and go to state 27
    LESS_EQUAL      shift and go to state 28
    EQUALS          shift and go to state 29
    NOT_EQUALS      shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32


state 51

    (46) term -> factor DIVIDE . factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    factor                         shift and go to state 85

state 52

    (47) term -> factor TIMES . factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    factor                         shift and go to state 86

state 53

    (12) factor -> factor POWER . factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    factor                         shift and go to state 87

state 54

    (53) expression -> LBRACKET elements . RBRACKET
    (55) elements -> elements . COMMA expression

    RBRACKET        shift and go to state 88
    COMMA           shift and go to state 89


state 55

    (54) elements -> expression .
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression
    (29) expression -> expression . GREATER_EQUAL expression
    (30) expression -> expression . LESS_EQUAL expression
    (31) expression -> expression . EQUALS expression
    (32) expression -> expression . NOT_EQUALS expression
    (48) expression -> expression . PLUS factor
    (49) expression -> expression . MINUS factor

    RBRACKET        reduce using rule 54 (elements -> expression .)
    COMMA           reduce using rule 54 (elements -> expression .)
    RPAREN          reduce using rule 54 (elements -> expression .)
    GREATER         shift and go to state 25
    LESS            shift and go to state 26
    GREATER_EQUAL   shift and go to state 27
    LESS_EQUAL      shift and go to state 28
    EQUALS          shift and go to state 29
    NOT_EQUALS      shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32


state 56

    (27) expression -> expression GREATER expression .
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression
    (29) expression -> expression . GREATER_EQUAL expression
    (30) expression -> expression . LESS_EQUAL expression
    (31) expression -> expression . EQUALS expression
    (32) expression -> expression . NOT_EQUALS expression
    (48) expression -> expression . PLUS factor
    (49) expression -> expression . MINUS factor

    GREATER         reduce using rule 27 (expression -> expression GREATER expression .)
    LESS            reduce using rule 27 (expression -> expression GREATER expression .)
    GREATER_EQUAL   reduce using rule 27 (expression -> expression GREATER expression .)
    LESS_EQUAL      reduce using rule 27 (expression -> expression GREATER expression .)
    EQUALS          reduce using rule 27 (expression -> expression GREATER expression .)
    NOT_EQUALS      reduce using rule 27 (expression -> expression GREATER expression .)
    IDENTIFIER      reduce using rule 27 (expression -> expression GREATER expression .)
    GLOBAL_VAR      reduce using rule 27 (expression -> expression GREATER expression .)
    IF              reduce using rule 27 (expression -> expression GREATER expression .)
    DEF             reduce using rule 27 (expression -> expression GREATER expression .)
    INSTANCE_VAR    reduce using rule 27 (expression -> expression GREATER expression .)
    SETNEW          reduce using rule 27 (expression -> expression GREATER expression .)
    WHILE           reduce using rule 27 (expression -> expression GREATER expression .)
    FOR             reduce using rule 27 (expression -> expression GREATER expression .)
    PUTS            reduce using rule 27 (expression -> expression GREATER expression .)
    LBRACE          reduce using rule 27 (expression -> expression GREATER expression .)
    LBRACKET        reduce using rule 27 (expression -> expression GREATER expression .)
    STRING          reduce using rule 27 (expression -> expression GREATER expression .)
    INTEGER         reduce using rule 27 (expression -> expression GREATER expression .)
    FLOAT           reduce using rule 27 (expression -> expression GREATER expression .)
    LPAREN          reduce using rule 27 (expression -> expression GREATER expression .)
    END             reduce using rule 27 (expression -> expression GREATER expression .)
    $end            reduce using rule 27 (expression -> expression GREATER expression .)
    RPAREN          reduce using rule 27 (expression -> expression GREATER expression .)
    ELSE            reduce using rule 27 (expression -> expression GREATER expression .)
    ELSIF           reduce using rule 27 (expression -> expression GREATER expression .)
    HASH_ROCKET     reduce using rule 27 (expression -> expression GREATER expression .)
    RBRACKET        reduce using rule 27 (expression -> expression GREATER expression .)
    COMMA           reduce using rule 27 (expression -> expression GREATER expression .)
    RBRACE          reduce using rule 27 (expression -> expression GREATER expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32

  ! PLUS            [ reduce using rule 27 (expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 27 (expression -> expression GREATER expression .) ]
  ! GREATER         [ shift and go to state 25 ]
  ! LESS            [ shift and go to state 26 ]
  ! GREATER_EQUAL   [ shift and go to state 27 ]
  ! LESS_EQUAL      [ shift and go to state 28 ]
  ! EQUALS          [ shift and go to state 29 ]
  ! NOT_EQUALS      [ shift and go to state 30 ]


state 57

    (28) expression -> expression LESS expression .
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression
    (29) expression -> expression . GREATER_EQUAL expression
    (30) expression -> expression . LESS_EQUAL expression
    (31) expression -> expression . EQUALS expression
    (32) expression -> expression . NOT_EQUALS expression
    (48) expression -> expression . PLUS factor
    (49) expression -> expression . MINUS factor

    GREATER         reduce using rule 28 (expression -> expression LESS expression .)
    LESS            reduce using rule 28 (expression -> expression LESS expression .)
    GREATER_EQUAL   reduce using rule 28 (expression -> expression LESS expression .)
    LESS_EQUAL      reduce using rule 28 (expression -> expression LESS expression .)
    EQUALS          reduce using rule 28 (expression -> expression LESS expression .)
    NOT_EQUALS      reduce using rule 28 (expression -> expression LESS expression .)
    IDENTIFIER      reduce using rule 28 (expression -> expression LESS expression .)
    GLOBAL_VAR      reduce using rule 28 (expression -> expression LESS expression .)
    IF              reduce using rule 28 (expression -> expression LESS expression .)
    DEF             reduce using rule 28 (expression -> expression LESS expression .)
    INSTANCE_VAR    reduce using rule 28 (expression -> expression LESS expression .)
    SETNEW          reduce using rule 28 (expression -> expression LESS expression .)
    WHILE           reduce using rule 28 (expression -> expression LESS expression .)
    FOR             reduce using rule 28 (expression -> expression LESS expression .)
    PUTS            reduce using rule 28 (expression -> expression LESS expression .)
    LBRACE          reduce using rule 28 (expression -> expression LESS expression .)
    LBRACKET        reduce using rule 28 (expression -> expression LESS expression .)
    STRING          reduce using rule 28 (expression -> expression LESS expression .)
    INTEGER         reduce using rule 28 (expression -> expression LESS expression .)
    FLOAT           reduce using rule 28 (expression -> expression LESS expression .)
    LPAREN          reduce using rule 28 (expression -> expression LESS expression .)
    END             reduce using rule 28 (expression -> expression LESS expression .)
    $end            reduce using rule 28 (expression -> expression LESS expression .)
    RPAREN          reduce using rule 28 (expression -> expression LESS expression .)
    ELSE            reduce using rule 28 (expression -> expression LESS expression .)
    ELSIF           reduce using rule 28 (expression -> expression LESS expression .)
    HASH_ROCKET     reduce using rule 28 (expression -> expression LESS expression .)
    RBRACKET        reduce using rule 28 (expression -> expression LESS expression .)
    COMMA           reduce using rule 28 (expression -> expression LESS expression .)
    RBRACE          reduce using rule 28 (expression -> expression LESS expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32

  ! PLUS            [ reduce using rule 28 (expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 28 (expression -> expression LESS expression .) ]
  ! GREATER         [ shift and go to state 25 ]
  ! LESS            [ shift and go to state 26 ]
  ! GREATER_EQUAL   [ shift and go to state 27 ]
  ! LESS_EQUAL      [ shift and go to state 28 ]
  ! EQUALS          [ shift and go to state 29 ]
  ! NOT_EQUALS      [ shift and go to state 30 ]


state 58

    (29) expression -> expression GREATER_EQUAL expression .
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression
    (29) expression -> expression . GREATER_EQUAL expression
    (30) expression -> expression . LESS_EQUAL expression
    (31) expression -> expression . EQUALS expression
    (32) expression -> expression . NOT_EQUALS expression
    (48) expression -> expression . PLUS factor
    (49) expression -> expression . MINUS factor

    GREATER         reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    LESS            reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    LESS_EQUAL      reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    EQUALS          reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    NOT_EQUALS      reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    IDENTIFIER      reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    GLOBAL_VAR      reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    IF              reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    DEF             reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    INSTANCE_VAR    reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    SETNEW          reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    WHILE           reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    FOR             reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    PUTS            reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    LBRACE          reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    LBRACKET        reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    STRING          reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    INTEGER         reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    FLOAT           reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    LPAREN          reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    END             reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    $end            reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    RPAREN          reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    ELSE            reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    ELSIF           reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    HASH_ROCKET     reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    RBRACKET        reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    COMMA           reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    RBRACE          reduce using rule 29 (expression -> expression GREATER_EQUAL expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32

  ! PLUS            [ reduce using rule 29 (expression -> expression GREATER_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 29 (expression -> expression GREATER_EQUAL expression .) ]
  ! GREATER         [ shift and go to state 25 ]
  ! LESS            [ shift and go to state 26 ]
  ! GREATER_EQUAL   [ shift and go to state 27 ]
  ! LESS_EQUAL      [ shift and go to state 28 ]
  ! EQUALS          [ shift and go to state 29 ]
  ! NOT_EQUALS      [ shift and go to state 30 ]


state 59

    (30) expression -> expression LESS_EQUAL expression .
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression
    (29) expression -> expression . GREATER_EQUAL expression
    (30) expression -> expression . LESS_EQUAL expression
    (31) expression -> expression . EQUALS expression
    (32) expression -> expression . NOT_EQUALS expression
    (48) expression -> expression . PLUS factor
    (49) expression -> expression . MINUS factor

    GREATER         reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    LESS            reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    LESS_EQUAL      reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    EQUALS          reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    NOT_EQUALS      reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    IDENTIFIER      reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    GLOBAL_VAR      reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    IF              reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    DEF             reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    INSTANCE_VAR    reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    SETNEW          reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    WHILE           reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    FOR             reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    PUTS            reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    LBRACE          reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    LBRACKET        reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    STRING          reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    INTEGER         reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    FLOAT           reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    LPAREN          reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    END             reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    $end            reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    RPAREN          reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    ELSE            reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    ELSIF           reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    HASH_ROCKET     reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    RBRACKET        reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    COMMA           reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    RBRACE          reduce using rule 30 (expression -> expression LESS_EQUAL expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32

  ! PLUS            [ reduce using rule 30 (expression -> expression LESS_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 30 (expression -> expression LESS_EQUAL expression .) ]
  ! GREATER         [ shift and go to state 25 ]
  ! LESS            [ shift and go to state 26 ]
  ! GREATER_EQUAL   [ shift and go to state 27 ]
  ! LESS_EQUAL      [ shift and go to state 28 ]
  ! EQUALS          [ shift and go to state 29 ]
  ! NOT_EQUALS      [ shift and go to state 30 ]


state 60

    (31) expression -> expression EQUALS expression .
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression
    (29) expression -> expression . GREATER_EQUAL expression
    (30) expression -> expression . LESS_EQUAL expression
    (31) expression -> expression . EQUALS expression
    (32) expression -> expression . NOT_EQUALS expression
    (48) expression -> expression . PLUS factor
    (49) expression -> expression . MINUS factor

    GREATER         reduce using rule 31 (expression -> expression EQUALS expression .)
    LESS            reduce using rule 31 (expression -> expression EQUALS expression .)
    GREATER_EQUAL   reduce using rule 31 (expression -> expression EQUALS expression .)
    LESS_EQUAL      reduce using rule 31 (expression -> expression EQUALS expression .)
    EQUALS          reduce using rule 31 (expression -> expression EQUALS expression .)
    NOT_EQUALS      reduce using rule 31 (expression -> expression EQUALS expression .)
    IDENTIFIER      reduce using rule 31 (expression -> expression EQUALS expression .)
    GLOBAL_VAR      reduce using rule 31 (expression -> expression EQUALS expression .)
    IF              reduce using rule 31 (expression -> expression EQUALS expression .)
    DEF             reduce using rule 31 (expression -> expression EQUALS expression .)
    INSTANCE_VAR    reduce using rule 31 (expression -> expression EQUALS expression .)
    SETNEW          reduce using rule 31 (expression -> expression EQUALS expression .)
    WHILE           reduce using rule 31 (expression -> expression EQUALS expression .)
    FOR             reduce using rule 31 (expression -> expression EQUALS expression .)
    PUTS            reduce using rule 31 (expression -> expression EQUALS expression .)
    LBRACE          reduce using rule 31 (expression -> expression EQUALS expression .)
    LBRACKET        reduce using rule 31 (expression -> expression EQUALS expression .)
    STRING          reduce using rule 31 (expression -> expression EQUALS expression .)
    INTEGER         reduce using rule 31 (expression -> expression EQUALS expression .)
    FLOAT           reduce using rule 31 (expression -> expression EQUALS expression .)
    LPAREN          reduce using rule 31 (expression -> expression EQUALS expression .)
    END             reduce using rule 31 (expression -> expression EQUALS expression .)
    $end            reduce using rule 31 (expression -> expression EQUALS expression .)
    RPAREN          reduce using rule 31 (expression -> expression EQUALS expression .)
    ELSE            reduce using rule 31 (expression -> expression EQUALS expression .)
    ELSIF           reduce using rule 31 (expression -> expression EQUALS expression .)
    HASH_ROCKET     reduce using rule 31 (expression -> expression EQUALS expression .)
    RBRACKET        reduce using rule 31 (expression -> expression EQUALS expression .)
    COMMA           reduce using rule 31 (expression -> expression EQUALS expression .)
    RBRACE          reduce using rule 31 (expression -> expression EQUALS expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32

  ! PLUS            [ reduce using rule 31 (expression -> expression EQUALS expression .) ]
  ! MINUS           [ reduce using rule 31 (expression -> expression EQUALS expression .) ]
  ! GREATER         [ shift and go to state 25 ]
  ! LESS            [ shift and go to state 26 ]
  ! GREATER_EQUAL   [ shift and go to state 27 ]
  ! LESS_EQUAL      [ shift and go to state 28 ]
  ! EQUALS          [ shift and go to state 29 ]
  ! NOT_EQUALS      [ shift and go to state 30 ]


state 61

    (32) expression -> expression NOT_EQUALS expression .
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression
    (29) expression -> expression . GREATER_EQUAL expression
    (30) expression -> expression . LESS_EQUAL expression
    (31) expression -> expression . EQUALS expression
    (32) expression -> expression . NOT_EQUALS expression
    (48) expression -> expression . PLUS factor
    (49) expression -> expression . MINUS factor

    GREATER         reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    LESS            reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    GREATER_EQUAL   reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    LESS_EQUAL      reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    EQUALS          reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    NOT_EQUALS      reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    IDENTIFIER      reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    GLOBAL_VAR      reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    IF              reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    DEF             reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    INSTANCE_VAR    reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    SETNEW          reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    WHILE           reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    FOR             reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    PUTS            reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    LBRACE          reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    LBRACKET        reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    STRING          reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    INTEGER         reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    FLOAT           reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    LPAREN          reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    END             reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    $end            reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    RPAREN          reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    ELSE            reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    ELSIF           reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    HASH_ROCKET     reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    RBRACKET        reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    COMMA           reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    RBRACE          reduce using rule 32 (expression -> expression NOT_EQUALS expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32

  ! PLUS            [ reduce using rule 32 (expression -> expression NOT_EQUALS expression .) ]
  ! MINUS           [ reduce using rule 32 (expression -> expression NOT_EQUALS expression .) ]
  ! GREATER         [ shift and go to state 25 ]
  ! LESS            [ shift and go to state 26 ]
  ! GREATER_EQUAL   [ shift and go to state 27 ]
  ! LESS_EQUAL      [ shift and go to state 28 ]
  ! EQUALS          [ shift and go to state 29 ]
  ! NOT_EQUALS      [ shift and go to state 30 ]


state 62

    (48) expression -> expression PLUS factor .
    (12) factor -> factor . POWER factor

    GREATER         reduce using rule 48 (expression -> expression PLUS factor .)
    LESS            reduce using rule 48 (expression -> expression PLUS factor .)
    GREATER_EQUAL   reduce using rule 48 (expression -> expression PLUS factor .)
    LESS_EQUAL      reduce using rule 48 (expression -> expression PLUS factor .)
    EQUALS          reduce using rule 48 (expression -> expression PLUS factor .)
    NOT_EQUALS      reduce using rule 48 (expression -> expression PLUS factor .)
    PLUS            reduce using rule 48 (expression -> expression PLUS factor .)
    MINUS           reduce using rule 48 (expression -> expression PLUS factor .)
    IDENTIFIER      reduce using rule 48 (expression -> expression PLUS factor .)
    GLOBAL_VAR      reduce using rule 48 (expression -> expression PLUS factor .)
    IF              reduce using rule 48 (expression -> expression PLUS factor .)
    DEF             reduce using rule 48 (expression -> expression PLUS factor .)
    INSTANCE_VAR    reduce using rule 48 (expression -> expression PLUS factor .)
    SETNEW          reduce using rule 48 (expression -> expression PLUS factor .)
    WHILE           reduce using rule 48 (expression -> expression PLUS factor .)
    FOR             reduce using rule 48 (expression -> expression PLUS factor .)
    PUTS            reduce using rule 48 (expression -> expression PLUS factor .)
    LBRACE          reduce using rule 48 (expression -> expression PLUS factor .)
    LBRACKET        reduce using rule 48 (expression -> expression PLUS factor .)
    STRING          reduce using rule 48 (expression -> expression PLUS factor .)
    INTEGER         reduce using rule 48 (expression -> expression PLUS factor .)
    FLOAT           reduce using rule 48 (expression -> expression PLUS factor .)
    LPAREN          reduce using rule 48 (expression -> expression PLUS factor .)
    END             reduce using rule 48 (expression -> expression PLUS factor .)
    $end            reduce using rule 48 (expression -> expression PLUS factor .)
    RPAREN          reduce using rule 48 (expression -> expression PLUS factor .)
    ELSE            reduce using rule 48 (expression -> expression PLUS factor .)
    ELSIF           reduce using rule 48 (expression -> expression PLUS factor .)
    HASH_ROCKET     reduce using rule 48 (expression -> expression PLUS factor .)
    RBRACKET        reduce using rule 48 (expression -> expression PLUS factor .)
    COMMA           reduce using rule 48 (expression -> expression PLUS factor .)
    RBRACE          reduce using rule 48 (expression -> expression PLUS factor .)
    POWER           shift and go to state 53


state 63

    (49) expression -> expression MINUS factor .
    (12) factor -> factor . POWER factor

    GREATER         reduce using rule 49 (expression -> expression MINUS factor .)
    LESS            reduce using rule 49 (expression -> expression MINUS factor .)
    GREATER_EQUAL   reduce using rule 49 (expression -> expression MINUS factor .)
    LESS_EQUAL      reduce using rule 49 (expression -> expression MINUS factor .)
    EQUALS          reduce using rule 49 (expression -> expression MINUS factor .)
    NOT_EQUALS      reduce using rule 49 (expression -> expression MINUS factor .)
    PLUS            reduce using rule 49 (expression -> expression MINUS factor .)
    MINUS           reduce using rule 49 (expression -> expression MINUS factor .)
    IDENTIFIER      reduce using rule 49 (expression -> expression MINUS factor .)
    GLOBAL_VAR      reduce using rule 49 (expression -> expression MINUS factor .)
    IF              reduce using rule 49 (expression -> expression MINUS factor .)
    DEF             reduce using rule 49 (expression -> expression MINUS factor .)
    INSTANCE_VAR    reduce using rule 49 (expression -> expression MINUS factor .)
    SETNEW          reduce using rule 49 (expression -> expression MINUS factor .)
    WHILE           reduce using rule 49 (expression -> expression MINUS factor .)
    FOR             reduce using rule 49 (expression -> expression MINUS factor .)
    PUTS            reduce using rule 49 (expression -> expression MINUS factor .)
    LBRACE          reduce using rule 49 (expression -> expression MINUS factor .)
    LBRACKET        reduce using rule 49 (expression -> expression MINUS factor .)
    STRING          reduce using rule 49 (expression -> expression MINUS factor .)
    INTEGER         reduce using rule 49 (expression -> expression MINUS factor .)
    FLOAT           reduce using rule 49 (expression -> expression MINUS factor .)
    LPAREN          reduce using rule 49 (expression -> expression MINUS factor .)
    END             reduce using rule 49 (expression -> expression MINUS factor .)
    $end            reduce using rule 49 (expression -> expression MINUS factor .)
    RPAREN          reduce using rule 49 (expression -> expression MINUS factor .)
    ELSE            reduce using rule 49 (expression -> expression MINUS factor .)
    ELSIF           reduce using rule 49 (expression -> expression MINUS factor .)
    HASH_ROCKET     reduce using rule 49 (expression -> expression MINUS factor .)
    RBRACKET        reduce using rule 49 (expression -> expression MINUS factor .)
    COMMA           reduce using rule 49 (expression -> expression MINUS factor .)
    RBRACE          reduce using rule 49 (expression -> expression MINUS factor .)
    POWER           shift and go to state 53


state 64

    (8) statement -> IDENTIFIER ASSIGN INTEGER .

    IDENTIFIER      reduce using rule 8 (statement -> IDENTIFIER ASSIGN INTEGER .)
    GLOBAL_VAR      reduce using rule 8 (statement -> IDENTIFIER ASSIGN INTEGER .)
    IF              reduce using rule 8 (statement -> IDENTIFIER ASSIGN INTEGER .)
    DEF             reduce using rule 8 (statement -> IDENTIFIER ASSIGN INTEGER .)
    INSTANCE_VAR    reduce using rule 8 (statement -> IDENTIFIER ASSIGN INTEGER .)
    SETNEW          reduce using rule 8 (statement -> IDENTIFIER ASSIGN INTEGER .)
    WHILE           reduce using rule 8 (statement -> IDENTIFIER ASSIGN INTEGER .)
    FOR             reduce using rule 8 (statement -> IDENTIFIER ASSIGN INTEGER .)
    PUTS            reduce using rule 8 (statement -> IDENTIFIER ASSIGN INTEGER .)
    LBRACE          reduce using rule 8 (statement -> IDENTIFIER ASSIGN INTEGER .)
    LBRACKET        reduce using rule 8 (statement -> IDENTIFIER ASSIGN INTEGER .)
    STRING          reduce using rule 8 (statement -> IDENTIFIER ASSIGN INTEGER .)
    INTEGER         reduce using rule 8 (statement -> IDENTIFIER ASSIGN INTEGER .)
    FLOAT           reduce using rule 8 (statement -> IDENTIFIER ASSIGN INTEGER .)
    LPAREN          reduce using rule 8 (statement -> IDENTIFIER ASSIGN INTEGER .)
    END             reduce using rule 8 (statement -> IDENTIFIER ASSIGN INTEGER .)
    $end            reduce using rule 8 (statement -> IDENTIFIER ASSIGN INTEGER .)
    ELSE            reduce using rule 8 (statement -> IDENTIFIER ASSIGN INTEGER .)
    ELSIF           reduce using rule 8 (statement -> IDENTIFIER ASSIGN INTEGER .)


state 65

    (9) statement -> IDENTIFIER ASSIGN FLOAT .

    IDENTIFIER      reduce using rule 9 (statement -> IDENTIFIER ASSIGN FLOAT .)
    GLOBAL_VAR      reduce using rule 9 (statement -> IDENTIFIER ASSIGN FLOAT .)
    IF              reduce using rule 9 (statement -> IDENTIFIER ASSIGN FLOAT .)
    DEF             reduce using rule 9 (statement -> IDENTIFIER ASSIGN FLOAT .)
    INSTANCE_VAR    reduce using rule 9 (statement -> IDENTIFIER ASSIGN FLOAT .)
    SETNEW          reduce using rule 9 (statement -> IDENTIFIER ASSIGN FLOAT .)
    WHILE           reduce using rule 9 (statement -> IDENTIFIER ASSIGN FLOAT .)
    FOR             reduce using rule 9 (statement -> IDENTIFIER ASSIGN FLOAT .)
    PUTS            reduce using rule 9 (statement -> IDENTIFIER ASSIGN FLOAT .)
    LBRACE          reduce using rule 9 (statement -> IDENTIFIER ASSIGN FLOAT .)
    LBRACKET        reduce using rule 9 (statement -> IDENTIFIER ASSIGN FLOAT .)
    STRING          reduce using rule 9 (statement -> IDENTIFIER ASSIGN FLOAT .)
    INTEGER         reduce using rule 9 (statement -> IDENTIFIER ASSIGN FLOAT .)
    FLOAT           reduce using rule 9 (statement -> IDENTIFIER ASSIGN FLOAT .)
    LPAREN          reduce using rule 9 (statement -> IDENTIFIER ASSIGN FLOAT .)
    END             reduce using rule 9 (statement -> IDENTIFIER ASSIGN FLOAT .)
    $end            reduce using rule 9 (statement -> IDENTIFIER ASSIGN FLOAT .)
    ELSE            reduce using rule 9 (statement -> IDENTIFIER ASSIGN FLOAT .)
    ELSIF           reduce using rule 9 (statement -> IDENTIFIER ASSIGN FLOAT .)


state 66

    (42) statement -> IDENTIFIER ASSIGN GETS .

    IDENTIFIER      reduce using rule 42 (statement -> IDENTIFIER ASSIGN GETS .)
    GLOBAL_VAR      reduce using rule 42 (statement -> IDENTIFIER ASSIGN GETS .)
    IF              reduce using rule 42 (statement -> IDENTIFIER ASSIGN GETS .)
    DEF             reduce using rule 42 (statement -> IDENTIFIER ASSIGN GETS .)
    INSTANCE_VAR    reduce using rule 42 (statement -> IDENTIFIER ASSIGN GETS .)
    SETNEW          reduce using rule 42 (statement -> IDENTIFIER ASSIGN GETS .)
    WHILE           reduce using rule 42 (statement -> IDENTIFIER ASSIGN GETS .)
    FOR             reduce using rule 42 (statement -> IDENTIFIER ASSIGN GETS .)
    PUTS            reduce using rule 42 (statement -> IDENTIFIER ASSIGN GETS .)
    LBRACE          reduce using rule 42 (statement -> IDENTIFIER ASSIGN GETS .)
    LBRACKET        reduce using rule 42 (statement -> IDENTIFIER ASSIGN GETS .)
    STRING          reduce using rule 42 (statement -> IDENTIFIER ASSIGN GETS .)
    INTEGER         reduce using rule 42 (statement -> IDENTIFIER ASSIGN GETS .)
    FLOAT           reduce using rule 42 (statement -> IDENTIFIER ASSIGN GETS .)
    LPAREN          reduce using rule 42 (statement -> IDENTIFIER ASSIGN GETS .)
    END             reduce using rule 42 (statement -> IDENTIFIER ASSIGN GETS .)
    $end            reduce using rule 42 (statement -> IDENTIFIER ASSIGN GETS .)
    ELSE            reduce using rule 42 (statement -> IDENTIFIER ASSIGN GETS .)
    ELSIF           reduce using rule 42 (statement -> IDENTIFIER ASSIGN GETS .)


state 67

    (3) params -> IDENTIFIER .

    RPAREN          reduce using rule 3 (params -> IDENTIFIER .)
    COMMA           reduce using rule 3 (params -> IDENTIFIER .)


state 68

    (44) statement -> IDENTIFIER LPAREN params . RPAREN
    (4) params -> params . COMMA IDENTIFIER

    RPAREN          shift and go to state 90
    COMMA           shift and go to state 91


state 69

    (10) statement -> GLOBAL_VAR ASSIGN STRING .
    (13) factor -> STRING .

    IDENTIFIER      reduce using rule 10 (statement -> GLOBAL_VAR ASSIGN STRING .)
    GLOBAL_VAR      reduce using rule 10 (statement -> GLOBAL_VAR ASSIGN STRING .)
    IF              reduce using rule 10 (statement -> GLOBAL_VAR ASSIGN STRING .)
    DEF             reduce using rule 10 (statement -> GLOBAL_VAR ASSIGN STRING .)
    INSTANCE_VAR    reduce using rule 10 (statement -> GLOBAL_VAR ASSIGN STRING .)
    SETNEW          reduce using rule 10 (statement -> GLOBAL_VAR ASSIGN STRING .)
    WHILE           reduce using rule 10 (statement -> GLOBAL_VAR ASSIGN STRING .)
    FOR             reduce using rule 10 (statement -> GLOBAL_VAR ASSIGN STRING .)
    PUTS            reduce using rule 10 (statement -> GLOBAL_VAR ASSIGN STRING .)
    LBRACE          reduce using rule 10 (statement -> GLOBAL_VAR ASSIGN STRING .)
    LBRACKET        reduce using rule 10 (statement -> GLOBAL_VAR ASSIGN STRING .)
    STRING          reduce using rule 10 (statement -> GLOBAL_VAR ASSIGN STRING .)
    INTEGER         reduce using rule 10 (statement -> GLOBAL_VAR ASSIGN STRING .)
    FLOAT           reduce using rule 10 (statement -> GLOBAL_VAR ASSIGN STRING .)
    LPAREN          reduce using rule 10 (statement -> GLOBAL_VAR ASSIGN STRING .)
    END             reduce using rule 10 (statement -> GLOBAL_VAR ASSIGN STRING .)
    $end            reduce using rule 10 (statement -> GLOBAL_VAR ASSIGN STRING .)
    ELSE            reduce using rule 10 (statement -> GLOBAL_VAR ASSIGN STRING .)
    ELSIF           reduce using rule 10 (statement -> GLOBAL_VAR ASSIGN STRING .)
    DIVIDE          reduce using rule 13 (factor -> STRING .)
    TIMES           reduce using rule 13 (factor -> STRING .)
    POWER           reduce using rule 13 (factor -> STRING .)


state 70

    (11) statement -> GLOBAL_VAR ASSIGN expression .
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression
    (29) expression -> expression . GREATER_EQUAL expression
    (30) expression -> expression . LESS_EQUAL expression
    (31) expression -> expression . EQUALS expression
    (32) expression -> expression . NOT_EQUALS expression
    (48) expression -> expression . PLUS factor
    (49) expression -> expression . MINUS factor

    IDENTIFIER      reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN expression .)
    GLOBAL_VAR      reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN expression .)
    IF              reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN expression .)
    DEF             reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN expression .)
    INSTANCE_VAR    reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN expression .)
    SETNEW          reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN expression .)
    WHILE           reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN expression .)
    FOR             reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN expression .)
    PUTS            reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN expression .)
    LBRACE          reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN expression .)
    LBRACKET        reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN expression .)
    STRING          reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN expression .)
    INTEGER         reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN expression .)
    FLOAT           reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN expression .)
    LPAREN          reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN expression .)
    END             reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN expression .)
    $end            reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN expression .)
    ELSE            reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN expression .)
    ELSIF           reduce using rule 11 (statement -> GLOBAL_VAR ASSIGN expression .)
    GREATER         shift and go to state 25
    LESS            shift and go to state 26
    GREATER_EQUAL   shift and go to state 27
    LESS_EQUAL      shift and go to state 28
    EQUALS          shift and go to state 29
    NOT_EQUALS      shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32


state 71

    (23) statement -> IF expression statement . END
    (24) statement -> IF expression statement . ELSE statement END
    (25) statement -> IF expression statement . ELSIF expression statement END
    (26) statement -> IF expression statement . ELSIF expression statement ELSE statement END
    (22) statement -> statement . statement
    (7) statement -> . expression
    (8) statement -> . IDENTIFIER ASSIGN INTEGER
    (9) statement -> . IDENTIFIER ASSIGN FLOAT
    (10) statement -> . GLOBAL_VAR ASSIGN STRING
    (11) statement -> . GLOBAL_VAR ASSIGN expression
    (22) statement -> . statement statement
    (23) statement -> . IF expression statement END
    (24) statement -> . IF expression statement ELSE statement END
    (25) statement -> . IF expression statement ELSIF expression statement END
    (26) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (33) statement -> . DEF IDENTIFIER statement END
    (34) statement -> . IDENTIFIER
    (35) statement -> . INSTANCE_VAR ASSIGN INTEGER
    (36) statement -> . INSTANCE_VAR ASSIGN FLOAT
    (37) statement -> . SETNEW LPAREN optional_elements RPAREN
    (41) statement -> . WHILE expression statement END
    (42) statement -> . IDENTIFIER ASSIGN GETS
    (43) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (44) statement -> . IDENTIFIER LPAREN params RPAREN
    (56) statement -> . FOR IDENTIFIER IN range statement
    (59) statement -> . PUTS statement
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    END             shift and go to state 92
    ELSE            shift and go to state 93
    ELSIF           shift and go to state 94
    IDENTIFIER      shift and go to state 5
    GLOBAL_VAR      shift and go to state 8
    IF              shift and go to state 10
    DEF             shift and go to state 11
    INSTANCE_VAR    shift and go to state 12
    SETNEW          shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    expression                     shift and go to state 4
    statement                      shift and go to state 24
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 72

    (33) statement -> DEF IDENTIFIER statement . END
    (22) statement -> statement . statement
    (7) statement -> . expression
    (8) statement -> . IDENTIFIER ASSIGN INTEGER
    (9) statement -> . IDENTIFIER ASSIGN FLOAT
    (10) statement -> . GLOBAL_VAR ASSIGN STRING
    (11) statement -> . GLOBAL_VAR ASSIGN expression
    (22) statement -> . statement statement
    (23) statement -> . IF expression statement END
    (24) statement -> . IF expression statement ELSE statement END
    (25) statement -> . IF expression statement ELSIF expression statement END
    (26) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (33) statement -> . DEF IDENTIFIER statement END
    (34) statement -> . IDENTIFIER
    (35) statement -> . INSTANCE_VAR ASSIGN INTEGER
    (36) statement -> . INSTANCE_VAR ASSIGN FLOAT
    (37) statement -> . SETNEW LPAREN optional_elements RPAREN
    (41) statement -> . WHILE expression statement END
    (42) statement -> . IDENTIFIER ASSIGN GETS
    (43) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (44) statement -> . IDENTIFIER LPAREN params RPAREN
    (56) statement -> . FOR IDENTIFIER IN range statement
    (59) statement -> . PUTS statement
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    END             shift and go to state 95
    IDENTIFIER      shift and go to state 5
    GLOBAL_VAR      shift and go to state 8
    IF              shift and go to state 10
    DEF             shift and go to state 11
    INSTANCE_VAR    shift and go to state 12
    SETNEW          shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    statement                      shift and go to state 24
    expression                     shift and go to state 4
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 73

    (43) statement -> DEF IDENTIFIER LPAREN . params RPAREN statement END
    (52) factor -> LPAREN . expression RPAREN
    (3) params -> . IDENTIFIER
    (4) params -> . params COMMA IDENTIFIER
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 96
    LBRACE          shift and go to state 18
    GLOBAL_VAR      shift and go to state 38
    INSTANCE_VAR    shift and go to state 39
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    params                         shift and go to state 97
    expression                     shift and go to state 43
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 74

    (35) statement -> INSTANCE_VAR ASSIGN INTEGER .

    IDENTIFIER      reduce using rule 35 (statement -> INSTANCE_VAR ASSIGN INTEGER .)
    GLOBAL_VAR      reduce using rule 35 (statement -> INSTANCE_VAR ASSIGN INTEGER .)
    IF              reduce using rule 35 (statement -> INSTANCE_VAR ASSIGN INTEGER .)
    DEF             reduce using rule 35 (statement -> INSTANCE_VAR ASSIGN INTEGER .)
    INSTANCE_VAR    reduce using rule 35 (statement -> INSTANCE_VAR ASSIGN INTEGER .)
    SETNEW          reduce using rule 35 (statement -> INSTANCE_VAR ASSIGN INTEGER .)
    WHILE           reduce using rule 35 (statement -> INSTANCE_VAR ASSIGN INTEGER .)
    FOR             reduce using rule 35 (statement -> INSTANCE_VAR ASSIGN INTEGER .)
    PUTS            reduce using rule 35 (statement -> INSTANCE_VAR ASSIGN INTEGER .)
    LBRACE          reduce using rule 35 (statement -> INSTANCE_VAR ASSIGN INTEGER .)
    LBRACKET        reduce using rule 35 (statement -> INSTANCE_VAR ASSIGN INTEGER .)
    STRING          reduce using rule 35 (statement -> INSTANCE_VAR ASSIGN INTEGER .)
    INTEGER         reduce using rule 35 (statement -> INSTANCE_VAR ASSIGN INTEGER .)
    FLOAT           reduce using rule 35 (statement -> INSTANCE_VAR ASSIGN INTEGER .)
    LPAREN          reduce using rule 35 (statement -> INSTANCE_VAR ASSIGN INTEGER .)
    END             reduce using rule 35 (statement -> INSTANCE_VAR ASSIGN INTEGER .)
    $end            reduce using rule 35 (statement -> INSTANCE_VAR ASSIGN INTEGER .)
    ELSE            reduce using rule 35 (statement -> INSTANCE_VAR ASSIGN INTEGER .)
    ELSIF           reduce using rule 35 (statement -> INSTANCE_VAR ASSIGN INTEGER .)


state 75

    (36) statement -> INSTANCE_VAR ASSIGN FLOAT .

    IDENTIFIER      reduce using rule 36 (statement -> INSTANCE_VAR ASSIGN FLOAT .)
    GLOBAL_VAR      reduce using rule 36 (statement -> INSTANCE_VAR ASSIGN FLOAT .)
    IF              reduce using rule 36 (statement -> INSTANCE_VAR ASSIGN FLOAT .)
    DEF             reduce using rule 36 (statement -> INSTANCE_VAR ASSIGN FLOAT .)
    INSTANCE_VAR    reduce using rule 36 (statement -> INSTANCE_VAR ASSIGN FLOAT .)
    SETNEW          reduce using rule 36 (statement -> INSTANCE_VAR ASSIGN FLOAT .)
    WHILE           reduce using rule 36 (statement -> INSTANCE_VAR ASSIGN FLOAT .)
    FOR             reduce using rule 36 (statement -> INSTANCE_VAR ASSIGN FLOAT .)
    PUTS            reduce using rule 36 (statement -> INSTANCE_VAR ASSIGN FLOAT .)
    LBRACE          reduce using rule 36 (statement -> INSTANCE_VAR ASSIGN FLOAT .)
    LBRACKET        reduce using rule 36 (statement -> INSTANCE_VAR ASSIGN FLOAT .)
    STRING          reduce using rule 36 (statement -> INSTANCE_VAR ASSIGN FLOAT .)
    INTEGER         reduce using rule 36 (statement -> INSTANCE_VAR ASSIGN FLOAT .)
    FLOAT           reduce using rule 36 (statement -> INSTANCE_VAR ASSIGN FLOAT .)
    LPAREN          reduce using rule 36 (statement -> INSTANCE_VAR ASSIGN FLOAT .)
    END             reduce using rule 36 (statement -> INSTANCE_VAR ASSIGN FLOAT .)
    $end            reduce using rule 36 (statement -> INSTANCE_VAR ASSIGN FLOAT .)
    ELSE            reduce using rule 36 (statement -> INSTANCE_VAR ASSIGN FLOAT .)
    ELSIF           reduce using rule 36 (statement -> INSTANCE_VAR ASSIGN FLOAT .)


state 76

    (37) statement -> SETNEW LPAREN optional_elements . RPAREN

    RPAREN          shift and go to state 98


state 77

    (38) optional_elements -> elements .
    (55) elements -> elements . COMMA expression

    RPAREN          reduce using rule 38 (optional_elements -> elements .)
    COMMA           shift and go to state 89


state 78

    (39) optional_elements -> empty .

    RPAREN          reduce using rule 39 (optional_elements -> empty .)


state 79

    (52) factor -> LPAREN expression RPAREN .

    DIVIDE          reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    POWER           reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    GREATER_EQUAL   reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    NOT_EQUALS      reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    GLOBAL_VAR      reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    DEF             reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    INSTANCE_VAR    reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    SETNEW          reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    PUTS            reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    STRING          reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    INTEGER         reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    ELSIF           reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    HASH_ROCKET     reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 52 (factor -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 52 (factor -> LPAREN expression RPAREN .)


state 80

    (41) statement -> WHILE expression statement . END
    (22) statement -> statement . statement
    (7) statement -> . expression
    (8) statement -> . IDENTIFIER ASSIGN INTEGER
    (9) statement -> . IDENTIFIER ASSIGN FLOAT
    (10) statement -> . GLOBAL_VAR ASSIGN STRING
    (11) statement -> . GLOBAL_VAR ASSIGN expression
    (22) statement -> . statement statement
    (23) statement -> . IF expression statement END
    (24) statement -> . IF expression statement ELSE statement END
    (25) statement -> . IF expression statement ELSIF expression statement END
    (26) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (33) statement -> . DEF IDENTIFIER statement END
    (34) statement -> . IDENTIFIER
    (35) statement -> . INSTANCE_VAR ASSIGN INTEGER
    (36) statement -> . INSTANCE_VAR ASSIGN FLOAT
    (37) statement -> . SETNEW LPAREN optional_elements RPAREN
    (41) statement -> . WHILE expression statement END
    (42) statement -> . IDENTIFIER ASSIGN GETS
    (43) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (44) statement -> . IDENTIFIER LPAREN params RPAREN
    (56) statement -> . FOR IDENTIFIER IN range statement
    (59) statement -> . PUTS statement
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    END             shift and go to state 99
    IDENTIFIER      shift and go to state 5
    GLOBAL_VAR      shift and go to state 8
    IF              shift and go to state 10
    DEF             shift and go to state 11
    INSTANCE_VAR    shift and go to state 12
    SETNEW          shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    expression                     shift and go to state 4
    statement                      shift and go to state 24
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 81

    (56) statement -> FOR IDENTIFIER IN . range statement
    (57) range -> . INTEGER DOUBLE_DOT INTEGER
    (58) range -> . FLOAT DOUBLE_DOT FLOAT

    INTEGER         shift and go to state 101
    FLOAT           shift and go to state 102

    range                          shift and go to state 100

state 82

    (14) expression -> LBRACE key_value_pairs RBRACE .

    GREATER         reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    LESS            reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    GREATER_EQUAL   reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    LESS_EQUAL      reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    EQUALS          reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    NOT_EQUALS      reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    PLUS            reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    MINUS           reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    IDENTIFIER      reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    GLOBAL_VAR      reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    IF              reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    DEF             reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    INSTANCE_VAR    reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    SETNEW          reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    WHILE           reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    FOR             reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    PUTS            reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    LBRACE          reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    LBRACKET        reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    STRING          reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    INTEGER         reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    FLOAT           reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    LPAREN          reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    END             reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    $end            reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    RPAREN          reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    ELSE            reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    ELSIF           reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    HASH_ROCKET     reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    RBRACKET        reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    COMMA           reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)
    RBRACE          reduce using rule 14 (expression -> LBRACE key_value_pairs RBRACE .)


state 83

    (17) key_value_pairs -> key_value_pairs COMMA . key_value
    (18) key_value -> . expression HASH_ROCKET expression
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 37
    GLOBAL_VAR      shift and go to state 38
    INSTANCE_VAR    shift and go to state 39
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    key_value                      shift and go to state 103
    expression                     shift and go to state 50
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 84

    (18) key_value -> expression HASH_ROCKET . expression
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 37
    GLOBAL_VAR      shift and go to state 38
    INSTANCE_VAR    shift and go to state 39
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    expression                     shift and go to state 104
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 85

    (46) term -> factor DIVIDE factor .
    (12) factor -> factor . POWER factor

    GREATER         reduce using rule 46 (term -> factor DIVIDE factor .)
    LESS            reduce using rule 46 (term -> factor DIVIDE factor .)
    GREATER_EQUAL   reduce using rule 46 (term -> factor DIVIDE factor .)
    LESS_EQUAL      reduce using rule 46 (term -> factor DIVIDE factor .)
    EQUALS          reduce using rule 46 (term -> factor DIVIDE factor .)
    NOT_EQUALS      reduce using rule 46 (term -> factor DIVIDE factor .)
    PLUS            reduce using rule 46 (term -> factor DIVIDE factor .)
    MINUS           reduce using rule 46 (term -> factor DIVIDE factor .)
    IDENTIFIER      reduce using rule 46 (term -> factor DIVIDE factor .)
    GLOBAL_VAR      reduce using rule 46 (term -> factor DIVIDE factor .)
    IF              reduce using rule 46 (term -> factor DIVIDE factor .)
    DEF             reduce using rule 46 (term -> factor DIVIDE factor .)
    INSTANCE_VAR    reduce using rule 46 (term -> factor DIVIDE factor .)
    SETNEW          reduce using rule 46 (term -> factor DIVIDE factor .)
    WHILE           reduce using rule 46 (term -> factor DIVIDE factor .)
    FOR             reduce using rule 46 (term -> factor DIVIDE factor .)
    PUTS            reduce using rule 46 (term -> factor DIVIDE factor .)
    LBRACE          reduce using rule 46 (term -> factor DIVIDE factor .)
    LBRACKET        reduce using rule 46 (term -> factor DIVIDE factor .)
    STRING          reduce using rule 46 (term -> factor DIVIDE factor .)
    INTEGER         reduce using rule 46 (term -> factor DIVIDE factor .)
    FLOAT           reduce using rule 46 (term -> factor DIVIDE factor .)
    LPAREN          reduce using rule 46 (term -> factor DIVIDE factor .)
    END             reduce using rule 46 (term -> factor DIVIDE factor .)
    $end            reduce using rule 46 (term -> factor DIVIDE factor .)
    RPAREN          reduce using rule 46 (term -> factor DIVIDE factor .)
    ELSE            reduce using rule 46 (term -> factor DIVIDE factor .)
    ELSIF           reduce using rule 46 (term -> factor DIVIDE factor .)
    HASH_ROCKET     reduce using rule 46 (term -> factor DIVIDE factor .)
    RBRACKET        reduce using rule 46 (term -> factor DIVIDE factor .)
    COMMA           reduce using rule 46 (term -> factor DIVIDE factor .)
    RBRACE          reduce using rule 46 (term -> factor DIVIDE factor .)
    POWER           shift and go to state 53


state 86

    (47) term -> factor TIMES factor .
    (12) factor -> factor . POWER factor

    GREATER         reduce using rule 47 (term -> factor TIMES factor .)
    LESS            reduce using rule 47 (term -> factor TIMES factor .)
    GREATER_EQUAL   reduce using rule 47 (term -> factor TIMES factor .)
    LESS_EQUAL      reduce using rule 47 (term -> factor TIMES factor .)
    EQUALS          reduce using rule 47 (term -> factor TIMES factor .)
    NOT_EQUALS      reduce using rule 47 (term -> factor TIMES factor .)
    PLUS            reduce using rule 47 (term -> factor TIMES factor .)
    MINUS           reduce using rule 47 (term -> factor TIMES factor .)
    IDENTIFIER      reduce using rule 47 (term -> factor TIMES factor .)
    GLOBAL_VAR      reduce using rule 47 (term -> factor TIMES factor .)
    IF              reduce using rule 47 (term -> factor TIMES factor .)
    DEF             reduce using rule 47 (term -> factor TIMES factor .)
    INSTANCE_VAR    reduce using rule 47 (term -> factor TIMES factor .)
    SETNEW          reduce using rule 47 (term -> factor TIMES factor .)
    WHILE           reduce using rule 47 (term -> factor TIMES factor .)
    FOR             reduce using rule 47 (term -> factor TIMES factor .)
    PUTS            reduce using rule 47 (term -> factor TIMES factor .)
    LBRACE          reduce using rule 47 (term -> factor TIMES factor .)
    LBRACKET        reduce using rule 47 (term -> factor TIMES factor .)
    STRING          reduce using rule 47 (term -> factor TIMES factor .)
    INTEGER         reduce using rule 47 (term -> factor TIMES factor .)
    FLOAT           reduce using rule 47 (term -> factor TIMES factor .)
    LPAREN          reduce using rule 47 (term -> factor TIMES factor .)
    END             reduce using rule 47 (term -> factor TIMES factor .)
    $end            reduce using rule 47 (term -> factor TIMES factor .)
    RPAREN          reduce using rule 47 (term -> factor TIMES factor .)
    ELSE            reduce using rule 47 (term -> factor TIMES factor .)
    ELSIF           reduce using rule 47 (term -> factor TIMES factor .)
    HASH_ROCKET     reduce using rule 47 (term -> factor TIMES factor .)
    RBRACKET        reduce using rule 47 (term -> factor TIMES factor .)
    COMMA           reduce using rule 47 (term -> factor TIMES factor .)
    RBRACE          reduce using rule 47 (term -> factor TIMES factor .)
    POWER           shift and go to state 53


state 87

    (12) factor -> factor POWER factor .
    (12) factor -> factor . POWER factor

    DIVIDE          reduce using rule 12 (factor -> factor POWER factor .)
    TIMES           reduce using rule 12 (factor -> factor POWER factor .)
    GREATER         reduce using rule 12 (factor -> factor POWER factor .)
    LESS            reduce using rule 12 (factor -> factor POWER factor .)
    GREATER_EQUAL   reduce using rule 12 (factor -> factor POWER factor .)
    LESS_EQUAL      reduce using rule 12 (factor -> factor POWER factor .)
    EQUALS          reduce using rule 12 (factor -> factor POWER factor .)
    NOT_EQUALS      reduce using rule 12 (factor -> factor POWER factor .)
    PLUS            reduce using rule 12 (factor -> factor POWER factor .)
    MINUS           reduce using rule 12 (factor -> factor POWER factor .)
    IDENTIFIER      reduce using rule 12 (factor -> factor POWER factor .)
    GLOBAL_VAR      reduce using rule 12 (factor -> factor POWER factor .)
    IF              reduce using rule 12 (factor -> factor POWER factor .)
    DEF             reduce using rule 12 (factor -> factor POWER factor .)
    INSTANCE_VAR    reduce using rule 12 (factor -> factor POWER factor .)
    SETNEW          reduce using rule 12 (factor -> factor POWER factor .)
    WHILE           reduce using rule 12 (factor -> factor POWER factor .)
    FOR             reduce using rule 12 (factor -> factor POWER factor .)
    PUTS            reduce using rule 12 (factor -> factor POWER factor .)
    LBRACE          reduce using rule 12 (factor -> factor POWER factor .)
    LBRACKET        reduce using rule 12 (factor -> factor POWER factor .)
    STRING          reduce using rule 12 (factor -> factor POWER factor .)
    INTEGER         reduce using rule 12 (factor -> factor POWER factor .)
    FLOAT           reduce using rule 12 (factor -> factor POWER factor .)
    LPAREN          reduce using rule 12 (factor -> factor POWER factor .)
    END             reduce using rule 12 (factor -> factor POWER factor .)
    $end            reduce using rule 12 (factor -> factor POWER factor .)
    RPAREN          reduce using rule 12 (factor -> factor POWER factor .)
    ELSE            reduce using rule 12 (factor -> factor POWER factor .)
    ELSIF           reduce using rule 12 (factor -> factor POWER factor .)
    HASH_ROCKET     reduce using rule 12 (factor -> factor POWER factor .)
    RBRACKET        reduce using rule 12 (factor -> factor POWER factor .)
    COMMA           reduce using rule 12 (factor -> factor POWER factor .)
    RBRACE          reduce using rule 12 (factor -> factor POWER factor .)
    POWER           shift and go to state 53

  ! POWER           [ reduce using rule 12 (factor -> factor POWER factor .) ]


state 88

    (53) expression -> LBRACKET elements RBRACKET .

    GREATER         reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    LESS            reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    GREATER_EQUAL   reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    LESS_EQUAL      reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    EQUALS          reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    NOT_EQUALS      reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    PLUS            reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    MINUS           reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    IDENTIFIER      reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    GLOBAL_VAR      reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    IF              reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    DEF             reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    INSTANCE_VAR    reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    SETNEW          reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    WHILE           reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    FOR             reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    PUTS            reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    LBRACE          reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    LBRACKET        reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    STRING          reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    INTEGER         reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    FLOAT           reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    LPAREN          reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    END             reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    $end            reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    RPAREN          reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    ELSE            reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    ELSIF           reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    HASH_ROCKET     reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    RBRACKET        reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    COMMA           reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)
    RBRACE          reduce using rule 53 (expression -> LBRACKET elements RBRACKET .)


state 89

    (55) elements -> elements COMMA . expression
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 37
    GLOBAL_VAR      shift and go to state 38
    INSTANCE_VAR    shift and go to state 39
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    expression                     shift and go to state 105
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 90

    (44) statement -> IDENTIFIER LPAREN params RPAREN .

    IDENTIFIER      reduce using rule 44 (statement -> IDENTIFIER LPAREN params RPAREN .)
    GLOBAL_VAR      reduce using rule 44 (statement -> IDENTIFIER LPAREN params RPAREN .)
    IF              reduce using rule 44 (statement -> IDENTIFIER LPAREN params RPAREN .)
    DEF             reduce using rule 44 (statement -> IDENTIFIER LPAREN params RPAREN .)
    INSTANCE_VAR    reduce using rule 44 (statement -> IDENTIFIER LPAREN params RPAREN .)
    SETNEW          reduce using rule 44 (statement -> IDENTIFIER LPAREN params RPAREN .)
    WHILE           reduce using rule 44 (statement -> IDENTIFIER LPAREN params RPAREN .)
    FOR             reduce using rule 44 (statement -> IDENTIFIER LPAREN params RPAREN .)
    PUTS            reduce using rule 44 (statement -> IDENTIFIER LPAREN params RPAREN .)
    LBRACE          reduce using rule 44 (statement -> IDENTIFIER LPAREN params RPAREN .)
    LBRACKET        reduce using rule 44 (statement -> IDENTIFIER LPAREN params RPAREN .)
    STRING          reduce using rule 44 (statement -> IDENTIFIER LPAREN params RPAREN .)
    INTEGER         reduce using rule 44 (statement -> IDENTIFIER LPAREN params RPAREN .)
    FLOAT           reduce using rule 44 (statement -> IDENTIFIER LPAREN params RPAREN .)
    LPAREN          reduce using rule 44 (statement -> IDENTIFIER LPAREN params RPAREN .)
    END             reduce using rule 44 (statement -> IDENTIFIER LPAREN params RPAREN .)
    $end            reduce using rule 44 (statement -> IDENTIFIER LPAREN params RPAREN .)
    ELSE            reduce using rule 44 (statement -> IDENTIFIER LPAREN params RPAREN .)
    ELSIF           reduce using rule 44 (statement -> IDENTIFIER LPAREN params RPAREN .)


state 91

    (4) params -> params COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 106


state 92

    (23) statement -> IF expression statement END .

    IDENTIFIER      reduce using rule 23 (statement -> IF expression statement END .)
    GLOBAL_VAR      reduce using rule 23 (statement -> IF expression statement END .)
    IF              reduce using rule 23 (statement -> IF expression statement END .)
    DEF             reduce using rule 23 (statement -> IF expression statement END .)
    INSTANCE_VAR    reduce using rule 23 (statement -> IF expression statement END .)
    SETNEW          reduce using rule 23 (statement -> IF expression statement END .)
    WHILE           reduce using rule 23 (statement -> IF expression statement END .)
    FOR             reduce using rule 23 (statement -> IF expression statement END .)
    PUTS            reduce using rule 23 (statement -> IF expression statement END .)
    LBRACE          reduce using rule 23 (statement -> IF expression statement END .)
    LBRACKET        reduce using rule 23 (statement -> IF expression statement END .)
    STRING          reduce using rule 23 (statement -> IF expression statement END .)
    INTEGER         reduce using rule 23 (statement -> IF expression statement END .)
    FLOAT           reduce using rule 23 (statement -> IF expression statement END .)
    LPAREN          reduce using rule 23 (statement -> IF expression statement END .)
    END             reduce using rule 23 (statement -> IF expression statement END .)
    $end            reduce using rule 23 (statement -> IF expression statement END .)
    ELSE            reduce using rule 23 (statement -> IF expression statement END .)
    ELSIF           reduce using rule 23 (statement -> IF expression statement END .)


state 93

    (24) statement -> IF expression statement ELSE . statement END
    (7) statement -> . expression
    (8) statement -> . IDENTIFIER ASSIGN INTEGER
    (9) statement -> . IDENTIFIER ASSIGN FLOAT
    (10) statement -> . GLOBAL_VAR ASSIGN STRING
    (11) statement -> . GLOBAL_VAR ASSIGN expression
    (22) statement -> . statement statement
    (23) statement -> . IF expression statement END
    (24) statement -> . IF expression statement ELSE statement END
    (25) statement -> . IF expression statement ELSIF expression statement END
    (26) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (33) statement -> . DEF IDENTIFIER statement END
    (34) statement -> . IDENTIFIER
    (35) statement -> . INSTANCE_VAR ASSIGN INTEGER
    (36) statement -> . INSTANCE_VAR ASSIGN FLOAT
    (37) statement -> . SETNEW LPAREN optional_elements RPAREN
    (41) statement -> . WHILE expression statement END
    (42) statement -> . IDENTIFIER ASSIGN GETS
    (43) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (44) statement -> . IDENTIFIER LPAREN params RPAREN
    (56) statement -> . FOR IDENTIFIER IN range statement
    (59) statement -> . PUTS statement
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 5
    GLOBAL_VAR      shift and go to state 8
    IF              shift and go to state 10
    DEF             shift and go to state 11
    INSTANCE_VAR    shift and go to state 12
    SETNEW          shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    expression                     shift and go to state 4
    statement                      shift and go to state 107
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 94

    (25) statement -> IF expression statement ELSIF . expression statement END
    (26) statement -> IF expression statement ELSIF . expression statement ELSE statement END
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 18
    IDENTIFIER      shift and go to state 37
    GLOBAL_VAR      shift and go to state 38
    INSTANCE_VAR    shift and go to state 39
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    expression                     shift and go to state 108
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 95

    (33) statement -> DEF IDENTIFIER statement END .

    IDENTIFIER      reduce using rule 33 (statement -> DEF IDENTIFIER statement END .)
    GLOBAL_VAR      reduce using rule 33 (statement -> DEF IDENTIFIER statement END .)
    IF              reduce using rule 33 (statement -> DEF IDENTIFIER statement END .)
    DEF             reduce using rule 33 (statement -> DEF IDENTIFIER statement END .)
    INSTANCE_VAR    reduce using rule 33 (statement -> DEF IDENTIFIER statement END .)
    SETNEW          reduce using rule 33 (statement -> DEF IDENTIFIER statement END .)
    WHILE           reduce using rule 33 (statement -> DEF IDENTIFIER statement END .)
    FOR             reduce using rule 33 (statement -> DEF IDENTIFIER statement END .)
    PUTS            reduce using rule 33 (statement -> DEF IDENTIFIER statement END .)
    LBRACE          reduce using rule 33 (statement -> DEF IDENTIFIER statement END .)
    LBRACKET        reduce using rule 33 (statement -> DEF IDENTIFIER statement END .)
    STRING          reduce using rule 33 (statement -> DEF IDENTIFIER statement END .)
    INTEGER         reduce using rule 33 (statement -> DEF IDENTIFIER statement END .)
    FLOAT           reduce using rule 33 (statement -> DEF IDENTIFIER statement END .)
    LPAREN          reduce using rule 33 (statement -> DEF IDENTIFIER statement END .)
    END             reduce using rule 33 (statement -> DEF IDENTIFIER statement END .)
    $end            reduce using rule 33 (statement -> DEF IDENTIFIER statement END .)
    ELSE            reduce using rule 33 (statement -> DEF IDENTIFIER statement END .)
    ELSIF           reduce using rule 33 (statement -> DEF IDENTIFIER statement END .)


state 96

    (3) params -> IDENTIFIER .
    (19) expression -> IDENTIFIER .

  ! reduce/reduce conflict for RPAREN resolved using rule 3 (params -> IDENTIFIER .)
    RPAREN          reduce using rule 3 (params -> IDENTIFIER .)
    COMMA           reduce using rule 3 (params -> IDENTIFIER .)
    GREATER         reduce using rule 19 (expression -> IDENTIFIER .)
    LESS            reduce using rule 19 (expression -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 19 (expression -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 19 (expression -> IDENTIFIER .)
    EQUALS          reduce using rule 19 (expression -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 19 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 19 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 19 (expression -> IDENTIFIER .)

  ! RPAREN          [ reduce using rule 19 (expression -> IDENTIFIER .) ]


state 97

    (43) statement -> DEF IDENTIFIER LPAREN params . RPAREN statement END
    (4) params -> params . COMMA IDENTIFIER

    RPAREN          shift and go to state 109
    COMMA           shift and go to state 91


state 98

    (37) statement -> SETNEW LPAREN optional_elements RPAREN .

    IDENTIFIER      reduce using rule 37 (statement -> SETNEW LPAREN optional_elements RPAREN .)
    GLOBAL_VAR      reduce using rule 37 (statement -> SETNEW LPAREN optional_elements RPAREN .)
    IF              reduce using rule 37 (statement -> SETNEW LPAREN optional_elements RPAREN .)
    DEF             reduce using rule 37 (statement -> SETNEW LPAREN optional_elements RPAREN .)
    INSTANCE_VAR    reduce using rule 37 (statement -> SETNEW LPAREN optional_elements RPAREN .)
    SETNEW          reduce using rule 37 (statement -> SETNEW LPAREN optional_elements RPAREN .)
    WHILE           reduce using rule 37 (statement -> SETNEW LPAREN optional_elements RPAREN .)
    FOR             reduce using rule 37 (statement -> SETNEW LPAREN optional_elements RPAREN .)
    PUTS            reduce using rule 37 (statement -> SETNEW LPAREN optional_elements RPAREN .)
    LBRACE          reduce using rule 37 (statement -> SETNEW LPAREN optional_elements RPAREN .)
    LBRACKET        reduce using rule 37 (statement -> SETNEW LPAREN optional_elements RPAREN .)
    STRING          reduce using rule 37 (statement -> SETNEW LPAREN optional_elements RPAREN .)
    INTEGER         reduce using rule 37 (statement -> SETNEW LPAREN optional_elements RPAREN .)
    FLOAT           reduce using rule 37 (statement -> SETNEW LPAREN optional_elements RPAREN .)
    LPAREN          reduce using rule 37 (statement -> SETNEW LPAREN optional_elements RPAREN .)
    END             reduce using rule 37 (statement -> SETNEW LPAREN optional_elements RPAREN .)
    $end            reduce using rule 37 (statement -> SETNEW LPAREN optional_elements RPAREN .)
    ELSE            reduce using rule 37 (statement -> SETNEW LPAREN optional_elements RPAREN .)
    ELSIF           reduce using rule 37 (statement -> SETNEW LPAREN optional_elements RPAREN .)


state 99

    (41) statement -> WHILE expression statement END .

    IDENTIFIER      reduce using rule 41 (statement -> WHILE expression statement END .)
    GLOBAL_VAR      reduce using rule 41 (statement -> WHILE expression statement END .)
    IF              reduce using rule 41 (statement -> WHILE expression statement END .)
    DEF             reduce using rule 41 (statement -> WHILE expression statement END .)
    INSTANCE_VAR    reduce using rule 41 (statement -> WHILE expression statement END .)
    SETNEW          reduce using rule 41 (statement -> WHILE expression statement END .)
    WHILE           reduce using rule 41 (statement -> WHILE expression statement END .)
    FOR             reduce using rule 41 (statement -> WHILE expression statement END .)
    PUTS            reduce using rule 41 (statement -> WHILE expression statement END .)
    LBRACE          reduce using rule 41 (statement -> WHILE expression statement END .)
    LBRACKET        reduce using rule 41 (statement -> WHILE expression statement END .)
    STRING          reduce using rule 41 (statement -> WHILE expression statement END .)
    INTEGER         reduce using rule 41 (statement -> WHILE expression statement END .)
    FLOAT           reduce using rule 41 (statement -> WHILE expression statement END .)
    LPAREN          reduce using rule 41 (statement -> WHILE expression statement END .)
    END             reduce using rule 41 (statement -> WHILE expression statement END .)
    $end            reduce using rule 41 (statement -> WHILE expression statement END .)
    ELSE            reduce using rule 41 (statement -> WHILE expression statement END .)
    ELSIF           reduce using rule 41 (statement -> WHILE expression statement END .)


state 100

    (56) statement -> FOR IDENTIFIER IN range . statement
    (7) statement -> . expression
    (8) statement -> . IDENTIFIER ASSIGN INTEGER
    (9) statement -> . IDENTIFIER ASSIGN FLOAT
    (10) statement -> . GLOBAL_VAR ASSIGN STRING
    (11) statement -> . GLOBAL_VAR ASSIGN expression
    (22) statement -> . statement statement
    (23) statement -> . IF expression statement END
    (24) statement -> . IF expression statement ELSE statement END
    (25) statement -> . IF expression statement ELSIF expression statement END
    (26) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (33) statement -> . DEF IDENTIFIER statement END
    (34) statement -> . IDENTIFIER
    (35) statement -> . INSTANCE_VAR ASSIGN INTEGER
    (36) statement -> . INSTANCE_VAR ASSIGN FLOAT
    (37) statement -> . SETNEW LPAREN optional_elements RPAREN
    (41) statement -> . WHILE expression statement END
    (42) statement -> . IDENTIFIER ASSIGN GETS
    (43) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (44) statement -> . IDENTIFIER LPAREN params RPAREN
    (56) statement -> . FOR IDENTIFIER IN range statement
    (59) statement -> . PUTS statement
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 5
    GLOBAL_VAR      shift and go to state 8
    IF              shift and go to state 10
    DEF             shift and go to state 11
    INSTANCE_VAR    shift and go to state 12
    SETNEW          shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    statement                      shift and go to state 110
    expression                     shift and go to state 4
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 101

    (57) range -> INTEGER . DOUBLE_DOT INTEGER

    DOUBLE_DOT      shift and go to state 111


state 102

    (58) range -> FLOAT . DOUBLE_DOT FLOAT

    DOUBLE_DOT      shift and go to state 112


state 103

    (17) key_value_pairs -> key_value_pairs COMMA key_value .

    RBRACE          reduce using rule 17 (key_value_pairs -> key_value_pairs COMMA key_value .)
    COMMA           reduce using rule 17 (key_value_pairs -> key_value_pairs COMMA key_value .)


state 104

    (18) key_value -> expression HASH_ROCKET expression .
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression
    (29) expression -> expression . GREATER_EQUAL expression
    (30) expression -> expression . LESS_EQUAL expression
    (31) expression -> expression . EQUALS expression
    (32) expression -> expression . NOT_EQUALS expression
    (48) expression -> expression . PLUS factor
    (49) expression -> expression . MINUS factor

    RBRACE          reduce using rule 18 (key_value -> expression HASH_ROCKET expression .)
    COMMA           reduce using rule 18 (key_value -> expression HASH_ROCKET expression .)
    GREATER         shift and go to state 25
    LESS            shift and go to state 26
    GREATER_EQUAL   shift and go to state 27
    LESS_EQUAL      shift and go to state 28
    EQUALS          shift and go to state 29
    NOT_EQUALS      shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32


state 105

    (55) elements -> elements COMMA expression .
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression
    (29) expression -> expression . GREATER_EQUAL expression
    (30) expression -> expression . LESS_EQUAL expression
    (31) expression -> expression . EQUALS expression
    (32) expression -> expression . NOT_EQUALS expression
    (48) expression -> expression . PLUS factor
    (49) expression -> expression . MINUS factor

    RBRACKET        reduce using rule 55 (elements -> elements COMMA expression .)
    COMMA           reduce using rule 55 (elements -> elements COMMA expression .)
    RPAREN          reduce using rule 55 (elements -> elements COMMA expression .)
    GREATER         shift and go to state 25
    LESS            shift and go to state 26
    GREATER_EQUAL   shift and go to state 27
    LESS_EQUAL      shift and go to state 28
    EQUALS          shift and go to state 29
    NOT_EQUALS      shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32


state 106

    (4) params -> params COMMA IDENTIFIER .

    RPAREN          reduce using rule 4 (params -> params COMMA IDENTIFIER .)
    COMMA           reduce using rule 4 (params -> params COMMA IDENTIFIER .)


state 107

    (24) statement -> IF expression statement ELSE statement . END
    (22) statement -> statement . statement
    (7) statement -> . expression
    (8) statement -> . IDENTIFIER ASSIGN INTEGER
    (9) statement -> . IDENTIFIER ASSIGN FLOAT
    (10) statement -> . GLOBAL_VAR ASSIGN STRING
    (11) statement -> . GLOBAL_VAR ASSIGN expression
    (22) statement -> . statement statement
    (23) statement -> . IF expression statement END
    (24) statement -> . IF expression statement ELSE statement END
    (25) statement -> . IF expression statement ELSIF expression statement END
    (26) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (33) statement -> . DEF IDENTIFIER statement END
    (34) statement -> . IDENTIFIER
    (35) statement -> . INSTANCE_VAR ASSIGN INTEGER
    (36) statement -> . INSTANCE_VAR ASSIGN FLOAT
    (37) statement -> . SETNEW LPAREN optional_elements RPAREN
    (41) statement -> . WHILE expression statement END
    (42) statement -> . IDENTIFIER ASSIGN GETS
    (43) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (44) statement -> . IDENTIFIER LPAREN params RPAREN
    (56) statement -> . FOR IDENTIFIER IN range statement
    (59) statement -> . PUTS statement
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    END             shift and go to state 113
    IDENTIFIER      shift and go to state 5
    GLOBAL_VAR      shift and go to state 8
    IF              shift and go to state 10
    DEF             shift and go to state 11
    INSTANCE_VAR    shift and go to state 12
    SETNEW          shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    expression                     shift and go to state 4
    statement                      shift and go to state 24
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 108

    (25) statement -> IF expression statement ELSIF expression . statement END
    (26) statement -> IF expression statement ELSIF expression . statement ELSE statement END
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression
    (29) expression -> expression . GREATER_EQUAL expression
    (30) expression -> expression . LESS_EQUAL expression
    (31) expression -> expression . EQUALS expression
    (32) expression -> expression . NOT_EQUALS expression
    (48) expression -> expression . PLUS factor
    (49) expression -> expression . MINUS factor
    (7) statement -> . expression
    (8) statement -> . IDENTIFIER ASSIGN INTEGER
    (9) statement -> . IDENTIFIER ASSIGN FLOAT
    (10) statement -> . GLOBAL_VAR ASSIGN STRING
    (11) statement -> . GLOBAL_VAR ASSIGN expression
    (22) statement -> . statement statement
    (23) statement -> . IF expression statement END
    (24) statement -> . IF expression statement ELSE statement END
    (25) statement -> . IF expression statement ELSIF expression statement END
    (26) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (33) statement -> . DEF IDENTIFIER statement END
    (34) statement -> . IDENTIFIER
    (35) statement -> . INSTANCE_VAR ASSIGN INTEGER
    (36) statement -> . INSTANCE_VAR ASSIGN FLOAT
    (37) statement -> . SETNEW LPAREN optional_elements RPAREN
    (41) statement -> . WHILE expression statement END
    (42) statement -> . IDENTIFIER ASSIGN GETS
    (43) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (44) statement -> . IDENTIFIER LPAREN params RPAREN
    (56) statement -> . FOR IDENTIFIER IN range statement
    (59) statement -> . PUTS statement
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    GREATER         shift and go to state 25
    LESS            shift and go to state 26
    GREATER_EQUAL   shift and go to state 27
    LESS_EQUAL      shift and go to state 28
    EQUALS          shift and go to state 29
    NOT_EQUALS      shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    IDENTIFIER      shift and go to state 5
    GLOBAL_VAR      shift and go to state 8
    IF              shift and go to state 10
    DEF             shift and go to state 11
    INSTANCE_VAR    shift and go to state 12
    SETNEW          shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    expression                     shift and go to state 4
    statement                      shift and go to state 114
    factor                         shift and go to state 20
    term                           shift and go to state 19

state 109

    (43) statement -> DEF IDENTIFIER LPAREN params RPAREN . statement END
    (7) statement -> . expression
    (8) statement -> . IDENTIFIER ASSIGN INTEGER
    (9) statement -> . IDENTIFIER ASSIGN FLOAT
    (10) statement -> . GLOBAL_VAR ASSIGN STRING
    (11) statement -> . GLOBAL_VAR ASSIGN expression
    (22) statement -> . statement statement
    (23) statement -> . IF expression statement END
    (24) statement -> . IF expression statement ELSE statement END
    (25) statement -> . IF expression statement ELSIF expression statement END
    (26) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (33) statement -> . DEF IDENTIFIER statement END
    (34) statement -> . IDENTIFIER
    (35) statement -> . INSTANCE_VAR ASSIGN INTEGER
    (36) statement -> . INSTANCE_VAR ASSIGN FLOAT
    (37) statement -> . SETNEW LPAREN optional_elements RPAREN
    (41) statement -> . WHILE expression statement END
    (42) statement -> . IDENTIFIER ASSIGN GETS
    (43) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (44) statement -> . IDENTIFIER LPAREN params RPAREN
    (56) statement -> . FOR IDENTIFIER IN range statement
    (59) statement -> . PUTS statement
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 5
    GLOBAL_VAR      shift and go to state 8
    IF              shift and go to state 10
    DEF             shift and go to state 11
    INSTANCE_VAR    shift and go to state 12
    SETNEW          shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    statement                      shift and go to state 115
    expression                     shift and go to state 4
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 110

    (56) statement -> FOR IDENTIFIER IN range statement .
    (22) statement -> statement . statement
    (7) statement -> . expression
    (8) statement -> . IDENTIFIER ASSIGN INTEGER
    (9) statement -> . IDENTIFIER ASSIGN FLOAT
    (10) statement -> . GLOBAL_VAR ASSIGN STRING
    (11) statement -> . GLOBAL_VAR ASSIGN expression
    (22) statement -> . statement statement
    (23) statement -> . IF expression statement END
    (24) statement -> . IF expression statement ELSE statement END
    (25) statement -> . IF expression statement ELSIF expression statement END
    (26) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (33) statement -> . DEF IDENTIFIER statement END
    (34) statement -> . IDENTIFIER
    (35) statement -> . INSTANCE_VAR ASSIGN INTEGER
    (36) statement -> . INSTANCE_VAR ASSIGN FLOAT
    (37) statement -> . SETNEW LPAREN optional_elements RPAREN
    (41) statement -> . WHILE expression statement END
    (42) statement -> . IDENTIFIER ASSIGN GETS
    (43) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (44) statement -> . IDENTIFIER LPAREN params RPAREN
    (56) statement -> . FOR IDENTIFIER IN range statement
    (59) statement -> . PUTS statement
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for SETNEW resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    END             reduce using rule 56 (statement -> FOR IDENTIFIER IN range statement .)
    $end            reduce using rule 56 (statement -> FOR IDENTIFIER IN range statement .)
    ELSE            reduce using rule 56 (statement -> FOR IDENTIFIER IN range statement .)
    ELSIF           reduce using rule 56 (statement -> FOR IDENTIFIER IN range statement .)
    IDENTIFIER      shift and go to state 5
    GLOBAL_VAR      shift and go to state 8
    IF              shift and go to state 10
    DEF             shift and go to state 11
    INSTANCE_VAR    shift and go to state 12
    SETNEW          shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

  ! IDENTIFIER      [ reduce using rule 56 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! GLOBAL_VAR      [ reduce using rule 56 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! IF              [ reduce using rule 56 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! DEF             [ reduce using rule 56 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! INSTANCE_VAR    [ reduce using rule 56 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! SETNEW          [ reduce using rule 56 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! WHILE           [ reduce using rule 56 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! FOR             [ reduce using rule 56 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! PUTS            [ reduce using rule 56 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! LBRACE          [ reduce using rule 56 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! LBRACKET        [ reduce using rule 56 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! STRING          [ reduce using rule 56 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! INTEGER         [ reduce using rule 56 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! FLOAT           [ reduce using rule 56 (statement -> FOR IDENTIFIER IN range statement .) ]
  ! LPAREN          [ reduce using rule 56 (statement -> FOR IDENTIFIER IN range statement .) ]

    statement                      shift and go to state 24
    expression                     shift and go to state 4
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 111

    (57) range -> INTEGER DOUBLE_DOT . INTEGER

    INTEGER         shift and go to state 116


state 112

    (58) range -> FLOAT DOUBLE_DOT . FLOAT

    FLOAT           shift and go to state 117


state 113

    (24) statement -> IF expression statement ELSE statement END .

    IDENTIFIER      reduce using rule 24 (statement -> IF expression statement ELSE statement END .)
    GLOBAL_VAR      reduce using rule 24 (statement -> IF expression statement ELSE statement END .)
    IF              reduce using rule 24 (statement -> IF expression statement ELSE statement END .)
    DEF             reduce using rule 24 (statement -> IF expression statement ELSE statement END .)
    INSTANCE_VAR    reduce using rule 24 (statement -> IF expression statement ELSE statement END .)
    SETNEW          reduce using rule 24 (statement -> IF expression statement ELSE statement END .)
    WHILE           reduce using rule 24 (statement -> IF expression statement ELSE statement END .)
    FOR             reduce using rule 24 (statement -> IF expression statement ELSE statement END .)
    PUTS            reduce using rule 24 (statement -> IF expression statement ELSE statement END .)
    LBRACE          reduce using rule 24 (statement -> IF expression statement ELSE statement END .)
    LBRACKET        reduce using rule 24 (statement -> IF expression statement ELSE statement END .)
    STRING          reduce using rule 24 (statement -> IF expression statement ELSE statement END .)
    INTEGER         reduce using rule 24 (statement -> IF expression statement ELSE statement END .)
    FLOAT           reduce using rule 24 (statement -> IF expression statement ELSE statement END .)
    LPAREN          reduce using rule 24 (statement -> IF expression statement ELSE statement END .)
    END             reduce using rule 24 (statement -> IF expression statement ELSE statement END .)
    $end            reduce using rule 24 (statement -> IF expression statement ELSE statement END .)
    ELSE            reduce using rule 24 (statement -> IF expression statement ELSE statement END .)
    ELSIF           reduce using rule 24 (statement -> IF expression statement ELSE statement END .)


state 114

    (25) statement -> IF expression statement ELSIF expression statement . END
    (26) statement -> IF expression statement ELSIF expression statement . ELSE statement END
    (22) statement -> statement . statement
    (7) statement -> . expression
    (8) statement -> . IDENTIFIER ASSIGN INTEGER
    (9) statement -> . IDENTIFIER ASSIGN FLOAT
    (10) statement -> . GLOBAL_VAR ASSIGN STRING
    (11) statement -> . GLOBAL_VAR ASSIGN expression
    (22) statement -> . statement statement
    (23) statement -> . IF expression statement END
    (24) statement -> . IF expression statement ELSE statement END
    (25) statement -> . IF expression statement ELSIF expression statement END
    (26) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (33) statement -> . DEF IDENTIFIER statement END
    (34) statement -> . IDENTIFIER
    (35) statement -> . INSTANCE_VAR ASSIGN INTEGER
    (36) statement -> . INSTANCE_VAR ASSIGN FLOAT
    (37) statement -> . SETNEW LPAREN optional_elements RPAREN
    (41) statement -> . WHILE expression statement END
    (42) statement -> . IDENTIFIER ASSIGN GETS
    (43) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (44) statement -> . IDENTIFIER LPAREN params RPAREN
    (56) statement -> . FOR IDENTIFIER IN range statement
    (59) statement -> . PUTS statement
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    END             shift and go to state 118
    ELSE            shift and go to state 119
    IDENTIFIER      shift and go to state 5
    GLOBAL_VAR      shift and go to state 8
    IF              shift and go to state 10
    DEF             shift and go to state 11
    INSTANCE_VAR    shift and go to state 12
    SETNEW          shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    expression                     shift and go to state 4
    statement                      shift and go to state 24
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 115

    (43) statement -> DEF IDENTIFIER LPAREN params RPAREN statement . END
    (22) statement -> statement . statement
    (7) statement -> . expression
    (8) statement -> . IDENTIFIER ASSIGN INTEGER
    (9) statement -> . IDENTIFIER ASSIGN FLOAT
    (10) statement -> . GLOBAL_VAR ASSIGN STRING
    (11) statement -> . GLOBAL_VAR ASSIGN expression
    (22) statement -> . statement statement
    (23) statement -> . IF expression statement END
    (24) statement -> . IF expression statement ELSE statement END
    (25) statement -> . IF expression statement ELSIF expression statement END
    (26) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (33) statement -> . DEF IDENTIFIER statement END
    (34) statement -> . IDENTIFIER
    (35) statement -> . INSTANCE_VAR ASSIGN INTEGER
    (36) statement -> . INSTANCE_VAR ASSIGN FLOAT
    (37) statement -> . SETNEW LPAREN optional_elements RPAREN
    (41) statement -> . WHILE expression statement END
    (42) statement -> . IDENTIFIER ASSIGN GETS
    (43) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (44) statement -> . IDENTIFIER LPAREN params RPAREN
    (56) statement -> . FOR IDENTIFIER IN range statement
    (59) statement -> . PUTS statement
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    END             shift and go to state 120
    IDENTIFIER      shift and go to state 5
    GLOBAL_VAR      shift and go to state 8
    IF              shift and go to state 10
    DEF             shift and go to state 11
    INSTANCE_VAR    shift and go to state 12
    SETNEW          shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    statement                      shift and go to state 24
    expression                     shift and go to state 4
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 116

    (57) range -> INTEGER DOUBLE_DOT INTEGER .

    IDENTIFIER      reduce using rule 57 (range -> INTEGER DOUBLE_DOT INTEGER .)
    GLOBAL_VAR      reduce using rule 57 (range -> INTEGER DOUBLE_DOT INTEGER .)
    IF              reduce using rule 57 (range -> INTEGER DOUBLE_DOT INTEGER .)
    DEF             reduce using rule 57 (range -> INTEGER DOUBLE_DOT INTEGER .)
    INSTANCE_VAR    reduce using rule 57 (range -> INTEGER DOUBLE_DOT INTEGER .)
    SETNEW          reduce using rule 57 (range -> INTEGER DOUBLE_DOT INTEGER .)
    WHILE           reduce using rule 57 (range -> INTEGER DOUBLE_DOT INTEGER .)
    FOR             reduce using rule 57 (range -> INTEGER DOUBLE_DOT INTEGER .)
    PUTS            reduce using rule 57 (range -> INTEGER DOUBLE_DOT INTEGER .)
    LBRACE          reduce using rule 57 (range -> INTEGER DOUBLE_DOT INTEGER .)
    LBRACKET        reduce using rule 57 (range -> INTEGER DOUBLE_DOT INTEGER .)
    STRING          reduce using rule 57 (range -> INTEGER DOUBLE_DOT INTEGER .)
    INTEGER         reduce using rule 57 (range -> INTEGER DOUBLE_DOT INTEGER .)
    FLOAT           reduce using rule 57 (range -> INTEGER DOUBLE_DOT INTEGER .)
    LPAREN          reduce using rule 57 (range -> INTEGER DOUBLE_DOT INTEGER .)


state 117

    (58) range -> FLOAT DOUBLE_DOT FLOAT .

    IDENTIFIER      reduce using rule 58 (range -> FLOAT DOUBLE_DOT FLOAT .)
    GLOBAL_VAR      reduce using rule 58 (range -> FLOAT DOUBLE_DOT FLOAT .)
    IF              reduce using rule 58 (range -> FLOAT DOUBLE_DOT FLOAT .)
    DEF             reduce using rule 58 (range -> FLOAT DOUBLE_DOT FLOAT .)
    INSTANCE_VAR    reduce using rule 58 (range -> FLOAT DOUBLE_DOT FLOAT .)
    SETNEW          reduce using rule 58 (range -> FLOAT DOUBLE_DOT FLOAT .)
    WHILE           reduce using rule 58 (range -> FLOAT DOUBLE_DOT FLOAT .)
    FOR             reduce using rule 58 (range -> FLOAT DOUBLE_DOT FLOAT .)
    PUTS            reduce using rule 58 (range -> FLOAT DOUBLE_DOT FLOAT .)
    LBRACE          reduce using rule 58 (range -> FLOAT DOUBLE_DOT FLOAT .)
    LBRACKET        reduce using rule 58 (range -> FLOAT DOUBLE_DOT FLOAT .)
    STRING          reduce using rule 58 (range -> FLOAT DOUBLE_DOT FLOAT .)
    INTEGER         reduce using rule 58 (range -> FLOAT DOUBLE_DOT FLOAT .)
    FLOAT           reduce using rule 58 (range -> FLOAT DOUBLE_DOT FLOAT .)
    LPAREN          reduce using rule 58 (range -> FLOAT DOUBLE_DOT FLOAT .)


state 118

    (25) statement -> IF expression statement ELSIF expression statement END .

    IDENTIFIER      reduce using rule 25 (statement -> IF expression statement ELSIF expression statement END .)
    GLOBAL_VAR      reduce using rule 25 (statement -> IF expression statement ELSIF expression statement END .)
    IF              reduce using rule 25 (statement -> IF expression statement ELSIF expression statement END .)
    DEF             reduce using rule 25 (statement -> IF expression statement ELSIF expression statement END .)
    INSTANCE_VAR    reduce using rule 25 (statement -> IF expression statement ELSIF expression statement END .)
    SETNEW          reduce using rule 25 (statement -> IF expression statement ELSIF expression statement END .)
    WHILE           reduce using rule 25 (statement -> IF expression statement ELSIF expression statement END .)
    FOR             reduce using rule 25 (statement -> IF expression statement ELSIF expression statement END .)
    PUTS            reduce using rule 25 (statement -> IF expression statement ELSIF expression statement END .)
    LBRACE          reduce using rule 25 (statement -> IF expression statement ELSIF expression statement END .)
    LBRACKET        reduce using rule 25 (statement -> IF expression statement ELSIF expression statement END .)
    STRING          reduce using rule 25 (statement -> IF expression statement ELSIF expression statement END .)
    INTEGER         reduce using rule 25 (statement -> IF expression statement ELSIF expression statement END .)
    FLOAT           reduce using rule 25 (statement -> IF expression statement ELSIF expression statement END .)
    LPAREN          reduce using rule 25 (statement -> IF expression statement ELSIF expression statement END .)
    END             reduce using rule 25 (statement -> IF expression statement ELSIF expression statement END .)
    $end            reduce using rule 25 (statement -> IF expression statement ELSIF expression statement END .)
    ELSE            reduce using rule 25 (statement -> IF expression statement ELSIF expression statement END .)
    ELSIF           reduce using rule 25 (statement -> IF expression statement ELSIF expression statement END .)


state 119

    (26) statement -> IF expression statement ELSIF expression statement ELSE . statement END
    (7) statement -> . expression
    (8) statement -> . IDENTIFIER ASSIGN INTEGER
    (9) statement -> . IDENTIFIER ASSIGN FLOAT
    (10) statement -> . GLOBAL_VAR ASSIGN STRING
    (11) statement -> . GLOBAL_VAR ASSIGN expression
    (22) statement -> . statement statement
    (23) statement -> . IF expression statement END
    (24) statement -> . IF expression statement ELSE statement END
    (25) statement -> . IF expression statement ELSIF expression statement END
    (26) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (33) statement -> . DEF IDENTIFIER statement END
    (34) statement -> . IDENTIFIER
    (35) statement -> . INSTANCE_VAR ASSIGN INTEGER
    (36) statement -> . INSTANCE_VAR ASSIGN FLOAT
    (37) statement -> . SETNEW LPAREN optional_elements RPAREN
    (41) statement -> . WHILE expression statement END
    (42) statement -> . IDENTIFIER ASSIGN GETS
    (43) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (44) statement -> . IDENTIFIER LPAREN params RPAREN
    (56) statement -> . FOR IDENTIFIER IN range statement
    (59) statement -> . PUTS statement
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 5
    GLOBAL_VAR      shift and go to state 8
    IF              shift and go to state 10
    DEF             shift and go to state 11
    INSTANCE_VAR    shift and go to state 12
    SETNEW          shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    expression                     shift and go to state 4
    statement                      shift and go to state 121
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 120

    (43) statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .

    IDENTIFIER      reduce using rule 43 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    GLOBAL_VAR      reduce using rule 43 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    IF              reduce using rule 43 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    DEF             reduce using rule 43 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    INSTANCE_VAR    reduce using rule 43 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    SETNEW          reduce using rule 43 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    WHILE           reduce using rule 43 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    FOR             reduce using rule 43 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    PUTS            reduce using rule 43 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    LBRACE          reduce using rule 43 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    LBRACKET        reduce using rule 43 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    STRING          reduce using rule 43 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    INTEGER         reduce using rule 43 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    FLOAT           reduce using rule 43 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    LPAREN          reduce using rule 43 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    END             reduce using rule 43 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    $end            reduce using rule 43 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    ELSE            reduce using rule 43 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)
    ELSIF           reduce using rule 43 (statement -> DEF IDENTIFIER LPAREN params RPAREN statement END .)


state 121

    (26) statement -> IF expression statement ELSIF expression statement ELSE statement . END
    (22) statement -> statement . statement
    (7) statement -> . expression
    (8) statement -> . IDENTIFIER ASSIGN INTEGER
    (9) statement -> . IDENTIFIER ASSIGN FLOAT
    (10) statement -> . GLOBAL_VAR ASSIGN STRING
    (11) statement -> . GLOBAL_VAR ASSIGN expression
    (22) statement -> . statement statement
    (23) statement -> . IF expression statement END
    (24) statement -> . IF expression statement ELSE statement END
    (25) statement -> . IF expression statement ELSIF expression statement END
    (26) statement -> . IF expression statement ELSIF expression statement ELSE statement END
    (33) statement -> . DEF IDENTIFIER statement END
    (34) statement -> . IDENTIFIER
    (35) statement -> . INSTANCE_VAR ASSIGN INTEGER
    (36) statement -> . INSTANCE_VAR ASSIGN FLOAT
    (37) statement -> . SETNEW LPAREN optional_elements RPAREN
    (41) statement -> . WHILE expression statement END
    (42) statement -> . IDENTIFIER ASSIGN GETS
    (43) statement -> . DEF IDENTIFIER LPAREN params RPAREN statement END
    (44) statement -> . IDENTIFIER LPAREN params RPAREN
    (56) statement -> . FOR IDENTIFIER IN range statement
    (59) statement -> . PUTS statement
    (14) expression -> . LBRACE key_value_pairs RBRACE
    (15) expression -> . LBRACE RBRACE
    (19) expression -> . IDENTIFIER
    (20) expression -> . GLOBAL_VAR
    (21) expression -> . INSTANCE_VAR
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . expression GREATER_EQUAL expression
    (30) expression -> . expression LESS_EQUAL expression
    (31) expression -> . expression EQUALS expression
    (32) expression -> . expression NOT_EQUALS expression
    (45) expression -> . term
    (48) expression -> . expression PLUS factor
    (49) expression -> . expression MINUS factor
    (53) expression -> . LBRACKET elements RBRACKET
    (46) term -> . factor DIVIDE factor
    (47) term -> . factor TIMES factor
    (12) factor -> . factor POWER factor
    (13) factor -> . STRING
    (50) factor -> . INTEGER
    (51) factor -> . FLOAT
    (52) factor -> . LPAREN expression RPAREN

    END             shift and go to state 122
    IDENTIFIER      shift and go to state 5
    GLOBAL_VAR      shift and go to state 8
    IF              shift and go to state 10
    DEF             shift and go to state 11
    INSTANCE_VAR    shift and go to state 12
    SETNEW          shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    PUTS            shift and go to state 17
    LBRACE          shift and go to state 18
    LBRACKET        shift and go to state 21
    STRING          shift and go to state 9
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    LPAREN          shift and go to state 14

    expression                     shift and go to state 4
    statement                      shift and go to state 24
    term                           shift and go to state 19
    factor                         shift and go to state 20

state 122

    (26) statement -> IF expression statement ELSIF expression statement ELSE statement END .

    IDENTIFIER      reduce using rule 26 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    GLOBAL_VAR      reduce using rule 26 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    IF              reduce using rule 26 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    DEF             reduce using rule 26 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    INSTANCE_VAR    reduce using rule 26 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    SETNEW          reduce using rule 26 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    WHILE           reduce using rule 26 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    FOR             reduce using rule 26 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    PUTS            reduce using rule 26 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    LBRACE          reduce using rule 26 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    LBRACKET        reduce using rule 26 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    STRING          reduce using rule 26 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    INTEGER         reduce using rule 26 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    FLOAT           reduce using rule 26 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    LPAREN          reduce using rule 26 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    END             reduce using rule 26 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    $end            reduce using rule 26 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    ELSE            reduce using rule 26 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)
    ELSIF           reduce using rule 26 (statement -> IF expression statement ELSIF expression statement ELSE statement END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENTIFIER in state 3 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for DEF in state 3 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 3 resolved as shift
WARNING: shift/reduce conflict for SETNEW in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 3 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 3 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 3 resolved as shift
WARNING: shift/reduce conflict for STRING in state 3 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 3 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 3 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 3 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 5 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 5 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 23 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 23 resolved as shift
WARNING: shift/reduce conflict for IF in state 23 resolved as shift
WARNING: shift/reduce conflict for DEF in state 23 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 23 resolved as shift
WARNING: shift/reduce conflict for SETNEW in state 23 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 23 resolved as shift
WARNING: shift/reduce conflict for FOR in state 23 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 23 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 23 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 23 resolved as shift
WARNING: shift/reduce conflict for STRING in state 23 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 23 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 23 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 23 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 24 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 24 resolved as shift
WARNING: shift/reduce conflict for IF in state 24 resolved as shift
WARNING: shift/reduce conflict for DEF in state 24 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 24 resolved as shift
WARNING: shift/reduce conflict for SETNEW in state 24 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 24 resolved as shift
WARNING: shift/reduce conflict for FOR in state 24 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 24 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 24 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 24 resolved as shift
WARNING: shift/reduce conflict for STRING in state 24 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 24 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 24 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 24 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 46 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 46 resolved as shift
WARNING: shift/reduce conflict for IF in state 46 resolved as shift
WARNING: shift/reduce conflict for DEF in state 46 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 46 resolved as shift
WARNING: shift/reduce conflict for SETNEW in state 46 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 46 resolved as shift
WARNING: shift/reduce conflict for FOR in state 46 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 46 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 46 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 46 resolved as shift
WARNING: shift/reduce conflict for STRING in state 46 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 46 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 46 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 46 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 110 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 110 resolved as shift
WARNING: shift/reduce conflict for IF in state 110 resolved as shift
WARNING: shift/reduce conflict for DEF in state 110 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 110 resolved as shift
WARNING: shift/reduce conflict for SETNEW in state 110 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 110 resolved as shift
WARNING: shift/reduce conflict for FOR in state 110 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 110 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 110 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 110 resolved as shift
WARNING: shift/reduce conflict for STRING in state 110 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 110 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 110 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 110 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (expression -> IDENTIFIER)
WARNING: rejected rule (statement -> IDENTIFIER) in state 5
WARNING: reduce/reduce conflict in state 96 resolved using rule (params -> IDENTIFIER)
WARNING: rejected rule (expression -> IDENTIFIER) in state 96
WARNING: Rule (statement -> IDENTIFIER) is never reduced
