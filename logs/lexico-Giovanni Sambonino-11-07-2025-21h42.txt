Tokens reconocidos:
DEF: def
IDENTIFIER: insertion_sort
LPAREN: (
IDENTIFIER: arr
RPAREN: )
IF: if
IDENTIFIER: arr
DOT: .
IDENTIFIER: length
EQUALS: ==
INTEGER: 0
RETURN: return
IDENTIFIER: arr
END: end
FOR: for
IDENTIFIER: i
IN: in
INTEGER: 1
RANGE: ..
LPAREN: (
IDENTIFIER: arr
DOT: .
IDENTIFIER: length
MINUS: -
INTEGER: 1
RPAREN: )
IDENTIFIER: key
ASSIGN: =
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: i
RBRACKET: ]
IDENTIFIER: pos
ASSIGN: =
IDENTIFIER: i
FOR: for
IDENTIFIER: j
IN: in
INTEGER: 0
RANGE: ..
LPAREN: (
IDENTIFIER: i
MINUS: -
INTEGER: 1
RPAREN: )
IF: if
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: j
RBRACKET: ]
GREATER: >
IDENTIFIER: key
IDENTIFIER: pos
ASSIGN: =
IDENTIFIER: j
BREAK: break
END: end
END: end
IDENTIFIER: temp_arr
ASSIGN: =
LBRACKET: [
RBRACKET: ]
FOR: for
IDENTIFIER: m
IN: in
INTEGER: 0
RANGE: ..
LPAREN: (
IDENTIFIER: arr
DOT: .
IDENTIFIER: length
MINUS: -
INTEGER: 1
RPAREN: )
IF: if
IDENTIFIER: m
LESS: <
IDENTIFIER: pos
IDENTIFIER: temp_arr
LBRACKET: [
IDENTIFIER: m
RBRACKET: ]
ASSIGN: =
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: m
RBRACKET: ]
END: end
IF: if
IDENTIFIER: m
EQUALS: ==
IDENTIFIER: pos
IDENTIFIER: temp_arr
LBRACKET: [
IDENTIFIER: m
RBRACKET: ]
ASSIGN: =
IDENTIFIER: key
END: end
IF: if
IDENTIFIER: m
GREATER: >
IDENTIFIER: pos
AND: &&
IDENTIFIER: m
LESS_EQUAL: <=
IDENTIFIER: i
IDENTIFIER: temp_arr
LBRACKET: [
IDENTIFIER: m
RBRACKET: ]
END: end
IF: if
IDENTIFIER: m
GREATER: >
IDENTIFIER: i
IDENTIFIER: temp_arr
LBRACKET: [
IDENTIFIER: m
RBRACKET: ]
ASSIGN: =
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: m
RBRACKET: ]
END: end
END: end
FOR: for
IDENTIFIER: n
IN: in
INTEGER: 0
RANGE: ..
LPAREN: (
IDENTIFIER: arr
DOT: .
IDENTIFIER: length
MINUS: -
INTEGER: 1
RPAREN: )
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: n
RBRACKET: ]
ASSIGN: =
IDENTIFIER: temp_arr
LBRACKET: [
IDENTIFIER: n
RBRACKET: ]
END: end
END: end
RETURN: return
IDENTIFIER: arr
END: end
DEF: def
IDENTIFIER: verificar_ordenamiento
LPAREN: (
IDENTIFIER: arr
RPAREN: )
FOR: for
IDENTIFIER: i
IN: in
INTEGER: 1
RANGE: ..
LPAREN: (
IDENTIFIER: arr
DOT: .
IDENTIFIER: length
MINUS: -
INTEGER: 1
RPAREN: )
IF: if
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: i
MINUS: -
INTEGER: 1
RBRACKET: ]
GREATER: >
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: i
RBRACKET: ]
RETURN: return
FALSE: false
END: end
END: end
RETURN: return
TRUE: true
END: end
IDENTIFIER: numeros
ASSIGN: =
LBRACKET: [
INTEGER: 64
COMMA: ,
INTEGER: 34
COMMA: ,
INTEGER: 25
COMMA: ,
INTEGER: 12
COMMA: ,
INTEGER: 22
COMMA: ,
INTEGER: 11
COMMA: ,
INTEGER: 90
COMMA: ,
INTEGER: 5
RBRACKET: ]
IDENTIFIER: copia_numeros
ASSIGN: =
IDENTIFIER: numeros
IDENTIFIER: resultado
ASSIGN: =
IDENTIFIER: insertion_sort
LPAREN: (
IDENTIFIER: copia_numeros
RPAREN: )
IDENTIFIER: es_correcto
ASSIGN: =
IDENTIFIER: verificar_ordenamiento
LPAREN: (
IDENTIFIER: resultado
RPAREN: )
PUTS: puts
STRING: Array original:
PUTS: puts
IDENTIFIER: numeros
PUTS: puts
STRING: Array ordenado:
PUTS: puts
IDENTIFIER: resultado
PUTS: puts
STRING: Ordenamiento correcto:
PUTS: puts
IDENTIFIER: es_correcto
