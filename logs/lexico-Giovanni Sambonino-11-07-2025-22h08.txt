Tokens reconocidos:
DEF: def
IDENTIFIER: contar_elementos
LPAREN: (
IDENTIFIER: arr
RPAREN: )
IDENTIFIER: contador
ASSIGN: =
INTEGER: 0
FOR: for
IDENTIFIER: i
IN: in
INTEGER: 0
RANGE: ..
LPAREN: (
IDENTIFIER: arr
DOT: .
IDENTIFIER: length
MINUS: -
INTEGER: 1
RPAREN: )
IDENTIFIER: contador
PLUS_ASSIGN: +=
INTEGER: 1
END: end
RETURN: return
IDENTIFIER: contador
END: end
DEF: def
IDENTIFIER: calcular_suma
LPAREN: (
IDENTIFIER: arr
RPAREN: )
IDENTIFIER: suma
ASSIGN: =
INTEGER: 0
IDENTIFIER: j
ASSIGN: =
INTEGER: 0
WHILE: while
IDENTIFIER: j
LESS: <
LPAREN: (
IDENTIFIER: arr
DOT: .
IDENTIFIER: length
RPAREN: )
IDENTIFIER: suma
PLUS_ASSIGN: +=
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: j
RBRACKET: ]
IDENTIFIER: j
PLUS_ASSIGN: +=
INTEGER: 1
END: end
RETURN: return
IDENTIFIER: suma
END: end
DEF: def
IDENTIFIER: calcular_promedio
LPAREN: (
IDENTIFIER: arr
RPAREN: )
IDENTIFIER: total
ASSIGN: =
IDENTIFIER: calcular_suma
LPAREN: (
IDENTIFIER: arr
RPAREN: )
IDENTIFIER: cantidad
ASSIGN: =
IDENTIFIER: contar_elementos
LPAREN: (
IDENTIFIER: arr
RPAREN: )
IDENTIFIER: promedio
ASSIGN: =
IDENTIFIER: total
MINUS: -
IDENTIFIER: cantidad
RETURN: return
IDENTIFIER: promedio
END: end
IDENTIFIER: numeros
ASSIGN: =
LBRACKET: [
INTEGER: 10
COMMA: ,
INTEGER: 20
COMMA: ,
INTEGER: 30
COMMA: ,
INTEGER: 40
COMMA: ,
INTEGER: 50
COMMA: ,
INTEGER: 15
COMMA: ,
INTEGER: 25
COMMA: ,
INTEGER: 35
RBRACKET: ]
IDENTIFIER: key
ASSIGN: =
IDENTIFIER: calcular_promedio
LPAREN: (
IDENTIFIER: numeros
RPAREN: )
IDENTIFIER: j
ASSIGN: =
IDENTIFIER: contar_elementos
LPAREN: (
IDENTIFIER: numeros
RPAREN: )
IDENTIFIER: arr
ASSIGN: =
IDENTIFIER: numeros
PUTS: puts
STRING: Total de elementos:
PUTS: puts
IDENTIFIER: j
PUTS: puts
STRING: Promedio calculado:
PUTS: puts
IDENTIFIER: key
