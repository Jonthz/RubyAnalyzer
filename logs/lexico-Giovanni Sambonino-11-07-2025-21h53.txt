Tokens reconocidos:
DEF: def
IDENTIFIER: contar_mayores
LPAREN: (
IDENTIFIER: arr
COMMA: ,
IDENTIFIER: key
RPAREN: )
IDENTIFIER: contador
ASSIGN: =
INTEGER: 0
FOR: for
IDENTIFIER: i
IN: in
INTEGER: 0
RANGE: ..
LPAREN: (
IDENTIFIER: arr
DOT: .
IDENTIFIER: length
MINUS: -
INTEGER: 1
RPAREN: )
IF: if
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: i
RBRACKET: ]
GREATER: >
IDENTIFIER: key
IDENTIFIER: contador
PLUS_ASSIGN: +=
INTEGER: 1
END: end
END: end
RETURN: return
IDENTIFIER: contador
END: end
DEF: def
IDENTIFIER: contar_menores
LPAREN: (
IDENTIFIER: arr
COMMA: ,
IDENTIFIER: key
RPAREN: )
IDENTIFIER: contador
ASSIGN: =
INTEGER: 0
IDENTIFIER: j
ASSIGN: =
INTEGER: 0
WHILE: while
IDENTIFIER: j
LESS: <
IDENTIFIER: arr
DOT: .
IDENTIFIER: length
IF: if
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: j
RBRACKET: ]
LESS: <
IDENTIFIER: key
IDENTIFIER: contador
PLUS_ASSIGN: +=
INTEGER: 1
ELSIF: elsif
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: j
RBRACKET: ]
ASSIGN: =
INTEGER: 2
IDENTIFIER: contador
ASSIGN: =
IDENTIFIER: contador
END: end
IDENTIFIER: j
PLUS_ASSIGN: +=
INTEGER: 1
END: end
RETURN: return
IDENTIFIER: contador
END: end
IDENTIFIER: numeros
ASSIGN: =
LBRACKET: [
INTEGER: 12
COMMA: ,
INTEGER: 8
COMMA: ,
INTEGER: 25
COMMA: ,
INTEGER: 15
COMMA: ,
INTEGER: 3
COMMA: ,
INTEGER: 20
COMMA: ,
INTEGER: 9
COMMA: ,
INTEGER: 18
COMMA: ,
INTEGER: 6
COMMA: ,
INTEGER: 14
RBRACKET: ]
IDENTIFIER: key
ASSIGN: =
INTEGER: 12
IDENTIFIER: resultado_mayores
ASSIGN: =
IDENTIFIER: contar_mayores
LPAREN: (
IDENTIFIER: numeros
COMMA: ,
IDENTIFIER: key
RPAREN: )
IDENTIFIER: resultado_menores
ASSIGN: =
IDENTIFIER: contar_menores
LPAREN: (
IDENTIFIER: numeros
COMMA: ,
IDENTIFIER: key
RPAREN: )
IDENTIFIER: diferencia
ASSIGN: =
IDENTIFIER: resultado_mayores
MINUS: -
IDENTIFIER: resultado_menores
PUTS: puts
STRING: Elementos mayores que la clave:
PUTS: puts
IDENTIFIER: resultado_mayores
PUTS: puts
STRING: Elementos menores que la clave:
PUTS: puts
IDENTIFIER: resultado_menores
PUTS: puts
STRING: Diferencia:
PUTS: puts
IDENTIFIER: diferencia
