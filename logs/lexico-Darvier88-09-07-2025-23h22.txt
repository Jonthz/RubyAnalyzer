Tokens reconocidos:
DEF: def
IDENTIFIER: quick_sort
LPAREN: (
IDENTIFIER: arr
RPAREN: )
IF: if
IDENTIFIER: arr
LESS_EQUAL: <=
INTEGER: 1
RETURN: return
IDENTIFIER: arr
END: end
IDENTIFIER: pivot_index
ASSIGN: =
IDENTIFIER: arr
IDENTIFIER: pivot
ASSIGN: =
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: pivot_index
RBRACKET: ]
IDENTIFIER: left
ASSIGN: =
LBRACKET: [
RBRACKET: ]
IDENTIFIER: right
ASSIGN: =
LBRACKET: [
RBRACKET: ]
IDENTIFIER: i
ASSIGN: =
INTEGER: 0
WHILE: while
IDENTIFIER: i
LESS: <
IDENTIFIER: arr
IF: if
IDENTIFIER: i
NOT_EQUALS: !=
IDENTIFIER: pivot_index
IF: if
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: i
RBRACKET: ]
LESS: <
IDENTIFIER: pivot
IDENTIFIER: left
ASSIGN: =
IDENTIFIER: left
PLUS: +
LBRACKET: [
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: i
RBRACKET: ]
RBRACKET: ]
ELSE: else
IDENTIFIER: right
ASSIGN: =
IDENTIFIER: right
PLUS: +
LBRACKET: [
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: i
RBRACKET: ]
RBRACKET: ]
END: end
END: end
IDENTIFIER: i
ASSIGN: =
IDENTIFIER: i
PLUS: +
INTEGER: 1
END: end
IDENTIFIER: sorted_left
ASSIGN: =
IDENTIFIER: quick_sort
LPAREN: (
IDENTIFIER: left
RPAREN: )
IDENTIFIER: sorted_right
ASSIGN: =
IDENTIFIER: quick_sort
LPAREN: (
IDENTIFIER: right
RPAREN: )
RETURN: return
IDENTIFIER: sorted_left
PLUS: +
LBRACKET: [
IDENTIFIER: pivot
RBRACKET: ]
PLUS: +
IDENTIFIER: sorted_right
END: end
DEF: def
IDENTIFIER: print_array
LPAREN: (
IDENTIFIER: arr
RPAREN: )
PUTS: puts
IDENTIFIER: arr
END: end
IDENTIFIER: arr1
ASSIGN: =
LBRACKET: [
INTEGER: 12
COMMA: ,
INTEGER: 11
COMMA: ,
INTEGER: 13
COMMA: ,
INTEGER: 5
COMMA: ,
INTEGER: 6
RBRACKET: ]
IDENTIFIER: sorted_arr1
ASSIGN: =
IDENTIFIER: quick_sort
LPAREN: (
IDENTIFIER: arr1
RPAREN: )
IDENTIFIER: print_array
LPAREN: (
IDENTIFIER: sorted_arr1
RPAREN: )
