Tokens reconocidos:
CLASS: class
CONSTANT: Calculator
DEF: def
INITIALIZE: initialize
LPAREN: (
IDENTIFIER: name
RPAREN: )
INSTANCE_VAR: @name
ASSIGN: =
IDENTIFIER: name
END: end
DEF: def
IDENTIFIER: add_numbers
LPAREN: (
IDENTIFIER: num1
COMMA: ,
IDENTIFIER: num2
RPAREN: )
IDENTIFIER: result
ASSIGN: =
IDENTIFIER: num1
DOT: .
IDENTIFIER: to_i
PLUS: +
IDENTIFIER: num2
DOT: .
IDENTIFIER: to_i
PUTS: puts
STRING: Suma realizada
PUTS: puts
IDENTIFIER: result
RETURN: return
IDENTIFIER: result
END: end
DEF: def
IDENTIFIER: multiply_values
LPAREN: (
IDENTIFIER: val1
COMMA: ,
IDENTIFIER: val2
RPAREN: )
IDENTIFIER: product
ASSIGN: =
IDENTIFIER: val1
DOT: .
IDENTIFIER: to_i
TIMES: *
IDENTIFIER: val2
DOT: .
IDENTIFIER: to_i
PUTS: puts
STRING: Multiplicación completada
PUTS: puts
IDENTIFIER: product
RETURN: return
IDENTIFIER: product
END: end
DEF: def
IDENTIFIER: get_memory
PUTS: puts
STRING: Memoria actual
PUTS: puts
INSTANCE_VAR: @name
RETURN: return
INSTANCE_VAR: @name
END: end
END: end
IDENTIFIER: my_calc
ASSIGN: =
CONSTANT: Calculator
DOT: .
NEW: new
LPAREN: (
STRING: MiCalc
RPAREN: )
IDENTIFIER: my_calc
DOT: .
IDENTIFIER: add_numbers
LPAREN: (
STRING: 10
COMMA: ,
STRING: 20
RPAREN: )
IDENTIFIER: my_calc
DOT: .
IDENTIFIER: multiply_values
LPAREN: (
STRING: 5
COMMA: ,
STRING: 4
RPAREN: )
IDENTIFIER: my_calc
DOT: .
IDENTIFIER: get_memory
