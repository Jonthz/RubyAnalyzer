Tokens reconocidos:
DEF: def
IDENTIFIER: insertion_sort
LPAREN: (
IDENTIFIER: arr
RPAREN: )
IF: if
IDENTIFIER: arr
DOT: .
IDENTIFIER: nil?
OR: ||
NOT: !
IDENTIFIER: arr
DOT: .
IDENTIFIER: is_a?
LPAREN: (
CONSTANT: Array
RPAREN: )
PUTS: puts
STRING: Error: Debe ser un arreglo válido
RETURN: return
NIL: nil
END: end
PUTS: puts
STRING: Arreglo original: #{arr}
FOR: for
IDENTIFIER: i
IN: in
INTEGER: 1
RANGE: ..
IDENTIFIER: arr
DOT: .
IDENTIFIER: length
MINUS: -
INTEGER: 1
IDENTIFIER: key
ASSIGN: =
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: i
RBRACKET: ]
IDENTIFIER: j
ASSIGN: =
IDENTIFIER: i
MINUS: -
INTEGER: 1
WHILE: while
IDENTIFIER: j
GREATER_EQUAL: >=
INTEGER: 0
AND: &&
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: j
RBRACKET: ]
GREATER: >
IDENTIFIER: key
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: j
PLUS: +
INTEGER: 1
RBRACKET: ]
ASSIGN: =
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: j
RBRACKET: ]
IDENTIFIER: j
ASSIGN: =
IDENTIFIER: j
MINUS: -
INTEGER: 1
END: end
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: j
PLUS: +
INTEGER: 1
RBRACKET: ]
ASSIGN: =
IDENTIFIER: key
END: end
PUTS: puts
STRING: Arreglo ordenado: #{arr}
RETURN: return
IDENTIFIER: arr
END: end
DEF: def
IDENTIFIER: validate_array
LPAREN: (
IDENTIFIER: arr
RPAREN: )
FOR: for
IDENTIFIER: element
IN: in
IDENTIFIER: arr
IDENTIFIER: unless
IDENTIFIER: element
DOT: .
IDENTIFIER: is_a?
LPAREN: (
CONSTANT: Numeric
RPAREN: )
PUTS: puts
STRING: Error: '#{element}' no es un número
RETURN: return
FALSE: false
END: end
END: end
RETURN: return
TRUE: true
END: end
PUTS: puts
STRING: === INSERTION SORT ===
IDENTIFIER: numeros1
ASSIGN: =
LBRACKET: [
INTEGER: 64
COMMA: ,
INTEGER: 34
COMMA: ,
INTEGER: 25
COMMA: ,
INTEGER: 12
COMMA: ,
INTEGER: 22
COMMA: ,
INTEGER: 11
RBRACKET: ]
PUTS: puts
STRING: Caso 1:
IF: if
IDENTIFIER: validate_array
LPAREN: (
IDENTIFIER: numeros1
RPAREN: )
IDENTIFIER: insertion_sort
LPAREN: (
IDENTIFIER: numeros1
RPAREN: )
END: end
PUTS: puts
STRING: 
IDENTIFIER: numeros2
ASSIGN: =
LBRACKET: [
MINUS: -
INTEGER: 5
COMMA: ,
INTEGER: 10
COMMA: ,
MINUS: -
INTEGER: 3
COMMA: ,
INTEGER: 8
COMMA: ,
MINUS: -
INTEGER: 1
COMMA: ,
INTEGER: 0
RBRACKET: ]
PUTS: puts
STRING: Caso 2:
IF: if
IDENTIFIER: validate_array
LPAREN: (
IDENTIFIER: numeros2
RPAREN: )
IDENTIFIER: insertion_sort
LPAREN: (
IDENTIFIER: numeros2
RPAREN: )
END: end
PUTS: puts
STRING: 
IDENTIFIER: numeros3
ASSIGN: =
LBRACKET: [
INTEGER: 1
COMMA: ,
INTEGER: 2
COMMA: ,
INTEGER: 3
COMMA: ,
INTEGER: 4
COMMA: ,
INTEGER: 5
RBRACKET: ]
PUTS: puts
STRING: Caso 3:
IF: if
IDENTIFIER: validate_array
LPAREN: (
IDENTIFIER: numeros3
RPAREN: )
IDENTIFIER: insertion_sort
LPAREN: (
IDENTIFIER: numeros3
RPAREN: )
END: end
PUTS: puts
STRING: 
PUTS: puts
STRING: Algoritmo completado
