Tokens reconocidos:
DEF: def
IDENTIFIER: buscar_elemento
LPAREN: (
IDENTIFIER: arr
COMMA: ,
IDENTIFIER: key
RPAREN: )
FOR: for
IDENTIFIER: i
IN: in
INTEGER: 0
RANGE: ..
LPAREN: (
IDENTIFIER: arr
DOT: .
IDENTIFIER: length
MINUS: -
INTEGER: 1
RPAREN: )
IF: if
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: i
RBRACKET: ]
EQUALS: ==
IDENTIFIER: key
RETURN: return
IDENTIFIER: i
END: end
END: end
RETURN: return
MINUS: -
INTEGER: 1
END: end
DEF: def
IDENTIFIER: contar_mayores
LPAREN: (
IDENTIFIER: arr
COMMA: ,
IDENTIFIER: key
RPAREN: )
IDENTIFIER: contador
ASSIGN: =
INTEGER: 0
IDENTIFIER: j
ASSIGN: =
INTEGER: 0
WHILE: while
IDENTIFIER: j
LESS: <
IDENTIFIER: arr
DOT: .
IDENTIFIER: length
IF: if
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: j
RBRACKET: ]
GREATER: >
IDENTIFIER: key
IDENTIFIER: contador
PLUS_ASSIGN: +=
INTEGER: 1
ELSIF: elsif
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: j
RBRACKET: ]
EQUALS: ==
IDENTIFIER: key
IDENTIFIER: contador
PLUS_ASSIGN: +=
INTEGER: 1
END: end
IDENTIFIER: j
PLUS_ASSIGN: +=
INTEGER: 1
END: end
RETURN: return
IDENTIFIER: contador
END: end
IDENTIFIER: numeros
ASSIGN: =
LBRACKET: [
INTEGER: 5
COMMA: ,
INTEGER: 10
COMMA: ,
INTEGER: 15
COMMA: ,
INTEGER: 20
COMMA: ,
INTEGER: 25
COMMA: ,
INTEGER: 30
COMMA: ,
INTEGER: 8
COMMA: ,
INTEGER: 12
RBRACKET: ]
IDENTIFIER: key
ASSIGN: =
INTEGER: 15
IDENTIFIER: resultado1
ASSIGN: =
IDENTIFIER: buscar_elemento
LPAREN: (
IDENTIFIER: numeros
COMMA: ,
IDENTIFIER: key
RPAREN: )
IDENTIFIER: resultado2
ASSIGN: =
IDENTIFIER: contar_mayores
LPAREN: (
IDENTIFIER: numeros
COMMA: ,
IDENTIFIER: key
RPAREN: )
PUTS: puts
STRING: Buscando elemento:
PUTS: puts
IDENTIFIER: key
PUTS: puts
STRING: Posición encontrada:
PUTS: puts
IDENTIFIER: resultado1
PUTS: puts
STRING: Elementos mayores o iguales:
PUTS: puts
IDENTIFIER: resultado2
