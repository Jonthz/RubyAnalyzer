Tokens reconocidos:
DEF: def
IDENTIFIER: insertion_sort
LPAREN: (
IDENTIFIER: arr
RPAREN: )
IF: if
IDENTIFIER: arr
DOT: .
IDENTIFIER: length
EQUALS: ==
INTEGER: 0
RETURN: return
IDENTIFIER: arr
END: end
FOR: for
IDENTIFIER: i
IN: in
INTEGER: 1
RANGE: ..
LPAREN: (
IDENTIFIER: arr
DOT: .
IDENTIFIER: length
MINUS: -
INTEGER: 1
RPAREN: )
IDENTIFIER: key
ASSIGN: =
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: i
RBRACKET: ]
IDENTIFIER: j
ASSIGN: =
IDENTIFIER: i
MINUS: -
INTEGER: 1
WHILE: while
IDENTIFIER: j
GREATER_EQUAL: >=
INTEGER: 0
AND: &&
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: j
RBRACKET: ]
GREATER: >
IDENTIFIER: key
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: j
PLUS: +
INTEGER: 1
RBRACKET: ]
ASSIGN: =
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: j
RBRACKET: ]
IDENTIFIER: j
ASSIGN: =
IDENTIFIER: j
MINUS: -
INTEGER: 1
END: end
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: j
PLUS: +
INTEGER: 1
RBRACKET: ]
ASSIGN: =
IDENTIFIER: key
END: end
RETURN: return
IDENTIFIER: arr
END: end
DEF: def
IDENTIFIER: verificar_ordenamiento
LPAREN: (
IDENTIFIER: arr
RPAREN: )
FOR: for
IDENTIFIER: i
IN: in
INTEGER: 1
RANGE: ..
LPAREN: (
IDENTIFIER: arr
DOT: .
IDENTIFIER: length
MINUS: -
INTEGER: 1
RPAREN: )
IF: if
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: i
MINUS: -
INTEGER: 1
RBRACKET: ]
GREATER: >
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: i
RBRACKET: ]
RETURN: return
FALSE: false
END: end
END: end
RETURN: return
TRUE: true
END: end
DEF: def
IDENTIFIER: sum
LPAREN: (
IDENTIFIER: a
COMMA: ,
IDENTIFIER: b
RPAREN: )
IDENTIFIER: resultado
ASSIGN: =
IDENTIFIER: a
PLUS: +
IDENTIFIER: b
RETURN: return
IDENTIFIER: resultado
END: end
PUTS: puts
STRING: Hola mundo
PUTS: puts
STRING: Ruby
INSTANCE_VAR: @x
ASSIGN: =
INTEGER: 10
IDENTIFIER: a
ASSIGN: =
INTEGER: 5
IDENTIFIER: b
ASSIGN: =
INTEGER: 10
IDENTIFIER: c
ASSIGN: =
IDENTIFIER: a
PLUS: +
IDENTIFIER: b
IDENTIFIER: x
ASSIGN: =
INTEGER: 10
IDENTIFIER: y
ASSIGN: =
IDENTIFIER: x
PLUS: +
INTEGER: 5
IDENTIFIER: contador
ASSIGN: =
INTEGER: 0
WHILE: while
IDENTIFIER: contador
LESS: <
INTEGER: 3
IDENTIFIER: contador
ASSIGN: =
IDENTIFIER: contador
PLUS: +
INTEGER: 1
END: end
IDENTIFIER: numeros
ASSIGN: =
LBRACKET: [
INTEGER: 64
COMMA: ,
INTEGER: 34
COMMA: ,
INTEGER: 25
COMMA: ,
INTEGER: 12
COMMA: ,
INTEGER: 22
COMMA: ,
INTEGER: 11
COMMA: ,
INTEGER: 90
COMMA: ,
INTEGER: 5
RBRACKET: ]
IDENTIFIER: resultado
ASSIGN: =
IDENTIFIER: insertion_sort
LPAREN: (
IDENTIFIER: numeros
RPAREN: )
IDENTIFIER: es_correcto
ASSIGN: =
IDENTIFIER: verificar_ordenamiento
LPAREN: (
IDENTIFIER: resultado
RPAREN: )
IDENTIFIER: suma_resultado
ASSIGN: =
IDENTIFIER: sum
LPAREN: (
INTEGER: 5
COMMA: ,
INTEGER: 10
RPAREN: )
PUTS: puts
STRING: Array original:
PUTS: puts
IDENTIFIER: numeros
PUTS: puts
STRING: Array ordenado:
PUTS: puts
IDENTIFIER: resultado
PUTS: puts
STRING: Suma:
PUTS: puts
IDENTIFIER: suma_resultado
