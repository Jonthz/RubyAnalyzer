Tokens reconocidos:
DEF: def
IDENTIFIER: quick_sort
LPAREN: (
IDENTIFIER: arr
COMMA: ,
IDENTIFIER: low
COMMA: ,
IDENTIFIER: high
RPAREN: )
IF: if
IDENTIFIER: low
LESS: <
IDENTIFIER: high
IDENTIFIER: pivot_index
ASSIGN: =
IDENTIFIER: partition
LPAREN: (
IDENTIFIER: arr
COMMA: ,
IDENTIFIER: low
COMMA: ,
IDENTIFIER: high
RPAREN: )
IDENTIFIER: quick_sort
LPAREN: (
IDENTIFIER: arr
COMMA: ,
IDENTIFIER: low
COMMA: ,
IDENTIFIER: pivot_index
MINUS: -
INTEGER: 1
RPAREN: )
CONSTANT: Recursi
IDENTIFIER: n
IDENTIFIER: en
IDENTIFIER: la
IDENTIFIER: sublista
IDENTIFIER: izquierda
IDENTIFIER: quick_sort
LPAREN: (
IDENTIFIER: arr
COMMA: ,
IDENTIFIER: pivot_index
PLUS: +
INTEGER: 1
COMMA: ,
IDENTIFIER: high
RPAREN: )
CONSTANT: Recursi
IDENTIFIER: n
IDENTIFIER: en
IDENTIFIER: la
IDENTIFIER: sublista
IDENTIFIER: derecha
END: end
END: end
DEF: def
IDENTIFIER: partition
LPAREN: (
IDENTIFIER: arr
COMMA: ,
IDENTIFIER: low
COMMA: ,
IDENTIFIER: high
RPAREN: )
IDENTIFIER: pivot
ASSIGN: =
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: high
RBRACKET: ]
CONSTANT: Elegimos
IDENTIFIER: el
IDENTIFIER: ltimo
IDENTIFIER: elemento
IDENTIFIER: como
IDENTIFIER: pivote
IDENTIFIER: i
ASSIGN: =
IDENTIFIER: low
MINUS: -
INTEGER: 1
IDENTIFIER: ndice
IDENTIFIER: del
IDENTIFIER: elemento
IDENTIFIER: m
IDENTIFIER: s
IDENTIFIER: peque
IDENTIFIER: o
CONSTANT: Recorremos
IDENTIFIER: el
IDENTIFIER: array
IDENTIFIER: para
IDENTIFIER: organizar
IDENTIFIER: los
IDENTIFIER: elementos
IDENTIFIER: en
IDENTIFIER: base
IDENTIFIER: al
IDENTIFIER: pivote
FOR: for
IDENTIFIER: j
IN: in
IDENTIFIER: low
RANGE: ..
IDENTIFIER: high
MINUS: -
INTEGER: 1
IF: if
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: j
RBRACKET: ]
LESS_EQUAL: <=
IDENTIFIER: pivot
IDENTIFIER: i
PLUS_ASSIGN: +=
INTEGER: 1
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: i
RBRACKET: ]
COMMA: ,
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: j
RBRACKET: ]
ASSIGN: =
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: j
RBRACKET: ]
COMMA: ,
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: i
RBRACKET: ]
CONSTANT: Intercambiamos
IDENTIFIER: los
IDENTIFIER: elementos
END: end
END: end
CONSTANT: Colocamos
IDENTIFIER: el
IDENTIFIER: pivote
IDENTIFIER: en
IDENTIFIER: su
IDENTIFIER: posici
IDENTIFIER: n
IDENTIFIER: correcta
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: i
PLUS: +
INTEGER: 1
RBRACKET: ]
COMMA: ,
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: high
RBRACKET: ]
ASSIGN: =
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: high
RBRACKET: ]
COMMA: ,
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: i
PLUS: +
INTEGER: 1
RBRACKET: ]
RETURN: return
IDENTIFIER: i
PLUS: +
INTEGER: 1
END: end
DEF: def
IDENTIFIER: print_array
LPAREN: (
IDENTIFIER: arr
RPAREN: )
PUTS: puts
IDENTIFIER: arr
DOT: .
IDENTIFIER: join
LPAREN: (
STRING: , 
RPAREN: )
END: end
CONSTANT: Uso
IDENTIFIER: del
IDENTIFIER: algoritmo
IDENTIFIER: arr1
ASSIGN: =
LBRACKET: [
INTEGER: 12
COMMA: ,
INTEGER: 11
COMMA: ,
INTEGER: 13
COMMA: ,
INTEGER: 5
COMMA: ,
INTEGER: 6
RBRACKET: ]
IDENTIFIER: quick_sort
LPAREN: (
IDENTIFIER: arr1
COMMA: ,
INTEGER: 0
COMMA: ,
IDENTIFIER: arr1
DOT: .
IDENTIFIER: length
MINUS: -
INTEGER: 1
RPAREN: )
IDENTIFIER: print_array
LPAREN: (
IDENTIFIER: arr1
RPAREN: )

Errores léxicos:
Error léxico: # en la línea 4
Error léxico: ó en la línea 4
Error léxico: # en la línea 5
Error léxico: ó en la línea 5
Error léxico: # en la línea 10
Error léxico: ú en la línea 10
Error léxico: # en la línea 11
Error léxico: Í en la línea 11
Error léxico: á en la línea 11
Error léxico: ñ en la línea 11
Error léxico: # en la línea 13
Error léxico: # en la línea 17
Error léxico: # en la línea 21
Error léxico: ó en la línea 21
Error léxico: # en la línea 30
