Tokens reconocidos:
DEF: def
IDENTIFIER: insertion_sort
LPAREN: (
IDENTIFIER: arr
RPAREN: )
RETURN: return
IDENTIFIER: arr
IF: if
IDENTIFIER: arr
DOT: .
IDENTIFIER: length
LESS_EQUAL: <=
INTEGER: 1
FOR: for
IDENTIFIER: i
IN: in
INTEGER: 1
RANGE: ..
DOT: .
IDENTIFIER: arr
DOT: .
IDENTIFIER: length
IDENTIFIER: key
ASSIGN: =
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: i
RBRACKET: ]
IDENTIFIER: pos
ASSIGN: =
INTEGER: 0
WHILE: while
IDENTIFIER: pos
LESS: <
IDENTIFIER: i
AND: &&
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: pos
RBRACKET: ]
LESS_EQUAL: <=
IDENTIFIER: key
IDENTIFIER: pos
PLUS_ASSIGN: +=
INTEGER: 1
END: end
IF: if
IDENTIFIER: pos
LESS: <
IDENTIFIER: i
IDENTIFIER: arr
DOT: .
IDENTIFIER: delete_at
LPAREN: (
IDENTIFIER: i
RPAREN: )
IDENTIFIER: arr
DOT: .
IDENTIFIER: insert
LPAREN: (
IDENTIFIER: pos
COMMA: ,
IDENTIFIER: key
RPAREN: )
END: end
END: end
RETURN: return
IDENTIFIER: arr
END: end
DEF: def
IDENTIFIER: verificar_ordenamiento
LPAREN: (
IDENTIFIER: arr
RPAREN: )
FOR: for
IDENTIFIER: i
IN: in
INTEGER: 1
RANGE: ..
DOT: .
IDENTIFIER: arr
DOT: .
IDENTIFIER: length
RETURN: return
FALSE: false
IF: if
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: i
MINUS: -
INTEGER: 1
RBRACKET: ]
GREATER: >
IDENTIFIER: arr
LBRACKET: [
IDENTIFIER: i
RBRACKET: ]
END: end
TRUE: true
END: end
IDENTIFIER: numeros
ASSIGN: =
LBRACKET: [
INTEGER: 64
COMMA: ,
INTEGER: 34
COMMA: ,
INTEGER: 25
COMMA: ,
INTEGER: 12
COMMA: ,
INTEGER: 22
COMMA: ,
INTEGER: 11
COMMA: ,
INTEGER: 90
COMMA: ,
INTEGER: 5
RBRACKET: ]
IDENTIFIER: copia_numeros
ASSIGN: =
IDENTIFIER: numeros
DOT: .
IDENTIFIER: dup
IDENTIFIER: resultado
ASSIGN: =
IDENTIFIER: insertion_sort
LPAREN: (
IDENTIFIER: copia_numeros
RPAREN: )
IDENTIFIER: es_correcto
ASSIGN: =
IDENTIFIER: verificar_ordenamiento
LPAREN: (
IDENTIFIER: resultado
RPAREN: )
PUTS: puts
STRING: Array original:
IDENTIFIER: p
IDENTIFIER: numeros
PUTS: puts
STRING: Array ordenado:
IDENTIFIER: p
IDENTIFIER: resultado
PUTS: puts
STRING: ¿Ordenado correctamente?: #{es_correcto}
