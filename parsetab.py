
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightPOWERAND ASSIGN BEGIN BITWISE_AND BREAK CASE CLASS CLASS_VAR COMMA COMMENT CONSTANT DEF DIVIDE DIVIDE_ASSIGN DO DOT DOUBLE_DOT ELSE ELSIF END ENSURE EQUALS FALSE FLOAT FLOOR_DIVIDE FOR GETS GLOBAL_VAR GREATER GREATER_EQUAL IDENTIFIER IF IN INSTANCE_VAR INTEGER LAMBDA LBRACE LBRACKET LESS LESS_EQUAL LPAREN MINUS MINUS_ASSIGN MOD MODULE MOD_ASSIGN NEXT NIL NOT NOT_EQUALS OR PIPE PLUS PLUS_ASSIGN POWER POWER_ASSIGN PROC PUTS QUESTION_MARK RAISE RANGE RBRACE RBRACKET REDO REQUIRE RESCUE RETRY RETURN RPAREN SELF SEMICOLON SETNEW SPACESHIP STRING SUPER TIMES TIMES_ASSIGN TRUE UNTIL WHEN WHILE YIELDprogram : statements END\n               | statementsparams : IDENTIFIER\n              | params COMMA IDENTIFIERstatements : statement\n                  | statements statementstatement :  expressionstatement : IDENTIFIER ASSIGN INTEGER\n                 | IDENTIFIER ASSIGN FLOATstatement : INSTANCE_VAR ASSIGN INTEGER\n                 | INSTANCE_VAR ASSIGN FLOATstatement : SETNEW LPAREN optional_elements RPARENoptional_elements : elements\n                         | emptyempty :statement : WHILE expression statement ENDstatement : IDENTIFIER ASSIGN GETSexpression : termterm : factor DIVIDE factorterm : factor TIMES factorexpression : expression PLUS factorexpression : expression MINUS factorfactor : INTEGER\n              | FLOAT factor : LPAREN expression RPARENexpression : LBRACKET elements RBRACKETelements : expression\n                | elements COMMA expressionstatement : DEF IDENTIFIER LPAREN params RPAREN statement ENDstatement : IDENTIFIER LPAREN params RPARENstatement : FOR IDENTIFIER IN range statementrange : INTEGER DOUBLE_DOT INTEGER\n             | FLOAT DOUBLE_DOT FLOATstatement : PUTS statement'
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,6,7,12,13,14,15,19,23,27,30,35,36,37,38,39,42,43,47,49,51,52,53,55,56,57,58,60,65,66,70,71,72,],[5,5,-5,-7,-23,-24,28,29,5,-18,-6,40,5,-34,-21,-22,-8,-9,-17,-10,-11,-25,40,-19,-20,-26,-30,64,-12,-16,5,5,-31,-32,-33,-29,]),'INSTANCE_VAR':([0,2,3,4,6,7,14,15,19,27,30,35,36,37,38,39,42,43,47,51,52,53,55,57,58,60,65,66,70,71,72,],[8,8,-5,-7,-23,-24,8,-18,-6,8,-34,-21,-22,-8,-9,-17,-10,-11,-25,-19,-20,-26,-30,-12,-16,8,8,-31,-32,-33,-29,]),'SETNEW':([0,2,3,4,6,7,14,15,19,27,30,35,36,37,38,39,42,43,47,51,52,53,55,57,58,60,65,66,70,71,72,],[9,9,-5,-7,-23,-24,9,-18,-6,9,-34,-21,-22,-8,-9,-17,-10,-11,-25,-19,-20,-26,-30,-12,-16,9,9,-31,-32,-33,-29,]),'WHILE':([0,2,3,4,6,7,14,15,19,27,30,35,36,37,38,39,42,43,47,51,52,53,55,57,58,60,65,66,70,71,72,],[11,11,-5,-7,-23,-24,11,-18,-6,11,-34,-21,-22,-8,-9,-17,-10,-11,-25,-19,-20,-26,-30,-12,-16,11,11,-31,-32,-33,-29,]),'DEF':([0,2,3,4,6,7,14,15,19,27,30,35,36,37,38,39,42,43,47,51,52,53,55,57,58,60,65,66,70,71,72,],[12,12,-5,-7,-23,-24,12,-18,-6,12,-34,-21,-22,-8,-9,-17,-10,-11,-25,-19,-20,-26,-30,-12,-16,12,12,-31,-32,-33,-29,]),'FOR':([0,2,3,4,6,7,14,15,19,27,30,35,36,37,38,39,42,43,47,51,52,53,55,57,58,60,65,66,70,71,72,],[13,13,-5,-7,-23,-24,13,-18,-6,13,-34,-21,-22,-8,-9,-17,-10,-11,-25,-19,-20,-26,-30,-12,-16,13,13,-31,-32,-33,-29,]),'PUTS':([0,2,3,4,6,7,14,15,19,27,30,35,36,37,38,39,42,43,47,51,52,53,55,57,58,60,65,66,70,71,72,],[14,14,-5,-7,-23,-24,14,-18,-6,14,-34,-21,-22,-8,-9,-17,-10,-11,-25,-19,-20,-26,-30,-12,-16,14,14,-31,-32,-33,-29,]),'LBRACKET':([0,2,3,4,6,7,10,11,14,15,17,19,25,27,30,35,36,37,38,39,42,43,47,51,52,53,54,55,57,58,60,65,66,70,71,72,],[17,17,-5,-7,-23,-24,17,17,17,-18,17,-6,17,17,-34,-21,-22,-8,-9,-17,-10,-11,-25,-19,-20,-26,17,-30,-12,-16,17,17,-31,-32,-33,-29,]),'INTEGER':([0,2,3,4,6,7,10,11,14,15,17,19,20,21,22,24,25,27,30,31,32,35,36,37,38,39,42,43,47,50,51,52,53,54,55,57,58,60,65,66,67,70,71,72,],[6,6,-5,-7,-23,-24,6,6,6,-18,6,-6,6,6,37,42,6,6,-34,6,6,-21,-22,-8,-9,-17,-10,-11,-25,61,-19,-20,-26,6,-30,-12,-16,6,6,-31,70,-32,-33,-29,]),'FLOAT':([0,2,3,4,6,7,10,11,14,15,17,19,20,21,22,24,25,27,30,31,32,35,36,37,38,39,42,43,47,50,51,52,53,54,55,57,58,60,65,66,68,70,71,72,],[7,7,-5,-7,-23,-24,7,7,7,-18,7,-6,7,7,38,43,7,7,-34,7,7,-21,-22,-8,-9,-17,-10,-11,-25,62,-19,-20,-26,7,-30,-12,-16,7,7,-31,71,-32,-33,-29,]),'LPAREN':([0,2,3,4,5,6,7,9,10,11,14,15,17,19,20,21,25,27,28,30,31,32,35,36,37,38,39,42,43,47,51,52,53,54,55,57,58,60,65,66,70,71,72,],[10,10,-5,-7,23,-23,-24,25,10,10,10,-18,10,-6,10,10,10,10,49,-34,10,10,-21,-22,-8,-9,-17,-10,-11,-25,-19,-20,-26,10,-30,-12,-16,10,10,-31,-32,-33,-29,]),'$end':([1,2,3,4,6,7,15,18,19,30,35,36,37,38,39,42,43,47,51,52,53,55,57,58,66,72,],[0,-2,-5,-7,-23,-24,-18,-1,-6,-34,-21,-22,-8,-9,-17,-10,-11,-25,-19,-20,-26,-30,-12,-16,-31,-29,]),'END':([2,3,4,6,7,15,19,30,35,36,37,38,39,42,43,47,48,51,52,53,55,57,58,66,69,72,],[18,-5,-7,-23,-24,-18,-6,-34,-21,-22,-8,-9,-17,-10,-11,-25,58,-19,-20,-26,-30,-12,-16,-31,72,-29,]),'PLUS':([4,6,7,15,26,27,34,35,36,47,51,52,53,63,],[20,-23,-24,-18,20,20,20,-21,-22,-25,-19,-20,-26,20,]),'MINUS':([4,6,7,15,26,27,34,35,36,47,51,52,53,63,],[21,-23,-24,-18,21,21,21,-21,-22,-25,-19,-20,-26,21,]),'ASSIGN':([5,8,],[22,24,]),'DIVIDE':([6,7,16,47,],[-23,-24,31,-25,]),'TIMES':([6,7,16,47,],[-23,-24,32,-25,]),'RPAREN':([6,7,15,25,26,34,35,36,40,41,44,45,46,47,51,52,53,59,63,64,],[-23,-24,-18,-15,47,-27,-21,-22,-3,55,57,-13,-14,-25,-19,-20,-26,65,-28,-4,]),'RBRACKET':([6,7,15,33,34,35,36,47,51,52,53,63,],[-23,-24,-18,53,-27,-21,-22,-25,-19,-20,-26,-28,]),'COMMA':([6,7,15,33,34,35,36,40,41,45,47,51,52,53,59,63,64,],[-23,-24,-18,54,-27,-21,-22,-3,56,54,-25,-19,-20,-26,56,-28,-4,]),'GETS':([22,],[39,]),'IN':([29,],[50,]),'DOUBLE_DOT':([61,62,],[67,68,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,],[2,]),'statement':([0,2,14,27,60,65,],[3,19,30,48,66,69,]),'expression':([0,2,10,11,14,17,25,27,54,60,65,],[4,4,26,27,4,34,34,4,63,4,4,]),'term':([0,2,10,11,14,17,25,27,54,60,65,],[15,15,15,15,15,15,15,15,15,15,15,]),'factor':([0,2,10,11,14,17,20,21,25,27,31,32,54,60,65,],[16,16,16,16,16,16,35,36,16,16,51,52,16,16,16,]),'elements':([17,25,],[33,45,]),'params':([23,49,],[41,59,]),'optional_elements':([25,],[44,]),'empty':([25,],[46,]),'range':([50,],[60,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements END','program',2,'p_program','AnalizadorSintactico.py',14),
  ('program -> statements','program',1,'p_program','AnalizadorSintactico.py',15),
  ('params -> IDENTIFIER','params',1,'p_params','AnalizadorSintactico.py',20),
  ('params -> params COMMA IDENTIFIER','params',3,'p_params','AnalizadorSintactico.py',21),
  ('statements -> statement','statements',1,'p_statements','AnalizadorSintactico.py',28),
  ('statements -> statements statement','statements',2,'p_statements','AnalizadorSintactico.py',29),
  ('statement -> expression','statement',1,'p_statement','AnalizadorSintactico.py',37),
  ('statement -> IDENTIFIER ASSIGN INTEGER','statement',3,'p_local_var','AnalizadorSintactico.py',41),
  ('statement -> IDENTIFIER ASSIGN FLOAT','statement',3,'p_local_var','AnalizadorSintactico.py',42),
  ('statement -> INSTANCE_VAR ASSIGN INTEGER','statement',3,'p_instance_var','AnalizadorSintactico.py',48),
  ('statement -> INSTANCE_VAR ASSIGN FLOAT','statement',3,'p_instance_var','AnalizadorSintactico.py',49),
  ('statement -> SETNEW LPAREN optional_elements RPAREN','statement',4,'p_set','AnalizadorSintactico.py',53),
  ('optional_elements -> elements','optional_elements',1,'p_optional_elements','AnalizadorSintactico.py',58),
  ('optional_elements -> empty','optional_elements',1,'p_optional_elements','AnalizadorSintactico.py',59),
  ('empty -> <empty>','empty',0,'p_empty','AnalizadorSintactico.py',63),
  ('statement -> WHILE expression statement END','statement',4,'p_while_statement','AnalizadorSintactico.py',67),
  ('statement -> IDENTIFIER ASSIGN GETS','statement',3,'p_gets_statement','AnalizadorSintactico.py',71),
  ('expression -> term','expression',1,'p_expression_term','AnalizadorSintactico.py',79),
  ('term -> factor DIVIDE factor','term',3,'p_term_div','AnalizadorSintactico.py',83),
  ('term -> factor TIMES factor','term',3,'p_term_times','AnalizadorSintactico.py',87),
  ('expression -> expression PLUS factor','expression',3,'p_expression_plus','AnalizadorSintactico.py',91),
  ('expression -> expression MINUS factor','expression',3,'p_expression_minus','AnalizadorSintactico.py',95),
  ('factor -> INTEGER','factor',1,'p_factor_num','AnalizadorSintactico.py',100),
  ('factor -> FLOAT','factor',1,'p_factor_num','AnalizadorSintactico.py',101),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','AnalizadorSintactico.py',105),
  ('expression -> LBRACKET elements RBRACKET','expression',3,'p_array','AnalizadorSintactico.py',110),
  ('elements -> expression','elements',1,'p_elements','AnalizadorSintactico.py',115),
  ('elements -> elements COMMA expression','elements',3,'p_elements','AnalizadorSintactico.py',116),
  ('statement -> DEF IDENTIFIER LPAREN params RPAREN statement END','statement',7,'p_method_with_return_declaration','AnalizadorSintactico.py',124),
  ('statement -> IDENTIFIER LPAREN params RPAREN','statement',4,'p_method_call_with_return','AnalizadorSintactico.py',129),
  ('statement -> FOR IDENTIFIER IN range statement','statement',5,'p_for_statement','AnalizadorSintactico.py',134),
  ('range -> INTEGER DOUBLE_DOT INTEGER','range',3,'p_range','AnalizadorSintactico.py',139),
  ('range -> FLOAT DOUBLE_DOT FLOAT','range',3,'p_range','AnalizadorSintactico.py',140),
  ('statement -> PUTS statement','statement',2,'p_puts_statement','AnalizadorSintactico.py',145),
]
