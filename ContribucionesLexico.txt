
üîß *Divisi√≥n del trabajo en el analizador l√©xico seg√∫n comentarios en el c√≥digo*

---

üë§ *Giovanni ‚Äì Contribuciones fundamentales a la base del analizador l√©xico*

* *Definici√≥n de tokens esenciales:* Cre√≥ los tokens b√°sicos como DEF, IDENTIFIER, LBRACKET, RBRACKET, ASSIGN, LPAREN, RPAREN, FOR, IN, DOT, RANGE, MINUS, PLUS, GREATER, WHILE, END, RETURN, COMMENT, STRING.
* *Expresiones regulares b√°sicas:* Especific√≥ los patrones l√©xicos para varios s√≠mbolos como corchetes, par√©ntesis, operadores aritm√©ticos y el punto (.).
* *Palabras clave b√°sicas:* Defini√≥ palabras clave fundamentales del lenguaje (def, for, in, while, end, return) y su asignaci√≥n como tipos de token.
* *Reconocimiento de identificadores y constantes:* Implement√≥ t_IDENTIFIER para diferenciar entre IDENTIFIER y CONSTANT.
* *Manejo de cadenas y comentarios de una l√≠nea:* Implement√≥ t_STRING y t_COMMENT para reconocer cadenas de texto y comentarios con #.
* *Control de l√≠neas y errores l√©xicos:* A√±adi√≥ la funci√≥n t_newline para contar l√≠neas nuevas y t_error para manejar errores l√©xicos, guard√°ndolos en una lista.

---

üë§ *Darwin ‚Äì Contribuciones avanzadas y estructurales*

* *Implementaci√≥n de operadores compuestos y especiales:* A√±adi√≥ tokens como PLUS_ASSIGN, MINUS_ASSIGN, TIMES_ASSIGN, DIVIDE_ASSIGN, MOD_ASSIGN, POWER_ASSIGN, FLOOR_DIVIDE, BITWISE_AND, BITWISE_OR, y BLOCK_PARAM.
* *Definici√≥n de expresiones regulares para los operadores anteriores:* Desarroll√≥ los patrones que permiten al lexer reconocer dichos operadores.
* *Reconocimiento de n√∫meros decimales:* Implement√≥ la funci√≥n t_FLOAT para reconocer y convertir literales de punto flotante.
* *Sistema de logging:* Desarroll√≥ la funci√≥n log_tokens_and_errors() para guardar en archivos los tokens y errores detectados durante el an√°lisis.
* *Ejecuci√≥n de pruebas del analizador:* Escribi√≥ la funci√≥n test_lexical_analyzer() que procesa una entrada, detecta tokens, maneja errores y genera los logs.
* *Prueba final del lexer con c√≥digo Ruby:* Prepar√≥ un ejemplo de c√≥digo Ruby (ordenamiento por inserci√≥n) para probar el analizador.

---

üë§ *Jonathan ‚Äì Contribuciones de expansi√≥n sem√°ntica*

* *Ampliaci√≥n del vocabulario del lenguaje:* A√±adi√≥ 24 nuevas palabras clave como IF, ELSIF, ELSE, UNTIL, BREAK, CLASS, MODULE, DO, RESCUE, RAISE, YIELD, REQUIRE, entre otras.
* *Extensi√≥n del conjunto de tokens:* Agreg√≥ nuevos tipos de tokens para representar esas palabras clave y el token CONSTANT.
* *Reconocimiento de enteros:* Implement√≥ la funci√≥n t_INTEGER para identificar y convertir n√∫meros enteros.
* *Manejo de comentarios multil√≠nea:* A√±adi√≥ soporte para comentarios tipo =begin ... =end mediante t_MULTILINE_COMMENT.
* *Agrego palabras claves para identificar booleans.